# Generated from PyTealParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PyTealParserBase import PyTealParserBase
else:
    from PyTealParserBase import PyTealParserBase

def serializedATN():
    return [
        4,1,229,2971,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,1,0,1,0,5,0,469,8,0,10,0,12,0,472,
        9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,481,8,1,1,2,1,2,5,2,485,8,2,
        10,2,12,2,488,9,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,496,8,3,1,3,3,3,499,
        8,3,1,3,1,3,1,4,4,4,504,8,4,11,4,12,4,505,1,5,1,5,1,5,1,5,3,5,512,
        8,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,522,8,7,1,7,1,7,1,7,1,8,
        1,8,3,8,529,8,8,1,8,1,8,1,9,1,9,1,9,3,9,536,8,9,1,9,1,9,1,9,1,9,
        3,9,542,8,9,5,9,544,8,9,10,9,12,9,547,9,9,1,9,1,9,1,9,3,9,552,8,
        9,1,9,1,9,1,9,1,9,3,9,558,8,9,5,9,560,8,9,10,9,12,9,563,9,9,1,9,
        1,9,1,9,1,9,3,9,569,8,9,3,9,571,8,9,3,9,573,8,9,1,9,1,9,1,9,3,9,
        578,8,9,3,9,580,8,9,3,9,582,8,9,1,9,1,9,3,9,586,8,9,1,9,1,9,1,9,
        1,9,3,9,592,8,9,5,9,594,8,9,10,9,12,9,597,9,9,1,9,1,9,1,9,1,9,3,
        9,603,8,9,3,9,605,8,9,3,9,607,8,9,1,9,1,9,1,9,3,9,612,8,9,3,9,614,
        8,9,1,10,1,10,1,10,3,10,619,8,10,1,11,1,11,1,11,3,11,624,8,11,1,
        11,1,11,1,11,1,11,3,11,630,8,11,5,11,632,8,11,10,11,12,11,635,9,
        11,1,11,1,11,1,11,3,11,640,8,11,1,11,1,11,1,11,1,11,3,11,646,8,11,
        5,11,648,8,11,10,11,12,11,651,9,11,1,11,1,11,1,11,1,11,3,11,657,
        8,11,3,11,659,8,11,3,11,661,8,11,1,11,1,11,1,11,3,11,666,8,11,3,
        11,668,8,11,3,11,670,8,11,1,11,1,11,3,11,674,8,11,1,11,1,11,1,11,
        1,11,3,11,680,8,11,5,11,682,8,11,10,11,12,11,685,9,11,1,11,1,11,
        1,11,1,11,3,11,691,8,11,3,11,693,8,11,3,11,695,8,11,1,11,1,11,1,
        11,3,11,700,8,11,3,11,702,8,11,1,12,1,12,1,13,1,13,3,13,708,8,13,
        1,14,1,14,1,14,5,14,713,8,14,10,14,12,14,716,9,14,1,14,3,14,719,
        8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,731,
        8,15,1,16,1,16,1,16,1,16,1,16,3,16,738,8,16,1,16,1,16,1,16,3,16,
        743,8,16,5,16,745,8,16,10,16,12,16,748,9,16,3,16,750,8,16,1,17,1,
        17,1,17,1,17,3,17,756,8,17,1,18,1,18,3,18,760,8,18,1,18,1,18,1,18,
        3,18,765,8,18,5,18,767,8,18,10,18,12,18,770,9,18,1,18,3,18,773,8,
        18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,
        22,787,8,22,1,23,1,23,1,24,1,24,1,25,1,25,3,25,795,8,25,1,26,1,26,
        1,27,1,27,1,27,1,27,3,27,803,8,27,3,27,805,8,27,1,28,1,28,3,28,809,
        8,28,1,29,1,29,1,29,1,30,1,30,5,30,816,8,30,10,30,12,30,819,9,30,
        1,30,1,30,4,30,823,8,30,11,30,12,30,824,3,30,827,8,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,3,30,836,8,30,1,31,1,31,1,31,3,31,841,8,
        31,1,32,1,32,1,32,3,32,846,8,32,1,33,1,33,1,33,5,33,851,8,33,10,
        33,12,33,854,9,33,1,33,3,33,857,8,33,1,34,1,34,1,34,5,34,862,8,34,
        10,34,12,34,865,9,34,1,35,1,35,1,35,5,35,870,8,35,10,35,12,35,873,
        9,35,1,36,1,36,1,36,1,36,5,36,879,8,36,10,36,12,36,882,9,36,1,37,
        1,37,1,37,1,37,5,37,888,8,37,10,37,12,37,891,9,37,1,38,1,38,1,38,
        1,38,3,38,897,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,3,39,909,8,39,1,40,1,40,1,40,1,40,3,40,915,8,40,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,926,8,41,10,41,12,41,929,9,
        41,1,41,1,41,1,41,3,41,934,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,
        42,3,42,943,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,
        43,954,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,4,44,963,8,44,11,
        44,12,44,964,1,44,1,44,1,44,3,44,970,8,44,1,44,1,44,1,44,3,44,975,
        8,44,1,44,1,44,1,44,3,44,980,8,44,1,45,1,45,1,45,1,45,5,45,986,8,
        45,10,45,12,45,989,9,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,997,8,
        46,1,47,1,47,1,47,1,47,3,47,1003,8,47,3,47,1005,8,47,1,48,1,48,1,
        48,1,48,4,48,1011,8,48,11,48,12,48,1012,1,48,1,48,3,48,1017,8,48,
        1,49,1,49,1,49,1,49,1,49,1,49,4,49,1025,8,49,11,49,12,49,1026,1,
        49,1,49,1,50,1,50,1,50,3,50,1034,8,50,1,50,3,50,1037,8,50,1,51,1,
        51,4,51,1041,8,51,11,51,12,51,1042,1,51,3,51,1046,8,51,1,52,1,52,
        1,52,3,52,1051,8,52,1,53,1,53,1,53,3,53,1056,8,53,1,53,1,53,1,53,
        1,54,1,54,1,54,1,55,1,55,3,55,1066,8,55,1,56,1,56,3,56,1070,8,56,
        1,57,1,57,1,57,1,57,1,58,1,58,1,58,5,58,1079,8,58,10,58,12,58,1082,
        9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1092,8,59,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1102,8,60,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,3,61,1112,8,61,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,3,62,1122,8,62,1,63,1,63,1,63,3,63,1127,8,63,1,64,
        1,64,1,64,3,64,1132,8,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,
        1,68,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,4,71,1151,8,71,11,71,
        12,71,1152,1,72,1,72,3,72,1157,8,72,1,73,1,73,1,73,1,73,1,74,1,74,
        3,74,1165,8,74,1,74,1,74,1,74,3,74,1170,8,74,1,74,3,74,1173,8,74,
        1,75,1,75,1,75,3,75,1178,8,75,1,76,1,76,1,76,5,76,1183,8,76,10,76,
        12,76,1186,9,76,1,76,3,76,1189,8,76,1,77,1,77,3,77,1193,8,77,1,78,
        1,78,1,78,1,78,3,78,1199,8,78,1,79,1,79,1,79,1,79,1,79,3,79,1206,
        8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1215,8,79,1,79,1,79,
        1,79,1,79,1,79,3,79,1222,8,79,1,79,1,79,3,79,1226,8,79,1,80,1,80,
        1,80,5,80,1231,8,80,10,80,12,80,1234,9,80,1,81,1,81,3,81,1238,8,
        81,1,81,1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,3,83,1254,8,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1262,8,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1272,8,83,1,83,1,
        83,3,83,1276,8,83,1,84,1,84,1,84,5,84,1281,8,84,10,84,12,84,1284,
        9,84,1,85,1,85,1,85,5,85,1289,8,85,10,85,12,85,1292,9,85,1,86,1,
        86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1304,8,87,1,87,3,
        87,1307,8,87,1,88,1,88,3,88,1311,8,88,1,89,1,89,3,89,1315,8,89,1,
        89,1,89,1,89,1,90,1,90,3,90,1322,8,90,1,90,1,90,1,90,1,91,1,91,1,
        91,5,91,1330,8,91,10,91,12,91,1333,9,91,1,91,1,91,3,91,1337,8,91,
        1,92,1,92,1,92,5,92,1342,8,92,10,92,12,92,1345,9,92,1,92,1,92,3,
        92,1349,8,92,1,93,1,93,1,93,1,93,1,93,3,93,1356,8,93,1,94,1,94,1,
        94,1,94,5,94,1362,8,94,10,94,12,94,1365,9,94,1,94,1,94,3,94,1369,
        8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
        1,95,3,95,1384,8,95,1,96,1,96,1,96,1,97,1,97,1,97,1,97,4,97,1393,
        8,97,11,97,12,97,1394,1,97,1,97,1,97,1,97,1,97,3,97,1402,8,97,1,
        97,1,97,1,97,3,97,1407,8,97,1,97,1,97,3,97,1411,8,97,1,97,1,97,3,
        97,1415,8,97,1,97,1,97,1,97,1,97,1,97,3,97,1422,8,97,1,97,1,97,1,
        97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
        97,1,97,1,97,1,97,1,97,1,97,5,97,1445,8,97,10,97,12,97,1448,9,97,
        1,98,1,98,1,98,3,98,1453,8,98,1,99,1,99,1,99,1,99,3,99,1459,8,99,
        1,99,1,99,1,100,1,100,1,100,1,100,1,100,3,100,1468,8,100,1,100,1,
        100,3,100,1472,8,100,1,100,1,100,1,101,1,101,1,102,1,102,1,102,1,
        102,3,102,1482,8,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,
        103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1511,
        8,103,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1519,8,104,1,104,
        1,104,1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1531,
        8,106,1,106,1,106,1,107,1,107,1,108,1,108,1,108,1,108,1,108,5,108,
        1542,8,108,10,108,12,108,1545,9,108,1,108,3,108,1548,8,108,1,108,
        1,108,1,109,1,109,1,109,1,109,1,109,5,109,1557,8,109,10,109,12,109,
        1560,9,109,1,109,3,109,1563,8,109,1,109,1,109,1,110,1,110,1,110,
        1,110,3,110,1571,8,110,1,110,1,110,1,111,1,111,1,111,1,111,3,111,
        1579,8,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,3,112,
        1589,8,112,1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,3,113,
        1599,8,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,3,114,
        1609,8,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,3,115,
        1619,8,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,1,116,3,116,
        1629,8,116,1,116,1,116,1,117,1,117,1,117,1,117,1,117,1,117,3,117,
        1639,8,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,118,3,118,
        1649,8,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,1,119,3,119,
        1659,8,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,3,120,
        1669,8,120,1,120,1,120,1,121,1,121,1,121,1,121,1,121,1,121,3,121,
        1679,8,121,1,121,1,121,1,122,1,122,1,122,1,122,1,122,1,122,3,122,
        1689,8,122,1,122,1,122,1,123,1,123,1,123,1,123,3,123,1697,8,123,
        1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,3,124,1707,8,124,
        1,124,1,124,1,125,1,125,1,125,1,125,1,125,1,125,3,125,1717,8,125,
        1,125,1,125,1,126,1,126,1,126,1,126,1,126,1,126,3,126,1727,8,126,
        1,126,1,126,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1737,8,127,
        1,127,1,127,1,128,1,128,1,128,1,128,1,128,1,128,3,128,1747,8,128,
        1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,129,3,129,1757,8,129,
        1,129,1,129,1,130,1,130,1,130,1,130,3,130,1765,8,130,1,130,1,130,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,5,131,1851,8,131,10,131,12,131,1854,
        9,131,3,131,1856,8,131,1,132,1,132,1,132,1,132,1,132,1,132,5,132,
        1864,8,132,10,132,12,132,1867,9,132,1,133,1,133,1,133,1,133,1,133,
        1,133,5,133,1875,8,133,10,133,12,133,1878,9,133,1,134,1,134,1,134,
        1,134,1,134,1,134,5,134,1886,8,134,10,134,12,134,1889,9,134,1,135,
        1,135,1,135,1,135,1,135,1,135,5,135,1897,8,135,10,135,12,135,1900,
        9,135,1,136,1,136,1,136,1,136,1,136,1,136,5,136,1908,8,136,10,136,
        12,136,1911,9,136,1,137,1,137,1,137,1,137,1,137,1,137,5,137,1919,
        8,137,10,137,12,137,1922,9,137,1,138,1,138,1,138,1,138,1,138,1,138,
        5,138,1930,8,138,10,138,12,138,1933,9,138,1,139,1,139,1,139,1,139,
        1,139,1,139,5,139,1941,8,139,10,139,12,139,1944,9,139,1,140,1,140,
        1,140,1,140,1,140,1,140,5,140,1952,8,140,10,140,12,140,1955,9,140,
        1,141,1,141,1,141,1,141,1,141,1,141,5,141,1963,8,141,10,141,12,141,
        1966,9,141,1,142,1,142,1,142,1,142,1,142,1,142,5,142,1974,8,142,
        10,142,12,142,1977,9,142,1,143,1,143,1,143,1,143,1,143,1,143,5,143,
        1985,8,143,10,143,12,143,1988,9,143,1,144,1,144,1,144,1,144,1,144,
        1,144,5,144,1996,8,144,10,144,12,144,1999,9,144,1,145,1,145,1,145,
        1,145,1,145,1,145,5,145,2007,8,145,10,145,12,145,2010,9,145,1,146,
        1,146,1,146,1,146,1,146,1,146,5,146,2018,8,146,10,146,12,146,2021,
        9,146,1,147,1,147,1,147,1,147,1,147,1,147,5,147,2029,8,147,10,147,
        12,147,2032,9,147,1,148,1,148,1,148,1,148,1,148,1,148,5,148,2040,
        8,148,10,148,12,148,2043,9,148,1,149,1,149,1,149,1,149,1,149,1,149,
        5,149,2051,8,149,10,149,12,149,2054,9,149,1,150,1,150,1,150,1,150,
        1,150,1,150,5,150,2062,8,150,10,150,12,150,2065,9,150,1,151,1,151,
        1,151,1,151,5,151,2071,8,151,10,151,12,151,2074,9,151,1,152,1,152,
        1,152,1,152,5,152,2080,8,152,10,152,12,152,2083,9,152,1,153,1,153,
        1,153,1,153,5,153,2089,8,153,10,153,12,153,2092,9,153,1,154,1,154,
        1,154,1,154,1,154,1,154,5,154,2100,8,154,10,154,12,154,2103,9,154,
        1,155,1,155,1,155,1,155,1,155,1,155,5,155,2111,8,155,10,155,12,155,
        2114,9,155,1,156,1,156,1,156,1,156,5,156,2120,8,156,10,156,12,156,
        2123,9,156,1,157,1,157,1,157,1,157,1,157,1,157,5,157,2131,8,157,
        10,157,12,157,2134,9,157,1,158,1,158,1,158,1,158,5,158,2140,8,158,
        10,158,12,158,2143,9,158,1,159,1,159,1,159,1,159,1,159,1,159,5,159,
        2151,8,159,10,159,12,159,2154,9,159,1,160,1,160,1,160,1,160,1,160,
        1,160,5,160,2162,8,160,10,160,12,160,2165,9,160,1,161,1,161,1,161,
        1,161,1,161,1,161,5,161,2173,8,161,10,161,12,161,2176,9,161,1,162,
        1,162,1,162,1,162,1,162,1,162,5,162,2184,8,162,10,162,12,162,2187,
        9,162,1,163,1,163,1,163,1,163,1,163,1,163,5,163,2195,8,163,10,163,
        12,163,2198,9,163,1,164,1,164,1,164,1,164,1,164,1,164,5,164,2206,
        8,164,10,164,12,164,2209,9,164,1,165,1,165,1,165,1,165,1,165,1,165,
        5,165,2217,8,165,10,165,12,165,2220,9,165,1,166,1,166,1,166,1,166,
        1,166,1,166,5,166,2228,8,166,10,166,12,166,2231,9,166,1,167,1,167,
        1,167,1,167,1,167,1,167,5,167,2239,8,167,10,167,12,167,2242,9,167,
        1,168,1,168,1,168,1,168,1,168,1,168,5,168,2250,8,168,10,168,12,168,
        2253,9,168,1,169,1,169,1,169,1,169,1,169,1,169,5,169,2261,8,169,
        10,169,12,169,2264,9,169,1,170,1,170,1,170,1,170,1,170,1,170,5,170,
        2272,8,170,10,170,12,170,2275,9,170,1,171,1,171,1,171,1,171,1,171,
        1,171,5,171,2283,8,171,10,171,12,171,2286,9,171,1,172,1,172,1,172,
        1,172,1,172,1,172,5,172,2294,8,172,10,172,12,172,2297,9,172,1,173,
        1,173,1,173,1,173,1,173,1,173,5,173,2305,8,173,10,173,12,173,2308,
        9,173,1,174,1,174,1,174,1,174,1,174,1,174,5,174,2316,8,174,10,174,
        12,174,2319,9,174,1,175,1,175,1,175,1,175,1,175,1,175,5,175,2327,
        8,175,10,175,12,175,2330,9,175,1,176,1,176,1,176,1,176,1,176,1,176,
        5,176,2338,8,176,10,176,12,176,2341,9,176,1,177,1,177,1,177,1,177,
        1,177,1,177,5,177,2349,8,177,10,177,12,177,2352,9,177,1,178,1,178,
        1,178,1,178,1,178,1,178,5,178,2360,8,178,10,178,12,178,2363,9,178,
        1,179,1,179,1,179,1,179,1,179,1,179,5,179,2371,8,179,10,179,12,179,
        2374,9,179,1,180,1,180,1,180,1,180,1,180,1,180,5,180,2382,8,180,
        10,180,12,180,2385,9,180,1,181,1,181,1,181,1,181,1,181,1,181,5,181,
        2393,8,181,10,181,12,181,2396,9,181,1,182,1,182,1,182,1,182,1,182,
        1,182,5,182,2404,8,182,10,182,12,182,2407,9,182,1,183,1,183,1,183,
        1,183,1,183,1,183,5,183,2415,8,183,10,183,12,183,2418,9,183,1,184,
        1,184,1,184,1,184,1,184,1,184,5,184,2426,8,184,10,184,12,184,2429,
        9,184,1,185,1,185,1,185,1,185,5,185,2435,8,185,10,185,12,185,2438,
        9,185,1,186,1,186,1,186,1,186,1,186,1,186,5,186,2446,8,186,10,186,
        12,186,2449,9,186,1,187,1,187,1,187,1,187,1,187,1,187,5,187,2457,
        8,187,10,187,12,187,2460,9,187,1,188,1,188,1,188,1,188,1,188,1,188,
        5,188,2468,8,188,10,188,12,188,2471,9,188,1,189,1,189,1,189,1,189,
        1,189,1,189,5,189,2479,8,189,10,189,12,189,2482,9,189,1,190,1,190,
        1,190,1,190,1,190,1,190,5,190,2490,8,190,10,190,12,190,2493,9,190,
        1,191,1,191,1,191,1,191,1,191,1,191,5,191,2501,8,191,10,191,12,191,
        2504,9,191,1,192,1,192,1,192,1,192,1,192,1,192,5,192,2512,8,192,
        10,192,12,192,2515,9,192,1,193,1,193,1,193,1,193,5,193,2521,8,193,
        10,193,12,193,2524,9,193,1,194,1,194,1,194,1,194,5,194,2530,8,194,
        10,194,12,194,2533,9,194,1,195,1,195,1,195,1,195,5,195,2539,8,195,
        10,195,12,195,2542,9,195,1,196,1,196,1,196,1,196,5,196,2548,8,196,
        10,196,12,196,2551,9,196,1,197,1,197,1,197,1,197,5,197,2557,8,197,
        10,197,12,197,2560,9,197,1,198,1,198,1,198,1,198,5,198,2566,8,198,
        10,198,12,198,2569,9,198,1,199,1,199,1,199,1,199,5,199,2575,8,199,
        10,199,12,199,2578,9,199,1,200,1,200,1,200,1,200,1,200,1,200,5,200,
        2586,8,200,10,200,12,200,2589,9,200,1,201,1,201,1,201,1,201,1,201,
        1,201,5,201,2597,8,201,10,201,12,201,2600,9,201,1,202,1,202,1,202,
        1,202,1,202,1,202,5,202,2608,8,202,10,202,12,202,2611,9,202,1,203,
        1,203,1,203,1,203,1,203,1,203,5,203,2619,8,203,10,203,12,203,2622,
        9,203,1,204,1,204,1,204,1,204,1,204,1,204,5,204,2630,8,204,10,204,
        12,204,2633,9,204,1,205,1,205,1,205,1,205,1,205,1,205,5,205,2641,
        8,205,10,205,12,205,2644,9,205,1,206,1,206,1,206,1,206,1,206,1,206,
        5,206,2652,8,206,10,206,12,206,2655,9,206,1,207,1,207,1,207,1,207,
        1,207,1,207,5,207,2663,8,207,10,207,12,207,2666,9,207,1,208,1,208,
        1,208,1,208,1,208,1,208,5,208,2674,8,208,10,208,12,208,2677,9,208,
        1,209,1,209,1,209,1,209,1,209,1,209,5,209,2685,8,209,10,209,12,209,
        2688,9,209,1,210,1,210,1,210,1,210,1,210,1,210,5,210,2696,8,210,
        10,210,12,210,2699,9,210,1,211,1,211,1,211,1,211,1,211,1,211,5,211,
        2707,8,211,10,211,12,211,2710,9,211,1,212,3,212,2713,8,212,1,212,
        1,212,5,212,2717,8,212,10,212,12,212,2720,9,212,1,212,1,212,3,212,
        2724,8,212,1,213,1,213,1,213,3,213,2729,8,213,1,213,1,213,1,213,
        3,213,2734,8,213,1,213,1,213,1,213,3,213,2739,8,213,1,213,1,213,
        1,213,1,213,4,213,2745,8,213,11,213,12,213,2746,1,213,1,213,1,213,
        1,213,3,213,2753,8,213,1,214,1,214,1,215,1,215,3,215,2759,8,215,
        1,215,1,215,1,215,1,215,3,215,2765,8,215,5,215,2767,8,215,10,215,
        12,215,2770,9,215,1,215,3,215,2773,8,215,3,215,2775,8,215,1,216,
        1,216,3,216,2779,8,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,3,216,2789,8,216,3,216,2791,8,216,1,217,1,217,1,217,5,217,
        2796,8,217,10,217,12,217,2799,9,217,1,217,3,217,2802,8,217,1,218,
        1,218,3,218,2806,8,218,1,218,1,218,3,218,2810,8,218,1,218,3,218,
        2813,8,218,3,218,2815,8,218,1,219,1,219,3,219,2819,8,219,1,220,1,
        220,3,220,2823,8,220,1,220,1,220,1,220,3,220,2828,8,220,5,220,2830,
        8,220,10,220,12,220,2833,9,220,1,220,3,220,2836,8,220,1,221,1,221,
        1,221,5,221,2841,8,221,10,221,12,221,2844,9,221,1,221,3,221,2847,
        8,221,1,222,1,222,1,222,1,222,1,222,1,222,3,222,2855,8,222,1,222,
        1,222,1,222,1,222,1,222,1,222,1,222,1,222,3,222,2865,8,222,5,222,
        2867,8,222,10,222,12,222,2870,9,222,1,222,3,222,2873,8,222,3,222,
        2875,8,222,1,222,1,222,3,222,2879,8,222,1,222,1,222,1,222,1,222,
        3,222,2885,8,222,5,222,2887,8,222,10,222,12,222,2890,9,222,1,222,
        3,222,2893,8,222,3,222,2895,8,222,3,222,2897,8,222,1,223,1,223,1,
        223,1,223,3,223,2903,8,223,1,223,3,223,2906,8,223,1,223,1,223,1,
        223,1,224,1,224,1,224,5,224,2914,8,224,10,224,12,224,2917,9,224,
        1,224,3,224,2920,8,224,1,225,1,225,3,225,2924,8,225,1,225,1,225,
        1,225,1,225,1,225,1,225,1,225,1,225,3,225,2934,8,225,1,226,1,226,
        3,226,2938,8,226,1,227,3,227,2941,8,227,1,227,1,227,1,227,1,227,
        1,227,3,227,2948,8,227,1,228,1,228,1,228,3,228,2953,8,228,1,229,
        1,229,1,230,1,230,3,230,2959,8,230,1,231,1,231,1,231,3,231,2964,
        8,231,1,232,4,232,2967,8,232,11,232,12,232,2968,1,232,0,1,194,233,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
        254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,
        286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
        318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,
        350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,
        382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,
        414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,
        446,448,450,452,454,456,458,460,462,464,0,11,1,0,121,133,1,0,87,
        88,2,0,104,105,109,109,3,0,89,89,106,108,119,119,1,0,104,105,1,0,
        102,103,1,0,5,7,1,0,8,9,2,0,10,13,20,21,2,0,29,32,38,39,3,0,73,73,
        83,83,138,138,3254,0,470,1,0,0,0,2,480,1,0,0,0,4,482,1,0,0,0,6,491,
        1,0,0,0,8,503,1,0,0,0,10,507,1,0,0,0,12,513,1,0,0,0,14,516,1,0,0,
        0,16,526,1,0,0,0,18,613,1,0,0,0,20,615,1,0,0,0,22,701,1,0,0,0,24,
        703,1,0,0,0,26,707,1,0,0,0,28,709,1,0,0,0,30,730,1,0,0,0,32,732,
        1,0,0,0,34,751,1,0,0,0,36,759,1,0,0,0,38,774,1,0,0,0,40,776,1,0,
        0,0,42,779,1,0,0,0,44,786,1,0,0,0,46,788,1,0,0,0,48,790,1,0,0,0,
        50,792,1,0,0,0,52,796,1,0,0,0,54,798,1,0,0,0,56,808,1,0,0,0,58,810,
        1,0,0,0,60,813,1,0,0,0,62,837,1,0,0,0,64,842,1,0,0,0,66,847,1,0,
        0,0,68,858,1,0,0,0,70,866,1,0,0,0,72,874,1,0,0,0,74,883,1,0,0,0,
        76,892,1,0,0,0,78,908,1,0,0,0,80,910,1,0,0,0,82,916,1,0,0,0,84,935,
        1,0,0,0,86,944,1,0,0,0,88,955,1,0,0,0,90,981,1,0,0,0,92,993,1,0,
        0,0,94,998,1,0,0,0,96,1016,1,0,0,0,98,1018,1,0,0,0,100,1036,1,0,
        0,0,102,1038,1,0,0,0,104,1050,1,0,0,0,106,1052,1,0,0,0,108,1060,
        1,0,0,0,110,1065,1,0,0,0,112,1069,1,0,0,0,114,1071,1,0,0,0,116,1075,
        1,0,0,0,118,1091,1,0,0,0,120,1101,1,0,0,0,122,1111,1,0,0,0,124,1121,
        1,0,0,0,126,1126,1,0,0,0,128,1131,1,0,0,0,130,1133,1,0,0,0,132,1135,
        1,0,0,0,134,1137,1,0,0,0,136,1139,1,0,0,0,138,1142,1,0,0,0,140,1144,
        1,0,0,0,142,1147,1,0,0,0,144,1156,1,0,0,0,146,1158,1,0,0,0,148,1172,
        1,0,0,0,150,1174,1,0,0,0,152,1179,1,0,0,0,154,1192,1,0,0,0,156,1198,
        1,0,0,0,158,1225,1,0,0,0,160,1227,1,0,0,0,162,1237,1,0,0,0,164,1242,
        1,0,0,0,166,1275,1,0,0,0,168,1277,1,0,0,0,170,1285,1,0,0,0,172,1293,
        1,0,0,0,174,1306,1,0,0,0,176,1310,1,0,0,0,178,1312,1,0,0,0,180,1319,
        1,0,0,0,182,1336,1,0,0,0,184,1348,1,0,0,0,186,1355,1,0,0,0,188,1368,
        1,0,0,0,190,1383,1,0,0,0,192,1385,1,0,0,0,194,1421,1,0,0,0,196,1452,
        1,0,0,0,198,1454,1,0,0,0,200,1462,1,0,0,0,202,1475,1,0,0,0,204,1477,
        1,0,0,0,206,1510,1,0,0,0,208,1512,1,0,0,0,210,1522,1,0,0,0,212,1524,
        1,0,0,0,214,1534,1,0,0,0,216,1536,1,0,0,0,218,1551,1,0,0,0,220,1566,
        1,0,0,0,222,1574,1,0,0,0,224,1584,1,0,0,0,226,1594,1,0,0,0,228,1604,
        1,0,0,0,230,1612,1,0,0,0,232,1622,1,0,0,0,234,1632,1,0,0,0,236,1642,
        1,0,0,0,238,1652,1,0,0,0,240,1662,1,0,0,0,242,1672,1,0,0,0,244,1682,
        1,0,0,0,246,1692,1,0,0,0,248,1700,1,0,0,0,250,1710,1,0,0,0,252,1720,
        1,0,0,0,254,1730,1,0,0,0,256,1740,1,0,0,0,258,1750,1,0,0,0,260,1760,
        1,0,0,0,262,1855,1,0,0,0,264,1857,1,0,0,0,266,1868,1,0,0,0,268,1879,
        1,0,0,0,270,1890,1,0,0,0,272,1901,1,0,0,0,274,1912,1,0,0,0,276,1923,
        1,0,0,0,278,1934,1,0,0,0,280,1945,1,0,0,0,282,1956,1,0,0,0,284,1967,
        1,0,0,0,286,1978,1,0,0,0,288,1989,1,0,0,0,290,2000,1,0,0,0,292,2011,
        1,0,0,0,294,2022,1,0,0,0,296,2033,1,0,0,0,298,2044,1,0,0,0,300,2055,
        1,0,0,0,302,2066,1,0,0,0,304,2075,1,0,0,0,306,2084,1,0,0,0,308,2093,
        1,0,0,0,310,2104,1,0,0,0,312,2115,1,0,0,0,314,2124,1,0,0,0,316,2135,
        1,0,0,0,318,2144,1,0,0,0,320,2155,1,0,0,0,322,2166,1,0,0,0,324,2177,
        1,0,0,0,326,2188,1,0,0,0,328,2199,1,0,0,0,330,2210,1,0,0,0,332,2221,
        1,0,0,0,334,2232,1,0,0,0,336,2243,1,0,0,0,338,2254,1,0,0,0,340,2265,
        1,0,0,0,342,2276,1,0,0,0,344,2287,1,0,0,0,346,2298,1,0,0,0,348,2309,
        1,0,0,0,350,2320,1,0,0,0,352,2331,1,0,0,0,354,2342,1,0,0,0,356,2353,
        1,0,0,0,358,2364,1,0,0,0,360,2375,1,0,0,0,362,2386,1,0,0,0,364,2397,
        1,0,0,0,366,2408,1,0,0,0,368,2419,1,0,0,0,370,2430,1,0,0,0,372,2439,
        1,0,0,0,374,2450,1,0,0,0,376,2461,1,0,0,0,378,2472,1,0,0,0,380,2483,
        1,0,0,0,382,2494,1,0,0,0,384,2505,1,0,0,0,386,2516,1,0,0,0,388,2525,
        1,0,0,0,390,2534,1,0,0,0,392,2543,1,0,0,0,394,2552,1,0,0,0,396,2561,
        1,0,0,0,398,2570,1,0,0,0,400,2579,1,0,0,0,402,2590,1,0,0,0,404,2601,
        1,0,0,0,406,2612,1,0,0,0,408,2623,1,0,0,0,410,2634,1,0,0,0,412,2645,
        1,0,0,0,414,2656,1,0,0,0,416,2667,1,0,0,0,418,2678,1,0,0,0,420,2689,
        1,0,0,0,422,2700,1,0,0,0,424,2723,1,0,0,0,426,2752,1,0,0,0,428,2754,
        1,0,0,0,430,2758,1,0,0,0,432,2790,1,0,0,0,434,2792,1,0,0,0,436,2814,
        1,0,0,0,438,2816,1,0,0,0,440,2822,1,0,0,0,442,2837,1,0,0,0,444,2896,
        1,0,0,0,446,2898,1,0,0,0,448,2910,1,0,0,0,450,2933,1,0,0,0,452,2937,
        1,0,0,0,454,2940,1,0,0,0,456,2949,1,0,0,0,458,2954,1,0,0,0,460,2956,
        1,0,0,0,462,2963,1,0,0,0,464,2966,1,0,0,0,466,469,5,137,0,0,467,
        469,3,26,13,0,468,466,1,0,0,0,468,467,1,0,0,0,469,472,1,0,0,0,470,
        468,1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,470,1,0,0,0,473,
        474,5,0,0,1,474,1,1,0,0,0,475,481,5,137,0,0,476,481,3,28,14,0,477,
        478,3,78,39,0,478,479,5,137,0,0,479,481,1,0,0,0,480,475,1,0,0,0,
        480,476,1,0,0,0,480,477,1,0,0,0,481,3,1,0,0,0,482,486,3,442,221,
        0,483,485,5,137,0,0,484,483,1,0,0,0,485,488,1,0,0,0,486,484,1,0,
        0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,486,1,0,0,0,489,490,5,0,
        0,1,490,5,1,0,0,0,491,492,5,119,0,0,492,498,3,70,35,0,493,495,5,
        90,0,0,494,496,3,448,224,0,495,494,1,0,0,0,495,496,1,0,0,0,496,497,
        1,0,0,0,497,499,5,91,0,0,498,493,1,0,0,0,498,499,1,0,0,0,499,500,
        1,0,0,0,500,501,5,137,0,0,501,7,1,0,0,0,502,504,3,6,3,0,503,502,
        1,0,0,0,504,505,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,9,1,
        0,0,0,507,511,3,8,4,0,508,512,3,446,223,0,509,512,3,14,7,0,510,512,
        3,12,6,0,511,508,1,0,0,0,511,509,1,0,0,0,511,510,1,0,0,0,512,11,
        1,0,0,0,513,514,5,52,0,0,514,515,3,14,7,0,515,13,1,0,0,0,516,517,
        5,58,0,0,517,518,3,428,214,0,518,521,3,16,8,0,519,520,5,120,0,0,
        520,522,3,174,87,0,521,519,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,
        0,523,524,5,93,0,0,524,525,3,96,48,0,525,15,1,0,0,0,526,528,5,90,
        0,0,527,529,3,18,9,0,528,527,1,0,0,0,528,529,1,0,0,0,529,530,1,0,
        0,0,530,531,5,91,0,0,531,17,1,0,0,0,532,535,3,20,10,0,533,534,5,
        96,0,0,534,536,3,174,87,0,535,533,1,0,0,0,535,536,1,0,0,0,536,545,
        1,0,0,0,537,538,5,92,0,0,538,541,3,20,10,0,539,540,5,96,0,0,540,
        542,3,174,87,0,541,539,1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,
        537,1,0,0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,
        581,1,0,0,0,547,545,1,0,0,0,548,579,5,92,0,0,549,551,5,89,0,0,550,
        552,3,20,10,0,551,550,1,0,0,0,551,552,1,0,0,0,552,561,1,0,0,0,553,
        554,5,92,0,0,554,557,3,20,10,0,555,556,5,96,0,0,556,558,3,174,87,
        0,557,555,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,553,1,0,0,
        0,560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,572,1,0,0,
        0,563,561,1,0,0,0,564,570,5,92,0,0,565,566,5,95,0,0,566,568,3,20,
        10,0,567,569,5,92,0,0,568,567,1,0,0,0,568,569,1,0,0,0,569,571,1,
        0,0,0,570,565,1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,564,1,
        0,0,0,572,573,1,0,0,0,573,580,1,0,0,0,574,575,5,95,0,0,575,577,3,
        20,10,0,576,578,5,92,0,0,577,576,1,0,0,0,577,578,1,0,0,0,578,580,
        1,0,0,0,579,549,1,0,0,0,579,574,1,0,0,0,579,580,1,0,0,0,580,582,
        1,0,0,0,581,548,1,0,0,0,581,582,1,0,0,0,582,614,1,0,0,0,583,585,
        5,89,0,0,584,586,3,20,10,0,585,584,1,0,0,0,585,586,1,0,0,0,586,595,
        1,0,0,0,587,588,5,92,0,0,588,591,3,20,10,0,589,590,5,96,0,0,590,
        592,3,174,87,0,591,589,1,0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,
        587,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,
        606,1,0,0,0,597,595,1,0,0,0,598,604,5,92,0,0,599,600,5,95,0,0,600,
        602,3,20,10,0,601,603,5,92,0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,
        605,1,0,0,0,604,599,1,0,0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,
        598,1,0,0,0,606,607,1,0,0,0,607,614,1,0,0,0,608,609,5,95,0,0,609,
        611,3,20,10,0,610,612,5,92,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,
        614,1,0,0,0,613,532,1,0,0,0,613,583,1,0,0,0,613,608,1,0,0,0,614,
        19,1,0,0,0,615,618,3,428,214,0,616,617,5,93,0,0,617,619,3,174,87,
        0,618,616,1,0,0,0,618,619,1,0,0,0,619,21,1,0,0,0,620,623,3,24,12,
        0,621,622,5,96,0,0,622,624,3,174,87,0,623,621,1,0,0,0,623,624,1,
        0,0,0,624,633,1,0,0,0,625,626,5,92,0,0,626,629,3,24,12,0,627,628,
        5,96,0,0,628,630,3,174,87,0,629,627,1,0,0,0,629,630,1,0,0,0,630,
        632,1,0,0,0,631,625,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,
        634,1,0,0,0,634,669,1,0,0,0,635,633,1,0,0,0,636,667,5,92,0,0,637,
        639,5,89,0,0,638,640,3,24,12,0,639,638,1,0,0,0,639,640,1,0,0,0,640,
        649,1,0,0,0,641,642,5,92,0,0,642,645,3,24,12,0,643,644,5,96,0,0,
        644,646,3,174,87,0,645,643,1,0,0,0,645,646,1,0,0,0,646,648,1,0,0,
        0,647,641,1,0,0,0,648,651,1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,
        0,650,660,1,0,0,0,651,649,1,0,0,0,652,658,5,92,0,0,653,654,5,95,
        0,0,654,656,3,24,12,0,655,657,5,92,0,0,656,655,1,0,0,0,656,657,1,
        0,0,0,657,659,1,0,0,0,658,653,1,0,0,0,658,659,1,0,0,0,659,661,1,
        0,0,0,660,652,1,0,0,0,660,661,1,0,0,0,661,668,1,0,0,0,662,663,5,
        95,0,0,663,665,3,24,12,0,664,666,5,92,0,0,665,664,1,0,0,0,665,666,
        1,0,0,0,666,668,1,0,0,0,667,637,1,0,0,0,667,662,1,0,0,0,667,668,
        1,0,0,0,668,670,1,0,0,0,669,636,1,0,0,0,669,670,1,0,0,0,670,702,
        1,0,0,0,671,673,5,89,0,0,672,674,3,24,12,0,673,672,1,0,0,0,673,674,
        1,0,0,0,674,683,1,0,0,0,675,676,5,92,0,0,676,679,3,24,12,0,677,678,
        5,96,0,0,678,680,3,174,87,0,679,677,1,0,0,0,679,680,1,0,0,0,680,
        682,1,0,0,0,681,675,1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,
        684,1,0,0,0,684,694,1,0,0,0,685,683,1,0,0,0,686,692,5,92,0,0,687,
        688,5,95,0,0,688,690,3,24,12,0,689,691,5,92,0,0,690,689,1,0,0,0,
        690,691,1,0,0,0,691,693,1,0,0,0,692,687,1,0,0,0,692,693,1,0,0,0,
        693,695,1,0,0,0,694,686,1,0,0,0,694,695,1,0,0,0,695,702,1,0,0,0,
        696,697,5,95,0,0,697,699,3,24,12,0,698,700,5,92,0,0,699,698,1,0,
        0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,620,1,0,0,0,701,671,1,0,
        0,0,701,696,1,0,0,0,702,23,1,0,0,0,703,704,3,428,214,0,704,25,1,
        0,0,0,705,708,3,28,14,0,706,708,3,78,39,0,707,705,1,0,0,0,707,706,
        1,0,0,0,708,27,1,0,0,0,709,714,3,30,15,0,710,711,5,94,0,0,711,713,
        3,30,15,0,712,710,1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,
        1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,717,719,5,94,0,0,718,717,
        1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,721,5,137,0,0,721,29,
        1,0,0,0,722,731,3,32,16,0,723,731,3,40,20,0,724,731,3,42,21,0,725,
        731,3,44,22,0,726,731,3,56,28,0,727,731,3,72,36,0,728,731,3,74,37,
        0,729,731,3,76,38,0,730,722,1,0,0,0,730,723,1,0,0,0,730,724,1,0,
        0,0,730,725,1,0,0,0,730,726,1,0,0,0,730,727,1,0,0,0,730,728,1,0,
        0,0,730,729,1,0,0,0,731,31,1,0,0,0,732,749,3,36,18,0,733,750,3,34,
        17,0,734,737,3,38,19,0,735,738,3,460,230,0,736,738,3,442,221,0,737,
        735,1,0,0,0,737,736,1,0,0,0,738,750,1,0,0,0,739,742,5,96,0,0,740,
        743,3,460,230,0,741,743,3,36,18,0,742,740,1,0,0,0,742,741,1,0,0,
        0,743,745,1,0,0,0,744,739,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,
        0,746,747,1,0,0,0,747,750,1,0,0,0,748,746,1,0,0,0,749,733,1,0,0,
        0,749,734,1,0,0,0,749,746,1,0,0,0,750,33,1,0,0,0,751,752,5,93,0,
        0,752,755,3,174,87,0,753,754,5,96,0,0,754,756,3,174,87,0,755,753,
        1,0,0,0,755,756,1,0,0,0,756,35,1,0,0,0,757,760,3,174,87,0,758,760,
        3,192,96,0,759,757,1,0,0,0,759,758,1,0,0,0,760,768,1,0,0,0,761,764,
        5,92,0,0,762,765,3,174,87,0,763,765,3,192,96,0,764,762,1,0,0,0,764,
        763,1,0,0,0,765,767,1,0,0,0,766,761,1,0,0,0,767,770,1,0,0,0,768,
        766,1,0,0,0,768,769,1,0,0,0,769,772,1,0,0,0,770,768,1,0,0,0,771,
        773,5,92,0,0,772,771,1,0,0,0,772,773,1,0,0,0,773,37,1,0,0,0,774,
        775,7,0,0,0,775,39,1,0,0,0,776,777,5,59,0,0,777,778,3,440,220,0,
        778,41,1,0,0,0,779,780,5,78,0,0,780,43,1,0,0,0,781,787,3,46,23,0,
        782,787,3,48,24,0,783,787,3,50,25,0,784,787,3,54,27,0,785,787,3,
        52,26,0,786,781,1,0,0,0,786,782,1,0,0,0,786,783,1,0,0,0,786,784,
        1,0,0,0,786,785,1,0,0,0,787,45,1,0,0,0,788,789,5,54,0,0,789,47,1,
        0,0,0,790,791,5,57,0,0,791,49,1,0,0,0,792,794,5,80,0,0,793,795,3,
        442,221,0,794,793,1,0,0,0,794,795,1,0,0,0,795,51,1,0,0,0,796,797,
        3,460,230,0,797,53,1,0,0,0,798,804,5,79,0,0,799,802,3,174,87,0,800,
        801,5,66,0,0,801,803,3,174,87,0,802,800,1,0,0,0,802,803,1,0,0,0,
        803,805,1,0,0,0,804,799,1,0,0,0,804,805,1,0,0,0,805,55,1,0,0,0,806,
        809,3,58,29,0,807,809,3,60,30,0,808,806,1,0,0,0,808,807,1,0,0,0,
        809,57,1,0,0,0,810,811,5,69,0,0,811,812,3,68,34,0,812,59,1,0,0,0,
        813,826,5,66,0,0,814,816,7,1,0,0,815,814,1,0,0,0,816,819,1,0,0,0,
        817,815,1,0,0,0,817,818,1,0,0,0,818,820,1,0,0,0,819,817,1,0,0,0,
        820,827,3,70,35,0,821,823,7,1,0,0,822,821,1,0,0,0,823,824,1,0,0,
        0,824,822,1,0,0,0,824,825,1,0,0,0,825,827,1,0,0,0,826,817,1,0,0,
        0,826,822,1,0,0,0,827,828,1,0,0,0,828,835,5,69,0,0,829,836,5,89,
        0,0,830,831,5,90,0,0,831,832,3,66,33,0,832,833,5,91,0,0,833,836,
        1,0,0,0,834,836,3,66,33,0,835,829,1,0,0,0,835,830,1,0,0,0,835,834,
        1,0,0,0,836,61,1,0,0,0,837,840,3,428,214,0,838,839,5,50,0,0,839,
        841,3,428,214,0,840,838,1,0,0,0,840,841,1,0,0,0,841,63,1,0,0,0,842,
        845,3,70,35,0,843,844,5,50,0,0,844,846,3,428,214,0,845,843,1,0,0,
        0,845,846,1,0,0,0,846,65,1,0,0,0,847,852,3,62,31,0,848,849,5,92,
        0,0,849,851,3,62,31,0,850,848,1,0,0,0,851,854,1,0,0,0,852,850,1,
        0,0,0,852,853,1,0,0,0,853,856,1,0,0,0,854,852,1,0,0,0,855,857,5,
        92,0,0,856,855,1,0,0,0,856,857,1,0,0,0,857,67,1,0,0,0,858,863,3,
        64,32,0,859,860,5,92,0,0,860,862,3,64,32,0,861,859,1,0,0,0,862,865,
        1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,69,1,0,0,0,865,863,1,
        0,0,0,866,871,3,428,214,0,867,868,5,87,0,0,868,870,3,428,214,0,869,
        867,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,
        71,1,0,0,0,873,871,1,0,0,0,874,875,5,67,0,0,875,880,3,428,214,0,
        876,877,5,92,0,0,877,879,3,428,214,0,878,876,1,0,0,0,879,882,1,0,
        0,0,880,878,1,0,0,0,880,881,1,0,0,0,881,73,1,0,0,0,882,880,1,0,0,
        0,883,884,5,75,0,0,884,889,3,428,214,0,885,886,5,92,0,0,886,888,
        3,428,214,0,887,885,1,0,0,0,888,891,1,0,0,0,889,887,1,0,0,0,889,
        890,1,0,0,0,890,75,1,0,0,0,891,889,1,0,0,0,892,893,5,51,0,0,893,
        896,3,174,87,0,894,895,5,92,0,0,895,897,3,174,87,0,896,894,1,0,0,
        0,896,897,1,0,0,0,897,77,1,0,0,0,898,909,3,82,41,0,899,909,3,84,
        42,0,900,909,3,86,43,0,901,909,3,88,44,0,902,909,3,90,45,0,903,909,
        3,14,7,0,904,909,3,446,223,0,905,909,3,10,5,0,906,909,3,80,40,0,
        907,909,3,98,49,0,908,898,1,0,0,0,908,899,1,0,0,0,908,900,1,0,0,
        0,908,901,1,0,0,0,908,902,1,0,0,0,908,903,1,0,0,0,908,904,1,0,0,
        0,908,905,1,0,0,0,908,906,1,0,0,0,908,907,1,0,0,0,909,79,1,0,0,0,
        910,914,5,52,0,0,911,915,3,14,7,0,912,915,3,90,45,0,913,915,3,86,
        43,0,914,911,1,0,0,0,914,912,1,0,0,0,914,913,1,0,0,0,915,81,1,0,
        0,0,916,917,5,68,0,0,917,918,3,174,87,0,918,919,5,93,0,0,919,927,
        3,96,48,0,920,921,5,60,0,0,921,922,3,174,87,0,922,923,5,93,0,0,923,
        924,3,96,48,0,924,926,1,0,0,0,925,920,1,0,0,0,926,929,1,0,0,0,927,
        925,1,0,0,0,927,928,1,0,0,0,928,933,1,0,0,0,929,927,1,0,0,0,930,
        931,5,61,0,0,931,932,5,93,0,0,932,934,3,96,48,0,933,930,1,0,0,0,
        933,934,1,0,0,0,934,83,1,0,0,0,935,936,5,84,0,0,936,937,3,174,87,
        0,937,938,5,93,0,0,938,942,3,96,48,0,939,940,5,61,0,0,940,941,5,
        93,0,0,941,943,3,96,48,0,942,939,1,0,0,0,942,943,1,0,0,0,943,85,
        1,0,0,0,944,945,5,65,0,0,945,946,3,440,220,0,946,947,5,70,0,0,947,
        948,3,442,221,0,948,949,5,93,0,0,949,953,3,96,48,0,950,951,5,61,
        0,0,951,952,5,93,0,0,952,954,3,96,48,0,953,950,1,0,0,0,953,954,1,
        0,0,0,954,87,1,0,0,0,955,956,5,82,0,0,956,957,5,93,0,0,957,979,3,
        96,48,0,958,959,3,94,47,0,959,960,5,93,0,0,960,961,3,96,48,0,961,
        963,1,0,0,0,962,958,1,0,0,0,963,964,1,0,0,0,964,962,1,0,0,0,964,
        965,1,0,0,0,965,969,1,0,0,0,966,967,5,61,0,0,967,968,5,93,0,0,968,
        970,3,96,48,0,969,966,1,0,0,0,969,970,1,0,0,0,970,974,1,0,0,0,971,
        972,5,64,0,0,972,973,5,93,0,0,973,975,3,96,48,0,974,971,1,0,0,0,
        974,975,1,0,0,0,975,980,1,0,0,0,976,977,5,64,0,0,977,978,5,93,0,
        0,978,980,3,96,48,0,979,962,1,0,0,0,979,976,1,0,0,0,980,89,1,0,0,
        0,981,982,5,85,0,0,982,987,3,92,46,0,983,984,5,92,0,0,984,986,3,
        92,46,0,985,983,1,0,0,0,986,989,1,0,0,0,987,985,1,0,0,0,987,988,
        1,0,0,0,988,990,1,0,0,0,989,987,1,0,0,0,990,991,5,93,0,0,991,992,
        3,96,48,0,992,91,1,0,0,0,993,996,3,174,87,0,994,995,5,50,0,0,995,
        997,3,194,97,0,996,994,1,0,0,0,996,997,1,0,0,0,997,93,1,0,0,0,998,
        1004,5,62,0,0,999,1002,3,174,87,0,1000,1001,5,50,0,0,1001,1003,3,
        428,214,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,1005,1,0,0,0,
        1004,999,1,0,0,0,1004,1005,1,0,0,0,1005,95,1,0,0,0,1006,1017,3,28,
        14,0,1007,1008,5,137,0,0,1008,1010,5,1,0,0,1009,1011,3,26,13,0,1010,
        1009,1,0,0,0,1011,1012,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,
        0,1013,1014,1,0,0,0,1014,1015,5,2,0,0,1015,1017,1,0,0,0,1016,1006,
        1,0,0,0,1016,1007,1,0,0,0,1017,97,1,0,0,0,1018,1019,5,73,0,0,1019,
        1020,3,100,50,0,1020,1021,5,93,0,0,1021,1022,5,137,0,0,1022,1024,
        5,1,0,0,1023,1025,3,106,53,0,1024,1023,1,0,0,0,1025,1026,1,0,0,0,
        1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,1029,
        5,2,0,0,1029,99,1,0,0,0,1030,1031,3,104,52,0,1031,1033,5,92,0,0,
        1032,1034,3,102,51,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1037,
        1,0,0,0,1035,1037,3,174,87,0,1036,1030,1,0,0,0,1036,1035,1,0,0,0,
        1037,101,1,0,0,0,1038,1040,5,92,0,0,1039,1041,3,104,52,0,1040,1039,
        1,0,0,0,1041,1042,1,0,0,0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,
        1045,1,0,0,0,1044,1046,5,92,0,0,1045,1044,1,0,0,0,1045,1046,1,0,
        0,0,1046,103,1,0,0,0,1047,1048,5,89,0,0,1048,1051,3,194,97,0,1049,
        1051,3,174,87,0,1050,1047,1,0,0,0,1050,1049,1,0,0,0,1051,105,1,0,
        0,0,1052,1053,5,55,0,0,1053,1055,3,110,55,0,1054,1056,3,108,54,0,
        1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1057,1,0,0,0,1057,1058,
        5,93,0,0,1058,1059,3,96,48,0,1059,107,1,0,0,0,1060,1061,5,68,0,0,
        1061,1062,3,174,87,0,1062,109,1,0,0,0,1063,1066,3,150,75,0,1064,
        1066,3,112,56,0,1065,1063,1,0,0,0,1065,1064,1,0,0,0,1066,111,1,0,
        0,0,1067,1070,3,114,57,0,1068,1070,3,116,58,0,1069,1067,1,0,0,0,
        1069,1068,1,0,0,0,1070,113,1,0,0,0,1071,1072,3,116,58,0,1072,1073,
        5,50,0,0,1073,1074,3,136,68,0,1074,115,1,0,0,0,1075,1080,3,118,59,
        0,1076,1077,5,99,0,0,1077,1079,3,118,59,0,1078,1076,1,0,0,0,1079,
        1082,1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,117,1,0,0,
        0,1082,1080,1,0,0,0,1083,1092,3,120,60,0,1084,1092,3,134,67,0,1085,
        1092,3,138,69,0,1086,1092,3,140,70,0,1087,1092,3,146,73,0,1088,1092,
        3,148,74,0,1089,1092,3,158,79,0,1090,1092,3,166,83,0,1091,1083,1,
        0,0,0,1091,1084,1,0,0,0,1091,1085,1,0,0,0,1091,1086,1,0,0,0,1091,
        1087,1,0,0,0,1091,1088,1,0,0,0,1091,1089,1,0,0,0,1091,1090,1,0,0,
        0,1092,119,1,0,0,0,1093,1094,3,126,63,0,1094,1095,4,60,0,0,1095,
        1102,1,0,0,0,1096,1102,3,124,62,0,1097,1102,3,464,232,0,1098,1102,
        5,74,0,0,1099,1102,5,81,0,0,1100,1102,5,63,0,0,1101,1093,1,0,0,0,
        1101,1096,1,0,0,0,1101,1097,1,0,0,0,1101,1098,1,0,0,0,1101,1099,
        1,0,0,0,1101,1100,1,0,0,0,1102,121,1,0,0,0,1103,1104,3,126,63,0,
        1104,1105,4,61,1,0,1105,1112,1,0,0,0,1106,1112,3,124,62,0,1107,1112,
        3,464,232,0,1108,1112,5,74,0,0,1109,1112,5,81,0,0,1110,1112,5,63,
        0,0,1111,1103,1,0,0,0,1111,1106,1,0,0,0,1111,1107,1,0,0,0,1111,1108,
        1,0,0,0,1111,1109,1,0,0,0,1111,1110,1,0,0,0,1112,123,1,0,0,0,1113,
        1114,3,128,64,0,1114,1115,5,104,0,0,1115,1116,3,132,66,0,1116,1122,
        1,0,0,0,1117,1118,3,128,64,0,1118,1119,5,105,0,0,1119,1120,3,132,
        66,0,1120,1122,1,0,0,0,1121,1113,1,0,0,0,1121,1117,1,0,0,0,1122,
        125,1,0,0,0,1123,1127,5,135,0,0,1124,1125,5,105,0,0,1125,1127,5,
        135,0,0,1126,1123,1,0,0,0,1126,1124,1,0,0,0,1127,127,1,0,0,0,1128,
        1132,3,130,65,0,1129,1130,5,105,0,0,1130,1132,3,130,65,0,1131,1128,
        1,0,0,0,1131,1129,1,0,0,0,1132,129,1,0,0,0,1133,1134,5,135,0,0,1134,
        131,1,0,0,0,1135,1136,5,135,0,0,1136,133,1,0,0,0,1137,1138,3,136,
        68,0,1138,135,1,0,0,0,1139,1140,3,428,214,0,1140,1141,4,68,2,0,1141,
        137,1,0,0,0,1142,1143,5,83,0,0,1143,139,1,0,0,0,1144,1145,3,142,
        71,0,1145,1146,4,70,3,0,1146,141,1,0,0,0,1147,1150,3,428,214,0,1148,
        1149,5,87,0,0,1149,1151,3,428,214,0,1150,1148,1,0,0,0,1151,1152,
        1,0,0,0,1152,1150,1,0,0,0,1152,1153,1,0,0,0,1153,143,1,0,0,0,1154,
        1157,3,142,71,0,1155,1157,3,428,214,0,1156,1154,1,0,0,0,1156,1155,
        1,0,0,0,1157,145,1,0,0,0,1158,1159,5,90,0,0,1159,1160,3,112,56,0,
        1160,1161,5,91,0,0,1161,147,1,0,0,0,1162,1164,5,97,0,0,1163,1165,
        3,152,76,0,1164,1163,1,0,0,0,1164,1165,1,0,0,0,1165,1166,1,0,0,0,
        1166,1173,5,98,0,0,1167,1169,5,90,0,0,1168,1170,3,150,75,0,1169,
        1168,1,0,0,0,1169,1170,1,0,0,0,1170,1171,1,0,0,0,1171,1173,5,91,
        0,0,1172,1162,1,0,0,0,1172,1167,1,0,0,0,1173,149,1,0,0,0,1174,1175,
        3,154,77,0,1175,1177,5,92,0,0,1176,1178,3,152,76,0,1177,1176,1,0,
        0,0,1177,1178,1,0,0,0,1178,151,1,0,0,0,1179,1184,3,154,77,0,1180,
        1181,5,92,0,0,1181,1183,3,154,77,0,1182,1180,1,0,0,0,1183,1186,1,
        0,0,0,1184,1182,1,0,0,0,1184,1185,1,0,0,0,1185,1188,1,0,0,0,1186,
        1184,1,0,0,0,1187,1189,5,92,0,0,1188,1187,1,0,0,0,1188,1189,1,0,
        0,0,1189,153,1,0,0,0,1190,1193,3,156,78,0,1191,1193,3,112,56,0,1192,
        1190,1,0,0,0,1192,1191,1,0,0,0,1193,155,1,0,0,0,1194,1195,5,89,0,
        0,1195,1199,3,136,68,0,1196,1197,5,89,0,0,1197,1199,3,138,69,0,1198,
        1194,1,0,0,0,1198,1196,1,0,0,0,1199,157,1,0,0,0,1200,1201,5,110,
        0,0,1201,1226,5,111,0,0,1202,1203,5,110,0,0,1203,1205,3,164,82,0,
        1204,1206,5,92,0,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1207,
        1,0,0,0,1207,1208,5,111,0,0,1208,1226,1,0,0,0,1209,1210,5,110,0,
        0,1210,1211,3,160,80,0,1211,1212,5,92,0,0,1212,1214,3,164,82,0,1213,
        1215,5,92,0,0,1214,1213,1,0,0,0,1214,1215,1,0,0,0,1215,1216,1,0,
        0,0,1216,1217,5,111,0,0,1217,1226,1,0,0,0,1218,1219,5,110,0,0,1219,
        1221,3,160,80,0,1220,1222,5,92,0,0,1221,1220,1,0,0,0,1221,1222,1,
        0,0,0,1222,1223,1,0,0,0,1223,1224,5,111,0,0,1224,1226,1,0,0,0,1225,
        1200,1,0,0,0,1225,1202,1,0,0,0,1225,1209,1,0,0,0,1225,1218,1,0,0,
        0,1226,159,1,0,0,0,1227,1232,3,162,81,0,1228,1229,5,92,0,0,1229,
        1231,3,162,81,0,1230,1228,1,0,0,0,1231,1234,1,0,0,0,1232,1230,1,
        0,0,0,1232,1233,1,0,0,0,1233,161,1,0,0,0,1234,1232,1,0,0,0,1235,
        1238,3,122,61,0,1236,1238,3,142,71,0,1237,1235,1,0,0,0,1237,1236,
        1,0,0,0,1238,1239,1,0,0,0,1239,1240,5,93,0,0,1240,1241,3,112,56,
        0,1241,163,1,0,0,0,1242,1243,5,95,0,0,1243,1244,3,136,68,0,1244,
        165,1,0,0,0,1245,1246,3,144,72,0,1246,1247,5,90,0,0,1247,1248,5,
        91,0,0,1248,1276,1,0,0,0,1249,1250,3,144,72,0,1250,1251,5,90,0,0,
        1251,1253,3,168,84,0,1252,1254,5,92,0,0,1253,1252,1,0,0,0,1253,1254,
        1,0,0,0,1254,1255,1,0,0,0,1255,1256,5,91,0,0,1256,1276,1,0,0,0,1257,
        1258,3,144,72,0,1258,1259,5,90,0,0,1259,1261,3,170,85,0,1260,1262,
        5,92,0,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,
        1264,5,91,0,0,1264,1276,1,0,0,0,1265,1266,3,144,72,0,1266,1267,5,
        90,0,0,1267,1268,3,168,84,0,1268,1269,5,92,0,0,1269,1271,3,170,85,
        0,1270,1272,5,92,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,1273,
        1,0,0,0,1273,1274,5,91,0,0,1274,1276,1,0,0,0,1275,1245,1,0,0,0,1275,
        1249,1,0,0,0,1275,1257,1,0,0,0,1275,1265,1,0,0,0,1276,167,1,0,0,
        0,1277,1282,3,112,56,0,1278,1279,5,92,0,0,1279,1281,3,112,56,0,1280,
        1278,1,0,0,0,1281,1284,1,0,0,0,1282,1280,1,0,0,0,1282,1283,1,0,0,
        0,1283,169,1,0,0,0,1284,1282,1,0,0,0,1285,1290,3,172,86,0,1286,1287,
        5,92,0,0,1287,1289,3,172,86,0,1288,1286,1,0,0,0,1289,1292,1,0,0,
        0,1290,1288,1,0,0,0,1290,1291,1,0,0,0,1291,171,1,0,0,0,1292,1290,
        1,0,0,0,1293,1294,3,428,214,0,1294,1295,5,96,0,0,1295,1296,3,112,
        56,0,1296,173,1,0,0,0,1297,1303,3,182,91,0,1298,1299,5,68,0,0,1299,
        1300,3,182,91,0,1300,1301,5,61,0,0,1301,1302,3,174,87,0,1302,1304,
        1,0,0,0,1303,1298,1,0,0,0,1303,1304,1,0,0,0,1304,1307,1,0,0,0,1305,
        1307,3,178,89,0,1306,1297,1,0,0,0,1306,1305,1,0,0,0,1307,175,1,0,
        0,0,1308,1311,3,182,91,0,1309,1311,3,180,90,0,1310,1308,1,0,0,0,
        1310,1309,1,0,0,0,1311,177,1,0,0,0,1312,1314,5,72,0,0,1313,1315,
        3,22,11,0,1314,1313,1,0,0,0,1314,1315,1,0,0,0,1315,1316,1,0,0,0,
        1316,1317,5,93,0,0,1317,1318,3,174,87,0,1318,179,1,0,0,0,1319,1321,
        5,72,0,0,1320,1322,3,22,11,0,1321,1320,1,0,0,0,1321,1322,1,0,0,0,
        1322,1323,1,0,0,0,1323,1324,5,93,0,0,1324,1325,3,176,88,0,1325,181,
        1,0,0,0,1326,1331,3,184,92,0,1327,1328,5,77,0,0,1328,1330,3,184,
        92,0,1329,1327,1,0,0,0,1330,1333,1,0,0,0,1331,1329,1,0,0,0,1331,
        1332,1,0,0,0,1332,1337,1,0,0,0,1333,1331,1,0,0,0,1334,1337,3,216,
        108,0,1335,1337,3,242,121,0,1336,1326,1,0,0,0,1336,1334,1,0,0,0,
        1336,1335,1,0,0,0,1337,183,1,0,0,0,1338,1343,3,186,93,0,1339,1340,
        5,49,0,0,1340,1342,3,186,93,0,1341,1339,1,0,0,0,1342,1345,1,0,0,
        0,1343,1341,1,0,0,0,1343,1344,1,0,0,0,1344,1349,1,0,0,0,1345,1343,
        1,0,0,0,1346,1349,3,218,109,0,1347,1349,3,244,122,0,1348,1338,1,
        0,0,0,1348,1346,1,0,0,0,1348,1347,1,0,0,0,1349,185,1,0,0,0,1350,
        1351,5,76,0,0,1351,1356,3,186,93,0,1352,1356,3,220,110,0,1353,1356,
        3,246,123,0,1354,1356,3,188,94,0,1355,1350,1,0,0,0,1355,1352,1,0,
        0,0,1355,1353,1,0,0,0,1355,1354,1,0,0,0,1356,187,1,0,0,0,1357,1363,
        3,194,97,0,1358,1359,3,190,95,0,1359,1360,3,194,97,0,1360,1362,1,
        0,0,0,1361,1358,1,0,0,0,1362,1365,1,0,0,0,1363,1361,1,0,0,0,1363,
        1364,1,0,0,0,1364,1369,1,0,0,0,1365,1363,1,0,0,0,1366,1369,3,208,
        104,0,1367,1369,3,212,106,0,1368,1357,1,0,0,0,1368,1366,1,0,0,0,
        1368,1367,1,0,0,0,1369,189,1,0,0,0,1370,1384,5,112,0,0,1371,1384,
        5,113,0,0,1372,1384,5,114,0,0,1373,1384,5,115,0,0,1374,1384,5,116,
        0,0,1375,1384,5,117,0,0,1376,1384,5,118,0,0,1377,1384,5,70,0,0,1378,
        1379,5,76,0,0,1379,1384,5,70,0,0,1380,1384,5,71,0,0,1381,1382,5,
        71,0,0,1382,1384,5,76,0,0,1383,1370,1,0,0,0,1383,1371,1,0,0,0,1383,
        1372,1,0,0,0,1383,1373,1,0,0,0,1383,1374,1,0,0,0,1383,1375,1,0,0,
        0,1383,1376,1,0,0,0,1383,1377,1,0,0,0,1383,1378,1,0,0,0,1383,1380,
        1,0,0,0,1383,1381,1,0,0,0,1384,191,1,0,0,0,1385,1386,5,89,0,0,1386,
        1387,3,194,97,0,1387,193,1,0,0,0,1388,1389,6,97,-1,0,1389,1422,3,
        424,212,0,1390,1422,3,222,111,0,1391,1393,7,2,0,0,1392,1391,1,0,
        0,0,1393,1394,1,0,0,0,1394,1392,1,0,0,0,1394,1395,1,0,0,0,1395,1396,
        1,0,0,0,1396,1422,3,194,97,17,1397,1422,3,228,114,0,1398,1402,3,
        230,115,0,1399,1402,3,232,116,0,1400,1402,3,234,117,0,1401,1398,
        1,0,0,0,1401,1399,1,0,0,0,1401,1400,1,0,0,0,1402,1422,1,0,0,0,1403,
        1407,3,248,124,0,1404,1407,3,250,125,0,1405,1407,3,252,126,0,1406,
        1403,1,0,0,0,1406,1404,1,0,0,0,1406,1405,1,0,0,0,1407,1422,1,0,0,
        0,1408,1411,3,224,112,0,1409,1411,3,226,113,0,1410,1408,1,0,0,0,
        1410,1409,1,0,0,0,1411,1422,1,0,0,0,1412,1415,3,254,127,0,1413,1415,
        3,256,128,0,1414,1412,1,0,0,0,1414,1413,1,0,0,0,1415,1422,1,0,0,
        0,1416,1422,3,236,118,0,1417,1422,3,238,119,0,1418,1422,3,258,129,
        0,1419,1422,3,240,120,0,1420,1422,3,260,130,0,1421,1388,1,0,0,0,
        1421,1390,1,0,0,0,1421,1392,1,0,0,0,1421,1397,1,0,0,0,1421,1401,
        1,0,0,0,1421,1406,1,0,0,0,1421,1410,1,0,0,0,1421,1414,1,0,0,0,1421,
        1416,1,0,0,0,1421,1417,1,0,0,0,1421,1418,1,0,0,0,1421,1419,1,0,0,
        0,1421,1420,1,0,0,0,1422,1446,1,0,0,0,1423,1424,10,19,0,0,1424,1425,
        5,95,0,0,1425,1445,3,194,97,20,1426,1427,10,15,0,0,1427,1428,7,3,
        0,0,1428,1445,3,194,97,16,1429,1430,10,12,0,0,1430,1431,7,4,0,0,
        1431,1445,3,194,97,13,1432,1433,10,9,0,0,1433,1434,7,5,0,0,1434,
        1445,3,194,97,10,1435,1436,10,8,0,0,1436,1437,5,101,0,0,1437,1445,
        3,194,97,9,1438,1439,10,6,0,0,1439,1440,5,100,0,0,1440,1445,3,194,
        97,7,1441,1442,10,3,0,0,1442,1443,5,99,0,0,1443,1445,3,194,97,4,
        1444,1423,1,0,0,0,1444,1426,1,0,0,0,1444,1429,1,0,0,0,1444,1432,
        1,0,0,0,1444,1435,1,0,0,0,1444,1438,1,0,0,0,1444,1441,1,0,0,0,1445,
        1448,1,0,0,0,1446,1444,1,0,0,0,1446,1447,1,0,0,0,1447,195,1,0,0,
        0,1448,1446,1,0,0,0,1449,1453,3,198,99,0,1450,1453,3,200,100,0,1451,
        1453,3,204,102,0,1452,1449,1,0,0,0,1452,1450,1,0,0,0,1452,1451,1,
        0,0,0,1453,197,1,0,0,0,1454,1455,5,3,0,0,1455,1456,5,90,0,0,1456,
        1458,3,174,87,0,1457,1459,5,92,0,0,1458,1457,1,0,0,0,1458,1459,1,
        0,0,0,1459,1460,1,0,0,0,1460,1461,5,91,0,0,1461,199,1,0,0,0,1462,
        1463,5,4,0,0,1463,1467,5,90,0,0,1464,1465,3,202,101,0,1465,1466,
        5,92,0,0,1466,1468,1,0,0,0,1467,1464,1,0,0,0,1467,1468,1,0,0,0,1468,
        1469,1,0,0,0,1469,1471,3,174,87,0,1470,1472,5,92,0,0,1471,1470,1,
        0,0,0,1471,1472,1,0,0,0,1472,1473,1,0,0,0,1473,1474,5,91,0,0,1474,
        201,1,0,0,0,1475,1476,7,6,0,0,1476,203,1,0,0,0,1477,1478,7,7,0,0,
        1478,1479,5,90,0,0,1479,1481,3,174,87,0,1480,1482,5,92,0,0,1481,
        1480,1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,0,0,1483,1484,5,91,
        0,0,1484,205,1,0,0,0,1485,1511,3,208,104,0,1486,1511,3,212,106,0,
        1487,1511,3,216,108,0,1488,1511,3,218,109,0,1489,1511,3,220,110,
        0,1490,1511,3,222,111,0,1491,1511,3,224,112,0,1492,1511,3,226,113,
        0,1493,1511,3,228,114,0,1494,1511,3,230,115,0,1495,1511,3,232,116,
        0,1496,1511,3,234,117,0,1497,1511,3,236,118,0,1498,1511,3,238,119,
        0,1499,1511,3,240,120,0,1500,1511,3,242,121,0,1501,1511,3,244,122,
        0,1502,1511,3,246,123,0,1503,1511,3,248,124,0,1504,1511,3,250,125,
        0,1505,1511,3,252,126,0,1506,1511,3,254,127,0,1507,1511,3,256,128,
        0,1508,1511,3,258,129,0,1509,1511,3,260,130,0,1510,1485,1,0,0,0,
        1510,1486,1,0,0,0,1510,1487,1,0,0,0,1510,1488,1,0,0,0,1510,1489,
        1,0,0,0,1510,1490,1,0,0,0,1510,1491,1,0,0,0,1510,1492,1,0,0,0,1510,
        1493,1,0,0,0,1510,1494,1,0,0,0,1510,1495,1,0,0,0,1510,1496,1,0,0,
        0,1510,1497,1,0,0,0,1510,1498,1,0,0,0,1510,1499,1,0,0,0,1510,1500,
        1,0,0,0,1510,1501,1,0,0,0,1510,1502,1,0,0,0,1510,1503,1,0,0,0,1510,
        1504,1,0,0,0,1510,1505,1,0,0,0,1510,1506,1,0,0,0,1510,1507,1,0,0,
        0,1510,1508,1,0,0,0,1510,1509,1,0,0,0,1511,207,1,0,0,0,1512,1513,
        3,210,105,0,1513,1514,5,90,0,0,1514,1515,3,174,87,0,1515,1516,5,
        92,0,0,1516,1518,3,174,87,0,1517,1519,5,92,0,0,1518,1517,1,0,0,0,
        1518,1519,1,0,0,0,1519,1520,1,0,0,0,1520,1521,5,91,0,0,1521,209,
        1,0,0,0,1522,1523,7,8,0,0,1523,211,1,0,0,0,1524,1525,3,214,107,0,
        1525,1526,5,90,0,0,1526,1527,3,174,87,0,1527,1528,5,92,0,0,1528,
        1530,3,174,87,0,1529,1531,5,92,0,0,1530,1529,1,0,0,0,1530,1531,1,
        0,0,0,1531,1532,1,0,0,0,1532,1533,5,91,0,0,1533,213,1,0,0,0,1534,
        1535,7,9,0,0,1535,215,1,0,0,0,1536,1537,5,23,0,0,1537,1538,5,90,
        0,0,1538,1543,3,174,87,0,1539,1540,5,92,0,0,1540,1542,3,174,87,0,
        1541,1539,1,0,0,0,1542,1545,1,0,0,0,1543,1541,1,0,0,0,1543,1544,
        1,0,0,0,1544,1547,1,0,0,0,1545,1543,1,0,0,0,1546,1548,5,92,0,0,1547,
        1546,1,0,0,0,1547,1548,1,0,0,0,1548,1549,1,0,0,0,1549,1550,5,91,
        0,0,1550,217,1,0,0,0,1551,1552,5,22,0,0,1552,1553,5,90,0,0,1553,
        1558,3,174,87,0,1554,1555,5,92,0,0,1555,1557,3,174,87,0,1556,1554,
        1,0,0,0,1557,1560,1,0,0,0,1558,1556,1,0,0,0,1558,1559,1,0,0,0,1559,
        1562,1,0,0,0,1560,1558,1,0,0,0,1561,1563,5,92,0,0,1562,1561,1,0,
        0,0,1562,1563,1,0,0,0,1563,1564,1,0,0,0,1564,1565,5,91,0,0,1565,
        219,1,0,0,0,1566,1567,5,24,0,0,1567,1568,5,90,0,0,1568,1570,3,174,
        87,0,1569,1571,5,92,0,0,1570,1569,1,0,0,0,1570,1571,1,0,0,0,1571,
        1572,1,0,0,0,1572,1573,5,91,0,0,1573,221,1,0,0,0,1574,1575,5,19,
        0,0,1575,1576,5,90,0,0,1576,1578,3,174,87,0,1577,1579,5,92,0,0,1578,
        1577,1,0,0,0,1578,1579,1,0,0,0,1579,1580,1,0,0,0,1580,1581,5,92,
        0,0,1581,1582,3,174,87,0,1582,1583,5,91,0,0,1583,223,1,0,0,0,1584,
        1585,5,14,0,0,1585,1586,5,90,0,0,1586,1588,3,174,87,0,1587,1589,
        5,92,0,0,1588,1587,1,0,0,0,1588,1589,1,0,0,0,1589,1590,1,0,0,0,1590,
        1591,5,92,0,0,1591,1592,3,174,87,0,1592,1593,5,91,0,0,1593,225,1,
        0,0,0,1594,1595,5,15,0,0,1595,1596,5,90,0,0,1596,1598,3,174,87,0,
        1597,1599,5,92,0,0,1598,1597,1,0,0,0,1598,1599,1,0,0,0,1599,1600,
        1,0,0,0,1600,1601,5,92,0,0,1601,1602,3,174,87,0,1602,1603,5,91,0,
        0,1603,227,1,0,0,0,1604,1605,5,28,0,0,1605,1606,5,90,0,0,1606,1608,
        3,174,87,0,1607,1609,5,92,0,0,1608,1607,1,0,0,0,1608,1609,1,0,0,
        0,1609,1610,1,0,0,0,1610,1611,5,91,0,0,1611,229,1,0,0,0,1612,1613,
        5,16,0,0,1613,1614,5,90,0,0,1614,1615,3,174,87,0,1615,1616,5,92,
        0,0,1616,1618,3,174,87,0,1617,1619,5,92,0,0,1618,1617,1,0,0,0,1618,
        1619,1,0,0,0,1619,1620,1,0,0,0,1620,1621,5,91,0,0,1621,231,1,0,0,
        0,1622,1623,5,17,0,0,1623,1624,5,90,0,0,1624,1625,3,174,87,0,1625,
        1626,5,92,0,0,1626,1628,3,174,87,0,1627,1629,5,92,0,0,1628,1627,
        1,0,0,0,1628,1629,1,0,0,0,1629,1630,1,0,0,0,1630,1631,5,91,0,0,1631,
        233,1,0,0,0,1632,1633,5,18,0,0,1633,1634,5,90,0,0,1634,1635,3,174,
        87,0,1635,1636,5,92,0,0,1636,1638,3,174,87,0,1637,1639,5,92,0,0,
        1638,1637,1,0,0,0,1638,1639,1,0,0,0,1639,1640,1,0,0,0,1640,1641,
        5,91,0,0,1641,235,1,0,0,0,1642,1643,5,25,0,0,1643,1644,5,90,0,0,
        1644,1645,3,174,87,0,1645,1646,5,92,0,0,1646,1648,3,174,87,0,1647,
        1649,5,92,0,0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,1650,1,0,
        0,0,1650,1651,5,91,0,0,1651,237,1,0,0,0,1652,1653,5,27,0,0,1653,
        1654,5,90,0,0,1654,1655,3,174,87,0,1655,1656,5,92,0,0,1656,1658,
        3,174,87,0,1657,1659,5,92,0,0,1658,1657,1,0,0,0,1658,1659,1,0,0,
        0,1659,1660,1,0,0,0,1660,1661,5,91,0,0,1661,239,1,0,0,0,1662,1663,
        5,26,0,0,1663,1664,5,90,0,0,1664,1665,3,174,87,0,1665,1666,5,92,
        0,0,1666,1668,3,174,87,0,1667,1669,5,92,0,0,1668,1667,1,0,0,0,1668,
        1669,1,0,0,0,1669,1670,1,0,0,0,1670,1671,5,91,0,0,1671,241,1,0,0,
        0,1672,1673,5,41,0,0,1673,1674,5,90,0,0,1674,1675,3,174,87,0,1675,
        1676,5,92,0,0,1676,1678,3,174,87,0,1677,1679,5,92,0,0,1678,1677,
        1,0,0,0,1678,1679,1,0,0,0,1679,1680,1,0,0,0,1680,1681,5,91,0,0,1681,
        243,1,0,0,0,1682,1683,5,40,0,0,1683,1684,5,90,0,0,1684,1685,3,174,
        87,0,1685,1686,5,92,0,0,1686,1688,3,174,87,0,1687,1689,5,92,0,0,
        1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,1690,1,0,0,0,1690,1691,
        5,91,0,0,1691,245,1,0,0,0,1692,1693,5,42,0,0,1693,1694,5,90,0,0,
        1694,1696,3,174,87,0,1695,1697,5,92,0,0,1696,1695,1,0,0,0,1696,1697,
        1,0,0,0,1697,1698,1,0,0,0,1698,1699,5,91,0,0,1699,247,1,0,0,0,1700,
        1701,5,35,0,0,1701,1702,5,90,0,0,1702,1703,3,174,87,0,1703,1704,
        5,92,0,0,1704,1706,3,174,87,0,1705,1707,5,92,0,0,1706,1705,1,0,0,
        0,1706,1707,1,0,0,0,1707,1708,1,0,0,0,1708,1709,5,91,0,0,1709,249,
        1,0,0,0,1710,1711,5,36,0,0,1711,1712,5,90,0,0,1712,1713,3,174,87,
        0,1713,1714,5,92,0,0,1714,1716,3,174,87,0,1715,1717,5,92,0,0,1716,
        1715,1,0,0,0,1716,1717,1,0,0,0,1717,1718,1,0,0,0,1718,1719,5,91,
        0,0,1719,251,1,0,0,0,1720,1721,5,37,0,0,1721,1722,5,90,0,0,1722,
        1723,3,174,87,0,1723,1724,5,92,0,0,1724,1726,3,174,87,0,1725,1727,
        5,92,0,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,
        1729,5,91,0,0,1729,253,1,0,0,0,1730,1731,5,33,0,0,1731,1732,5,90,
        0,0,1732,1733,3,174,87,0,1733,1734,5,92,0,0,1734,1736,3,174,87,0,
        1735,1737,5,92,0,0,1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,1738,
        1,0,0,0,1738,1739,5,91,0,0,1739,255,1,0,0,0,1740,1741,5,34,0,0,1741,
        1742,5,90,0,0,1742,1743,3,174,87,0,1743,1744,5,92,0,0,1744,1746,
        3,174,87,0,1745,1747,5,92,0,0,1746,1745,1,0,0,0,1746,1747,1,0,0,
        0,1747,1748,1,0,0,0,1748,1749,5,91,0,0,1749,257,1,0,0,0,1750,1751,
        5,43,0,0,1751,1752,5,90,0,0,1752,1753,3,174,87,0,1753,1754,5,92,
        0,0,1754,1756,3,174,87,0,1755,1757,5,92,0,0,1756,1755,1,0,0,0,1756,
        1757,1,0,0,0,1757,1758,1,0,0,0,1758,1759,5,91,0,0,1759,259,1,0,0,
        0,1760,1761,5,44,0,0,1761,1762,5,90,0,0,1762,1764,3,174,87,0,1763,
        1765,5,92,0,0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,1766,1,0,
        0,0,1766,1767,5,91,0,0,1767,261,1,0,0,0,1768,1856,3,264,132,0,1769,
        1856,3,266,133,0,1770,1856,3,268,134,0,1771,1856,3,270,135,0,1772,
        1856,3,272,136,0,1773,1856,3,274,137,0,1774,1856,3,276,138,0,1775,
        1856,3,278,139,0,1776,1856,3,280,140,0,1777,1856,3,282,141,0,1778,
        1856,3,284,142,0,1779,1856,3,286,143,0,1780,1856,3,288,144,0,1781,
        1856,3,290,145,0,1782,1856,3,292,146,0,1783,1856,3,294,147,0,1784,
        1856,3,296,148,0,1785,1856,3,298,149,0,1786,1856,3,300,150,0,1787,
        1856,3,302,151,0,1788,1856,3,304,152,0,1789,1856,3,306,153,0,1790,
        1856,3,308,154,0,1791,1856,3,310,155,0,1792,1856,3,312,156,0,1793,
        1856,3,314,157,0,1794,1856,3,316,158,0,1795,1856,3,318,159,0,1796,
        1856,3,320,160,0,1797,1856,3,322,161,0,1798,1856,3,324,162,0,1799,
        1856,3,326,163,0,1800,1856,3,328,164,0,1801,1856,3,330,165,0,1802,
        1856,3,332,166,0,1803,1856,3,334,167,0,1804,1856,3,336,168,0,1805,
        1856,3,338,169,0,1806,1856,3,340,170,0,1807,1856,3,342,171,0,1808,
        1856,3,344,172,0,1809,1856,3,346,173,0,1810,1856,3,348,174,0,1811,
        1856,3,350,175,0,1812,1856,3,352,176,0,1813,1856,3,354,177,0,1814,
        1856,3,356,178,0,1815,1856,3,358,179,0,1816,1856,3,360,180,0,1817,
        1856,3,362,181,0,1818,1856,3,364,182,0,1819,1856,3,366,183,0,1820,
        1856,3,368,184,0,1821,1856,3,370,185,0,1822,1856,3,372,186,0,1823,
        1856,3,374,187,0,1824,1856,3,376,188,0,1825,1856,3,378,189,0,1826,
        1856,3,380,190,0,1827,1856,3,382,191,0,1828,1856,3,384,192,0,1829,
        1856,3,386,193,0,1830,1856,3,388,194,0,1831,1856,3,390,195,0,1832,
        1856,3,392,196,0,1833,1856,3,394,197,0,1834,1856,3,396,198,0,1835,
        1856,3,398,199,0,1836,1856,3,400,200,0,1837,1856,3,402,201,0,1838,
        1856,3,404,202,0,1839,1856,3,406,203,0,1840,1856,3,408,204,0,1841,
        1856,3,410,205,0,1842,1856,3,412,206,0,1843,1856,3,414,207,0,1844,
        1856,3,416,208,0,1845,1856,3,418,209,0,1846,1856,3,420,210,0,1847,
        1856,3,422,211,0,1848,1852,5,45,0,0,1849,1851,3,432,216,0,1850,1849,
        1,0,0,0,1851,1854,1,0,0,0,1852,1850,1,0,0,0,1852,1853,1,0,0,0,1853,
        1856,1,0,0,0,1854,1852,1,0,0,0,1855,1768,1,0,0,0,1855,1769,1,0,0,
        0,1855,1770,1,0,0,0,1855,1771,1,0,0,0,1855,1772,1,0,0,0,1855,1773,
        1,0,0,0,1855,1774,1,0,0,0,1855,1775,1,0,0,0,1855,1776,1,0,0,0,1855,
        1777,1,0,0,0,1855,1778,1,0,0,0,1855,1779,1,0,0,0,1855,1780,1,0,0,
        0,1855,1781,1,0,0,0,1855,1782,1,0,0,0,1855,1783,1,0,0,0,1855,1784,
        1,0,0,0,1855,1785,1,0,0,0,1855,1786,1,0,0,0,1855,1787,1,0,0,0,1855,
        1788,1,0,0,0,1855,1789,1,0,0,0,1855,1790,1,0,0,0,1855,1791,1,0,0,
        0,1855,1792,1,0,0,0,1855,1793,1,0,0,0,1855,1794,1,0,0,0,1855,1795,
        1,0,0,0,1855,1796,1,0,0,0,1855,1797,1,0,0,0,1855,1798,1,0,0,0,1855,
        1799,1,0,0,0,1855,1800,1,0,0,0,1855,1801,1,0,0,0,1855,1802,1,0,0,
        0,1855,1803,1,0,0,0,1855,1804,1,0,0,0,1855,1805,1,0,0,0,1855,1806,
        1,0,0,0,1855,1807,1,0,0,0,1855,1808,1,0,0,0,1855,1809,1,0,0,0,1855,
        1810,1,0,0,0,1855,1811,1,0,0,0,1855,1812,1,0,0,0,1855,1813,1,0,0,
        0,1855,1814,1,0,0,0,1855,1815,1,0,0,0,1855,1816,1,0,0,0,1855,1817,
        1,0,0,0,1855,1818,1,0,0,0,1855,1819,1,0,0,0,1855,1820,1,0,0,0,1855,
        1821,1,0,0,0,1855,1822,1,0,0,0,1855,1823,1,0,0,0,1855,1824,1,0,0,
        0,1855,1825,1,0,0,0,1855,1826,1,0,0,0,1855,1827,1,0,0,0,1855,1828,
        1,0,0,0,1855,1829,1,0,0,0,1855,1830,1,0,0,0,1855,1831,1,0,0,0,1855,
        1832,1,0,0,0,1855,1833,1,0,0,0,1855,1834,1,0,0,0,1855,1835,1,0,0,
        0,1855,1836,1,0,0,0,1855,1837,1,0,0,0,1855,1838,1,0,0,0,1855,1839,
        1,0,0,0,1855,1840,1,0,0,0,1855,1841,1,0,0,0,1855,1842,1,0,0,0,1855,
        1843,1,0,0,0,1855,1844,1,0,0,0,1855,1845,1,0,0,0,1855,1846,1,0,0,
        0,1855,1847,1,0,0,0,1855,1848,1,0,0,0,1856,263,1,0,0,0,1857,1858,
        5,45,0,0,1858,1859,5,149,0,0,1859,1860,5,150,0,0,1860,1861,5,90,
        0,0,1861,1865,5,91,0,0,1862,1864,3,432,216,0,1863,1862,1,0,0,0,1864,
        1867,1,0,0,0,1865,1863,1,0,0,0,1865,1866,1,0,0,0,1866,265,1,0,0,
        0,1867,1865,1,0,0,0,1868,1869,5,45,0,0,1869,1870,5,149,0,0,1870,
        1871,5,151,0,0,1871,1872,5,90,0,0,1872,1876,5,91,0,0,1873,1875,3,
        432,216,0,1874,1873,1,0,0,0,1875,1878,1,0,0,0,1876,1874,1,0,0,0,
        1876,1877,1,0,0,0,1877,267,1,0,0,0,1878,1876,1,0,0,0,1879,1880,5,
        45,0,0,1880,1881,5,149,0,0,1881,1882,5,152,0,0,1882,1883,5,90,0,
        0,1883,1887,5,91,0,0,1884,1886,3,432,216,0,1885,1884,1,0,0,0,1886,
        1889,1,0,0,0,1887,1885,1,0,0,0,1887,1888,1,0,0,0,1888,269,1,0,0,
        0,1889,1887,1,0,0,0,1890,1891,5,45,0,0,1891,1892,5,149,0,0,1892,
        1893,5,153,0,0,1893,1894,5,90,0,0,1894,1898,5,91,0,0,1895,1897,3,
        432,216,0,1896,1895,1,0,0,0,1897,1900,1,0,0,0,1898,1896,1,0,0,0,
        1898,1899,1,0,0,0,1899,271,1,0,0,0,1900,1898,1,0,0,0,1901,1902,5,
        45,0,0,1902,1903,5,149,0,0,1903,1904,5,154,0,0,1904,1905,5,90,0,
        0,1905,1909,5,91,0,0,1906,1908,3,432,216,0,1907,1906,1,0,0,0,1908,
        1911,1,0,0,0,1909,1907,1,0,0,0,1909,1910,1,0,0,0,1910,273,1,0,0,
        0,1911,1909,1,0,0,0,1912,1913,5,45,0,0,1913,1914,5,149,0,0,1914,
        1915,5,155,0,0,1915,1916,5,90,0,0,1916,1920,5,91,0,0,1917,1919,3,
        432,216,0,1918,1917,1,0,0,0,1919,1922,1,0,0,0,1920,1918,1,0,0,0,
        1920,1921,1,0,0,0,1921,275,1,0,0,0,1922,1920,1,0,0,0,1923,1924,5,
        45,0,0,1924,1925,5,149,0,0,1925,1926,5,156,0,0,1926,1927,5,90,0,
        0,1927,1931,5,91,0,0,1928,1930,3,432,216,0,1929,1928,1,0,0,0,1930,
        1933,1,0,0,0,1931,1929,1,0,0,0,1931,1932,1,0,0,0,1932,277,1,0,0,
        0,1933,1931,1,0,0,0,1934,1935,5,45,0,0,1935,1936,5,149,0,0,1936,
        1937,5,157,0,0,1937,1938,5,90,0,0,1938,1942,5,91,0,0,1939,1941,3,
        432,216,0,1940,1939,1,0,0,0,1941,1944,1,0,0,0,1942,1940,1,0,0,0,
        1942,1943,1,0,0,0,1943,279,1,0,0,0,1944,1942,1,0,0,0,1945,1946,5,
        45,0,0,1946,1947,5,149,0,0,1947,1948,5,158,0,0,1948,1949,5,90,0,
        0,1949,1953,5,91,0,0,1950,1952,3,432,216,0,1951,1950,1,0,0,0,1952,
        1955,1,0,0,0,1953,1951,1,0,0,0,1953,1954,1,0,0,0,1954,281,1,0,0,
        0,1955,1953,1,0,0,0,1956,1957,5,45,0,0,1957,1958,5,149,0,0,1958,
        1959,5,159,0,0,1959,1960,5,90,0,0,1960,1964,5,91,0,0,1961,1963,3,
        432,216,0,1962,1961,1,0,0,0,1963,1966,1,0,0,0,1964,1962,1,0,0,0,
        1964,1965,1,0,0,0,1965,283,1,0,0,0,1966,1964,1,0,0,0,1967,1968,5,
        45,0,0,1968,1969,5,149,0,0,1969,1970,5,160,0,0,1970,1971,5,90,0,
        0,1971,1975,5,91,0,0,1972,1974,3,432,216,0,1973,1972,1,0,0,0,1974,
        1977,1,0,0,0,1975,1973,1,0,0,0,1975,1976,1,0,0,0,1976,285,1,0,0,
        0,1977,1975,1,0,0,0,1978,1979,5,45,0,0,1979,1980,5,149,0,0,1980,
        1981,5,161,0,0,1981,1982,5,90,0,0,1982,1986,5,91,0,0,1983,1985,3,
        432,216,0,1984,1983,1,0,0,0,1985,1988,1,0,0,0,1986,1984,1,0,0,0,
        1986,1987,1,0,0,0,1987,287,1,0,0,0,1988,1986,1,0,0,0,1989,1990,5,
        45,0,0,1990,1991,5,149,0,0,1991,1992,5,162,0,0,1992,1993,5,90,0,
        0,1993,1997,5,91,0,0,1994,1996,3,432,216,0,1995,1994,1,0,0,0,1996,
        1999,1,0,0,0,1997,1995,1,0,0,0,1997,1998,1,0,0,0,1998,289,1,0,0,
        0,1999,1997,1,0,0,0,2000,2001,5,45,0,0,2001,2002,5,149,0,0,2002,
        2003,5,163,0,0,2003,2004,5,90,0,0,2004,2008,5,91,0,0,2005,2007,3,
        432,216,0,2006,2005,1,0,0,0,2007,2010,1,0,0,0,2008,2006,1,0,0,0,
        2008,2009,1,0,0,0,2009,291,1,0,0,0,2010,2008,1,0,0,0,2011,2012,5,
        45,0,0,2012,2013,5,149,0,0,2013,2014,5,164,0,0,2014,2015,5,90,0,
        0,2015,2019,5,91,0,0,2016,2018,3,432,216,0,2017,2016,1,0,0,0,2018,
        2021,1,0,0,0,2019,2017,1,0,0,0,2019,2020,1,0,0,0,2020,293,1,0,0,
        0,2021,2019,1,0,0,0,2022,2023,5,45,0,0,2023,2024,5,149,0,0,2024,
        2025,5,165,0,0,2025,2026,5,90,0,0,2026,2030,5,91,0,0,2027,2029,3,
        432,216,0,2028,2027,1,0,0,0,2029,2032,1,0,0,0,2030,2028,1,0,0,0,
        2030,2031,1,0,0,0,2031,295,1,0,0,0,2032,2030,1,0,0,0,2033,2034,5,
        45,0,0,2034,2035,5,149,0,0,2035,2036,5,166,0,0,2036,2037,5,90,0,
        0,2037,2041,5,91,0,0,2038,2040,3,432,216,0,2039,2038,1,0,0,0,2040,
        2043,1,0,0,0,2041,2039,1,0,0,0,2041,2042,1,0,0,0,2042,297,1,0,0,
        0,2043,2041,1,0,0,0,2044,2045,5,45,0,0,2045,2046,5,149,0,0,2046,
        2047,5,167,0,0,2047,2048,5,90,0,0,2048,2052,5,91,0,0,2049,2051,3,
        432,216,0,2050,2049,1,0,0,0,2051,2054,1,0,0,0,2052,2050,1,0,0,0,
        2052,2053,1,0,0,0,2053,299,1,0,0,0,2054,2052,1,0,0,0,2055,2056,5,
        45,0,0,2056,2057,5,149,0,0,2057,2058,5,168,0,0,2058,2059,5,90,0,
        0,2059,2063,5,91,0,0,2060,2062,3,432,216,0,2061,2060,1,0,0,0,2062,
        2065,1,0,0,0,2063,2061,1,0,0,0,2063,2064,1,0,0,0,2064,301,1,0,0,
        0,2065,2063,1,0,0,0,2066,2067,5,45,0,0,2067,2068,5,149,0,0,2068,
        2072,5,169,0,0,2069,2071,3,432,216,0,2070,2069,1,0,0,0,2071,2074,
        1,0,0,0,2072,2070,1,0,0,0,2072,2073,1,0,0,0,2073,303,1,0,0,0,2074,
        2072,1,0,0,0,2075,2076,5,45,0,0,2076,2077,5,149,0,0,2077,2081,5,
        170,0,0,2078,2080,3,432,216,0,2079,2078,1,0,0,0,2080,2083,1,0,0,
        0,2081,2079,1,0,0,0,2081,2082,1,0,0,0,2082,305,1,0,0,0,2083,2081,
        1,0,0,0,2084,2085,5,45,0,0,2085,2086,5,149,0,0,2086,2090,5,171,0,
        0,2087,2089,3,432,216,0,2088,2087,1,0,0,0,2089,2092,1,0,0,0,2090,
        2088,1,0,0,0,2090,2091,1,0,0,0,2091,307,1,0,0,0,2092,2090,1,0,0,
        0,2093,2094,5,45,0,0,2094,2095,5,149,0,0,2095,2096,5,172,0,0,2096,
        2097,5,90,0,0,2097,2101,5,91,0,0,2098,2100,3,432,216,0,2099,2098,
        1,0,0,0,2100,2103,1,0,0,0,2101,2099,1,0,0,0,2101,2102,1,0,0,0,2102,
        309,1,0,0,0,2103,2101,1,0,0,0,2104,2105,5,45,0,0,2105,2106,5,149,
        0,0,2106,2107,5,173,0,0,2107,2108,5,90,0,0,2108,2112,5,91,0,0,2109,
        2111,3,432,216,0,2110,2109,1,0,0,0,2111,2114,1,0,0,0,2112,2110,1,
        0,0,0,2112,2113,1,0,0,0,2113,311,1,0,0,0,2114,2112,1,0,0,0,2115,
        2116,5,45,0,0,2116,2117,5,149,0,0,2117,2121,5,174,0,0,2118,2120,
        3,432,216,0,2119,2118,1,0,0,0,2120,2123,1,0,0,0,2121,2119,1,0,0,
        0,2121,2122,1,0,0,0,2122,313,1,0,0,0,2123,2121,1,0,0,0,2124,2125,
        5,45,0,0,2125,2126,5,149,0,0,2126,2127,5,175,0,0,2127,2128,5,90,
        0,0,2128,2132,5,91,0,0,2129,2131,3,432,216,0,2130,2129,1,0,0,0,2131,
        2134,1,0,0,0,2132,2130,1,0,0,0,2132,2133,1,0,0,0,2133,315,1,0,0,
        0,2134,2132,1,0,0,0,2135,2136,5,45,0,0,2136,2137,5,149,0,0,2137,
        2141,5,176,0,0,2138,2140,3,432,216,0,2139,2138,1,0,0,0,2140,2143,
        1,0,0,0,2141,2139,1,0,0,0,2141,2142,1,0,0,0,2142,317,1,0,0,0,2143,
        2141,1,0,0,0,2144,2145,5,45,0,0,2145,2146,5,149,0,0,2146,2147,5,
        177,0,0,2147,2148,5,90,0,0,2148,2152,5,91,0,0,2149,2151,3,432,216,
        0,2150,2149,1,0,0,0,2151,2154,1,0,0,0,2152,2150,1,0,0,0,2152,2153,
        1,0,0,0,2153,319,1,0,0,0,2154,2152,1,0,0,0,2155,2156,5,45,0,0,2156,
        2157,5,149,0,0,2157,2158,5,178,0,0,2158,2159,5,90,0,0,2159,2163,
        5,91,0,0,2160,2162,3,432,216,0,2161,2160,1,0,0,0,2162,2165,1,0,0,
        0,2163,2161,1,0,0,0,2163,2164,1,0,0,0,2164,321,1,0,0,0,2165,2163,
        1,0,0,0,2166,2167,5,45,0,0,2167,2168,5,149,0,0,2168,2169,5,179,0,
        0,2169,2170,5,90,0,0,2170,2174,5,91,0,0,2171,2173,3,432,216,0,2172,
        2171,1,0,0,0,2173,2176,1,0,0,0,2174,2172,1,0,0,0,2174,2175,1,0,0,
        0,2175,323,1,0,0,0,2176,2174,1,0,0,0,2177,2178,5,45,0,0,2178,2179,
        5,149,0,0,2179,2180,5,180,0,0,2180,2181,5,90,0,0,2181,2185,5,91,
        0,0,2182,2184,3,432,216,0,2183,2182,1,0,0,0,2184,2187,1,0,0,0,2185,
        2183,1,0,0,0,2185,2186,1,0,0,0,2186,325,1,0,0,0,2187,2185,1,0,0,
        0,2188,2189,5,45,0,0,2189,2190,5,149,0,0,2190,2191,5,181,0,0,2191,
        2192,5,90,0,0,2192,2196,5,91,0,0,2193,2195,3,432,216,0,2194,2193,
        1,0,0,0,2195,2198,1,0,0,0,2196,2194,1,0,0,0,2196,2197,1,0,0,0,2197,
        327,1,0,0,0,2198,2196,1,0,0,0,2199,2200,5,45,0,0,2200,2201,5,149,
        0,0,2201,2202,5,182,0,0,2202,2203,5,90,0,0,2203,2207,5,91,0,0,2204,
        2206,3,432,216,0,2205,2204,1,0,0,0,2206,2209,1,0,0,0,2207,2205,1,
        0,0,0,2207,2208,1,0,0,0,2208,329,1,0,0,0,2209,2207,1,0,0,0,2210,
        2211,5,45,0,0,2211,2212,5,149,0,0,2212,2213,5,183,0,0,2213,2214,
        5,90,0,0,2214,2218,5,91,0,0,2215,2217,3,432,216,0,2216,2215,1,0,
        0,0,2217,2220,1,0,0,0,2218,2216,1,0,0,0,2218,2219,1,0,0,0,2219,331,
        1,0,0,0,2220,2218,1,0,0,0,2221,2222,5,45,0,0,2222,2223,5,149,0,0,
        2223,2224,5,184,0,0,2224,2225,5,90,0,0,2225,2229,5,91,0,0,2226,2228,
        3,432,216,0,2227,2226,1,0,0,0,2228,2231,1,0,0,0,2229,2227,1,0,0,
        0,2229,2230,1,0,0,0,2230,333,1,0,0,0,2231,2229,1,0,0,0,2232,2233,
        5,45,0,0,2233,2234,5,149,0,0,2234,2235,5,185,0,0,2235,2236,5,90,
        0,0,2236,2240,5,91,0,0,2237,2239,3,432,216,0,2238,2237,1,0,0,0,2239,
        2242,1,0,0,0,2240,2238,1,0,0,0,2240,2241,1,0,0,0,2241,335,1,0,0,
        0,2242,2240,1,0,0,0,2243,2244,5,45,0,0,2244,2245,5,149,0,0,2245,
        2246,5,186,0,0,2246,2247,5,90,0,0,2247,2251,5,91,0,0,2248,2250,3,
        432,216,0,2249,2248,1,0,0,0,2250,2253,1,0,0,0,2251,2249,1,0,0,0,
        2251,2252,1,0,0,0,2252,337,1,0,0,0,2253,2251,1,0,0,0,2254,2255,5,
        45,0,0,2255,2256,5,149,0,0,2256,2257,5,187,0,0,2257,2258,5,90,0,
        0,2258,2262,5,91,0,0,2259,2261,3,432,216,0,2260,2259,1,0,0,0,2261,
        2264,1,0,0,0,2262,2260,1,0,0,0,2262,2263,1,0,0,0,2263,339,1,0,0,
        0,2264,2262,1,0,0,0,2265,2266,5,45,0,0,2266,2267,5,149,0,0,2267,
        2268,5,188,0,0,2268,2269,5,90,0,0,2269,2273,5,91,0,0,2270,2272,3,
        432,216,0,2271,2270,1,0,0,0,2272,2275,1,0,0,0,2273,2271,1,0,0,0,
        2273,2274,1,0,0,0,2274,341,1,0,0,0,2275,2273,1,0,0,0,2276,2277,5,
        45,0,0,2277,2278,5,149,0,0,2278,2279,5,189,0,0,2279,2280,5,90,0,
        0,2280,2284,5,91,0,0,2281,2283,3,432,216,0,2282,2281,1,0,0,0,2283,
        2286,1,0,0,0,2284,2282,1,0,0,0,2284,2285,1,0,0,0,2285,343,1,0,0,
        0,2286,2284,1,0,0,0,2287,2288,5,45,0,0,2288,2289,5,149,0,0,2289,
        2290,5,190,0,0,2290,2291,5,90,0,0,2291,2295,5,91,0,0,2292,2294,3,
        432,216,0,2293,2292,1,0,0,0,2294,2297,1,0,0,0,2295,2293,1,0,0,0,
        2295,2296,1,0,0,0,2296,345,1,0,0,0,2297,2295,1,0,0,0,2298,2299,5,
        45,0,0,2299,2300,5,149,0,0,2300,2301,5,191,0,0,2301,2302,5,90,0,
        0,2302,2306,5,91,0,0,2303,2305,3,432,216,0,2304,2303,1,0,0,0,2305,
        2308,1,0,0,0,2306,2304,1,0,0,0,2306,2307,1,0,0,0,2307,347,1,0,0,
        0,2308,2306,1,0,0,0,2309,2310,5,45,0,0,2310,2311,5,149,0,0,2311,
        2312,5,192,0,0,2312,2313,5,90,0,0,2313,2317,5,91,0,0,2314,2316,3,
        432,216,0,2315,2314,1,0,0,0,2316,2319,1,0,0,0,2317,2315,1,0,0,0,
        2317,2318,1,0,0,0,2318,349,1,0,0,0,2319,2317,1,0,0,0,2320,2321,5,
        45,0,0,2321,2322,5,149,0,0,2322,2323,5,193,0,0,2323,2324,5,90,0,
        0,2324,2328,5,91,0,0,2325,2327,3,432,216,0,2326,2325,1,0,0,0,2327,
        2330,1,0,0,0,2328,2326,1,0,0,0,2328,2329,1,0,0,0,2329,351,1,0,0,
        0,2330,2328,1,0,0,0,2331,2332,5,45,0,0,2332,2333,5,149,0,0,2333,
        2334,5,194,0,0,2334,2335,5,90,0,0,2335,2339,5,91,0,0,2336,2338,3,
        432,216,0,2337,2336,1,0,0,0,2338,2341,1,0,0,0,2339,2337,1,0,0,0,
        2339,2340,1,0,0,0,2340,353,1,0,0,0,2341,2339,1,0,0,0,2342,2343,5,
        45,0,0,2343,2344,5,149,0,0,2344,2345,5,195,0,0,2345,2346,5,90,0,
        0,2346,2350,5,91,0,0,2347,2349,3,432,216,0,2348,2347,1,0,0,0,2349,
        2352,1,0,0,0,2350,2348,1,0,0,0,2350,2351,1,0,0,0,2351,355,1,0,0,
        0,2352,2350,1,0,0,0,2353,2354,5,45,0,0,2354,2355,5,149,0,0,2355,
        2356,5,196,0,0,2356,2357,5,90,0,0,2357,2361,5,91,0,0,2358,2360,3,
        432,216,0,2359,2358,1,0,0,0,2360,2363,1,0,0,0,2361,2359,1,0,0,0,
        2361,2362,1,0,0,0,2362,357,1,0,0,0,2363,2361,1,0,0,0,2364,2365,5,
        45,0,0,2365,2366,5,149,0,0,2366,2367,5,197,0,0,2367,2368,5,90,0,
        0,2368,2372,5,91,0,0,2369,2371,3,432,216,0,2370,2369,1,0,0,0,2371,
        2374,1,0,0,0,2372,2370,1,0,0,0,2372,2373,1,0,0,0,2373,359,1,0,0,
        0,2374,2372,1,0,0,0,2375,2376,5,45,0,0,2376,2377,5,149,0,0,2377,
        2378,5,198,0,0,2378,2379,5,90,0,0,2379,2383,5,91,0,0,2380,2382,3,
        432,216,0,2381,2380,1,0,0,0,2382,2385,1,0,0,0,2383,2381,1,0,0,0,
        2383,2384,1,0,0,0,2384,361,1,0,0,0,2385,2383,1,0,0,0,2386,2387,5,
        45,0,0,2387,2388,5,149,0,0,2388,2389,5,199,0,0,2389,2390,5,90,0,
        0,2390,2394,5,91,0,0,2391,2393,3,432,216,0,2392,2391,1,0,0,0,2393,
        2396,1,0,0,0,2394,2392,1,0,0,0,2394,2395,1,0,0,0,2395,363,1,0,0,
        0,2396,2394,1,0,0,0,2397,2398,5,45,0,0,2398,2399,5,149,0,0,2399,
        2400,5,200,0,0,2400,2401,5,90,0,0,2401,2405,5,91,0,0,2402,2404,3,
        432,216,0,2403,2402,1,0,0,0,2404,2407,1,0,0,0,2405,2403,1,0,0,0,
        2405,2406,1,0,0,0,2406,365,1,0,0,0,2407,2405,1,0,0,0,2408,2409,5,
        45,0,0,2409,2410,5,149,0,0,2410,2411,5,201,0,0,2411,2412,5,90,0,
        0,2412,2416,5,91,0,0,2413,2415,3,432,216,0,2414,2413,1,0,0,0,2415,
        2418,1,0,0,0,2416,2414,1,0,0,0,2416,2417,1,0,0,0,2417,367,1,0,0,
        0,2418,2416,1,0,0,0,2419,2420,5,45,0,0,2420,2421,5,149,0,0,2421,
        2422,5,202,0,0,2422,2423,5,90,0,0,2423,2427,5,91,0,0,2424,2426,3,
        432,216,0,2425,2424,1,0,0,0,2426,2429,1,0,0,0,2427,2425,1,0,0,0,
        2427,2428,1,0,0,0,2428,369,1,0,0,0,2429,2427,1,0,0,0,2430,2431,5,
        45,0,0,2431,2432,5,149,0,0,2432,2436,5,203,0,0,2433,2435,3,432,216,
        0,2434,2433,1,0,0,0,2435,2438,1,0,0,0,2436,2434,1,0,0,0,2436,2437,
        1,0,0,0,2437,371,1,0,0,0,2438,2436,1,0,0,0,2439,2440,5,45,0,0,2440,
        2441,5,149,0,0,2441,2442,5,204,0,0,2442,2443,5,90,0,0,2443,2447,
        5,91,0,0,2444,2446,3,432,216,0,2445,2444,1,0,0,0,2446,2449,1,0,0,
        0,2447,2445,1,0,0,0,2447,2448,1,0,0,0,2448,373,1,0,0,0,2449,2447,
        1,0,0,0,2450,2451,5,45,0,0,2451,2452,5,149,0,0,2452,2453,5,205,0,
        0,2453,2454,5,90,0,0,2454,2458,5,91,0,0,2455,2457,3,432,216,0,2456,
        2455,1,0,0,0,2457,2460,1,0,0,0,2458,2456,1,0,0,0,2458,2459,1,0,0,
        0,2459,375,1,0,0,0,2460,2458,1,0,0,0,2461,2462,5,45,0,0,2462,2463,
        5,149,0,0,2463,2464,5,206,0,0,2464,2465,5,90,0,0,2465,2469,5,91,
        0,0,2466,2468,3,432,216,0,2467,2466,1,0,0,0,2468,2471,1,0,0,0,2469,
        2467,1,0,0,0,2469,2470,1,0,0,0,2470,377,1,0,0,0,2471,2469,1,0,0,
        0,2472,2473,5,45,0,0,2473,2474,5,149,0,0,2474,2475,5,207,0,0,2475,
        2476,5,90,0,0,2476,2480,5,91,0,0,2477,2479,3,432,216,0,2478,2477,
        1,0,0,0,2479,2482,1,0,0,0,2480,2478,1,0,0,0,2480,2481,1,0,0,0,2481,
        379,1,0,0,0,2482,2480,1,0,0,0,2483,2484,5,45,0,0,2484,2485,5,149,
        0,0,2485,2486,5,208,0,0,2486,2487,5,90,0,0,2487,2491,5,91,0,0,2488,
        2490,3,432,216,0,2489,2488,1,0,0,0,2490,2493,1,0,0,0,2491,2489,1,
        0,0,0,2491,2492,1,0,0,0,2492,381,1,0,0,0,2493,2491,1,0,0,0,2494,
        2495,5,45,0,0,2495,2496,5,149,0,0,2496,2497,5,209,0,0,2497,2498,
        5,90,0,0,2498,2502,5,91,0,0,2499,2501,3,432,216,0,2500,2499,1,0,
        0,0,2501,2504,1,0,0,0,2502,2500,1,0,0,0,2502,2503,1,0,0,0,2503,383,
        1,0,0,0,2504,2502,1,0,0,0,2505,2506,5,45,0,0,2506,2507,5,149,0,0,
        2507,2508,5,210,0,0,2508,2509,5,90,0,0,2509,2513,5,91,0,0,2510,2512,
        3,432,216,0,2511,2510,1,0,0,0,2512,2515,1,0,0,0,2513,2511,1,0,0,
        0,2513,2514,1,0,0,0,2514,385,1,0,0,0,2515,2513,1,0,0,0,2516,2517,
        5,47,0,0,2517,2518,5,149,0,0,2518,2522,5,211,0,0,2519,2521,3,432,
        216,0,2520,2519,1,0,0,0,2521,2524,1,0,0,0,2522,2520,1,0,0,0,2522,
        2523,1,0,0,0,2523,387,1,0,0,0,2524,2522,1,0,0,0,2525,2526,5,47,0,
        0,2526,2527,5,149,0,0,2527,2531,5,212,0,0,2528,2530,3,432,216,0,
        2529,2528,1,0,0,0,2530,2533,1,0,0,0,2531,2529,1,0,0,0,2531,2532,
        1,0,0,0,2532,389,1,0,0,0,2533,2531,1,0,0,0,2534,2535,5,47,0,0,2535,
        2536,5,149,0,0,2536,2540,5,213,0,0,2537,2539,3,432,216,0,2538,2537,
        1,0,0,0,2539,2542,1,0,0,0,2540,2538,1,0,0,0,2540,2541,1,0,0,0,2541,
        391,1,0,0,0,2542,2540,1,0,0,0,2543,2544,5,47,0,0,2544,2545,5,149,
        0,0,2545,2549,5,214,0,0,2546,2548,3,432,216,0,2547,2546,1,0,0,0,
        2548,2551,1,0,0,0,2549,2547,1,0,0,0,2549,2550,1,0,0,0,2550,393,1,
        0,0,0,2551,2549,1,0,0,0,2552,2553,5,47,0,0,2553,2554,5,149,0,0,2554,
        2558,5,215,0,0,2555,2557,3,432,216,0,2556,2555,1,0,0,0,2557,2560,
        1,0,0,0,2558,2556,1,0,0,0,2558,2559,1,0,0,0,2559,395,1,0,0,0,2560,
        2558,1,0,0,0,2561,2562,5,47,0,0,2562,2563,5,149,0,0,2563,2567,5,
        216,0,0,2564,2566,3,432,216,0,2565,2564,1,0,0,0,2566,2569,1,0,0,
        0,2567,2565,1,0,0,0,2567,2568,1,0,0,0,2568,397,1,0,0,0,2569,2567,
        1,0,0,0,2570,2571,5,47,0,0,2571,2572,5,149,0,0,2572,2576,5,217,0,
        0,2573,2575,3,432,216,0,2574,2573,1,0,0,0,2575,2578,1,0,0,0,2576,
        2574,1,0,0,0,2576,2577,1,0,0,0,2577,399,1,0,0,0,2578,2576,1,0,0,
        0,2579,2580,5,48,0,0,2580,2581,5,149,0,0,2581,2582,5,218,0,0,2582,
        2583,5,90,0,0,2583,2587,5,91,0,0,2584,2586,3,432,216,0,2585,2584,
        1,0,0,0,2586,2589,1,0,0,0,2587,2585,1,0,0,0,2587,2588,1,0,0,0,2588,
        401,1,0,0,0,2589,2587,1,0,0,0,2590,2591,5,48,0,0,2591,2592,5,149,
        0,0,2592,2593,5,219,0,0,2593,2594,5,90,0,0,2594,2598,5,91,0,0,2595,
        2597,3,432,216,0,2596,2595,1,0,0,0,2597,2600,1,0,0,0,2598,2596,1,
        0,0,0,2598,2599,1,0,0,0,2599,403,1,0,0,0,2600,2598,1,0,0,0,2601,
        2602,5,48,0,0,2602,2603,5,149,0,0,2603,2604,5,220,0,0,2604,2605,
        5,90,0,0,2605,2609,5,91,0,0,2606,2608,3,432,216,0,2607,2606,1,0,
        0,0,2608,2611,1,0,0,0,2609,2607,1,0,0,0,2609,2610,1,0,0,0,2610,405,
        1,0,0,0,2611,2609,1,0,0,0,2612,2613,5,48,0,0,2613,2614,5,149,0,0,
        2614,2615,5,221,0,0,2615,2616,5,90,0,0,2616,2620,5,91,0,0,2617,2619,
        3,432,216,0,2618,2617,1,0,0,0,2619,2622,1,0,0,0,2620,2618,1,0,0,
        0,2620,2621,1,0,0,0,2621,407,1,0,0,0,2622,2620,1,0,0,0,2623,2624,
        5,48,0,0,2624,2625,5,149,0,0,2625,2626,5,222,0,0,2626,2627,5,90,
        0,0,2627,2631,5,91,0,0,2628,2630,3,432,216,0,2629,2628,1,0,0,0,2630,
        2633,1,0,0,0,2631,2629,1,0,0,0,2631,2632,1,0,0,0,2632,409,1,0,0,
        0,2633,2631,1,0,0,0,2634,2635,5,48,0,0,2635,2636,5,149,0,0,2636,
        2637,5,223,0,0,2637,2638,5,90,0,0,2638,2642,5,91,0,0,2639,2641,3,
        432,216,0,2640,2639,1,0,0,0,2641,2644,1,0,0,0,2642,2640,1,0,0,0,
        2642,2643,1,0,0,0,2643,411,1,0,0,0,2644,2642,1,0,0,0,2645,2646,5,
        48,0,0,2646,2647,5,149,0,0,2647,2648,5,224,0,0,2648,2649,5,90,0,
        0,2649,2653,5,91,0,0,2650,2652,3,432,216,0,2651,2650,1,0,0,0,2652,
        2655,1,0,0,0,2653,2651,1,0,0,0,2653,2654,1,0,0,0,2654,413,1,0,0,
        0,2655,2653,1,0,0,0,2656,2657,5,48,0,0,2657,2658,5,149,0,0,2658,
        2659,5,225,0,0,2659,2660,5,90,0,0,2660,2664,5,91,0,0,2661,2663,3,
        432,216,0,2662,2661,1,0,0,0,2663,2666,1,0,0,0,2664,2662,1,0,0,0,
        2664,2665,1,0,0,0,2665,415,1,0,0,0,2666,2664,1,0,0,0,2667,2668,5,
        48,0,0,2668,2669,5,149,0,0,2669,2670,5,226,0,0,2670,2671,5,90,0,
        0,2671,2675,5,91,0,0,2672,2674,3,432,216,0,2673,2672,1,0,0,0,2674,
        2677,1,0,0,0,2675,2673,1,0,0,0,2675,2676,1,0,0,0,2676,417,1,0,0,
        0,2677,2675,1,0,0,0,2678,2679,5,48,0,0,2679,2680,5,149,0,0,2680,
        2681,5,227,0,0,2681,2682,5,90,0,0,2682,2686,5,91,0,0,2683,2685,3,
        432,216,0,2684,2683,1,0,0,0,2685,2688,1,0,0,0,2686,2684,1,0,0,0,
        2686,2687,1,0,0,0,2687,419,1,0,0,0,2688,2686,1,0,0,0,2689,2690,5,
        48,0,0,2690,2691,5,149,0,0,2691,2692,5,228,0,0,2692,2693,5,90,0,
        0,2693,2697,5,91,0,0,2694,2696,3,432,216,0,2695,2694,1,0,0,0,2696,
        2699,1,0,0,0,2697,2695,1,0,0,0,2697,2698,1,0,0,0,2698,421,1,0,0,
        0,2699,2697,1,0,0,0,2700,2701,5,48,0,0,2701,2702,5,149,0,0,2702,
        2703,5,229,0,0,2703,2704,5,90,0,0,2704,2708,5,91,0,0,2705,2707,3,
        432,216,0,2706,2705,1,0,0,0,2707,2710,1,0,0,0,2708,2706,1,0,0,0,
        2708,2709,1,0,0,0,2709,423,1,0,0,0,2710,2708,1,0,0,0,2711,2713,5,
        53,0,0,2712,2711,1,0,0,0,2712,2713,1,0,0,0,2713,2714,1,0,0,0,2714,
        2718,3,426,213,0,2715,2717,3,432,216,0,2716,2715,1,0,0,0,2717,2720,
        1,0,0,0,2718,2716,1,0,0,0,2718,2719,1,0,0,0,2719,2724,1,0,0,0,2720,
        2718,1,0,0,0,2721,2724,3,262,131,0,2722,2724,3,196,98,0,2723,2712,
        1,0,0,0,2723,2721,1,0,0,0,2723,2722,1,0,0,0,2724,425,1,0,0,0,2725,
        2728,5,90,0,0,2726,2729,3,460,230,0,2727,2729,3,430,215,0,2728,2726,
        1,0,0,0,2728,2727,1,0,0,0,2728,2729,1,0,0,0,2729,2730,1,0,0,0,2730,
        2753,5,91,0,0,2731,2733,5,97,0,0,2732,2734,3,430,215,0,2733,2732,
        1,0,0,0,2733,2734,1,0,0,0,2734,2735,1,0,0,0,2735,2753,5,98,0,0,2736,
        2738,5,110,0,0,2737,2739,3,444,222,0,2738,2737,1,0,0,0,2738,2739,
        1,0,0,0,2739,2740,1,0,0,0,2740,2753,5,111,0,0,2741,2753,3,428,214,
        0,2742,2753,5,135,0,0,2743,2745,5,134,0,0,2744,2743,1,0,0,0,2745,
        2746,1,0,0,0,2746,2744,1,0,0,0,2746,2747,1,0,0,0,2747,2753,1,0,0,
        0,2748,2753,5,88,0,0,2749,2753,5,74,0,0,2750,2753,5,81,0,0,2751,
        2753,5,63,0,0,2752,2725,1,0,0,0,2752,2731,1,0,0,0,2752,2736,1,0,
        0,0,2752,2741,1,0,0,0,2752,2742,1,0,0,0,2752,2744,1,0,0,0,2752,2748,
        1,0,0,0,2752,2749,1,0,0,0,2752,2750,1,0,0,0,2752,2751,1,0,0,0,2753,
        427,1,0,0,0,2754,2755,7,10,0,0,2755,429,1,0,0,0,2756,2759,3,174,
        87,0,2757,2759,3,192,96,0,2758,2756,1,0,0,0,2758,2757,1,0,0,0,2759,
        2774,1,0,0,0,2760,2775,3,454,227,0,2761,2764,5,92,0,0,2762,2765,
        3,174,87,0,2763,2765,3,192,96,0,2764,2762,1,0,0,0,2764,2763,1,0,
        0,0,2765,2767,1,0,0,0,2766,2761,1,0,0,0,2767,2770,1,0,0,0,2768,2766,
        1,0,0,0,2768,2769,1,0,0,0,2769,2772,1,0,0,0,2770,2768,1,0,0,0,2771,
        2773,5,92,0,0,2772,2771,1,0,0,0,2772,2773,1,0,0,0,2773,2775,1,0,
        0,0,2774,2760,1,0,0,0,2774,2768,1,0,0,0,2775,431,1,0,0,0,2776,2778,
        5,90,0,0,2777,2779,3,448,224,0,2778,2777,1,0,0,0,2778,2779,1,0,0,
        0,2779,2780,1,0,0,0,2780,2791,5,91,0,0,2781,2782,5,97,0,0,2782,2783,
        3,434,217,0,2783,2784,5,98,0,0,2784,2791,1,0,0,0,2785,2788,5,87,
        0,0,2786,2789,3,206,103,0,2787,2789,3,428,214,0,2788,2786,1,0,0,
        0,2788,2787,1,0,0,0,2789,2791,1,0,0,0,2790,2776,1,0,0,0,2790,2781,
        1,0,0,0,2790,2785,1,0,0,0,2791,433,1,0,0,0,2792,2797,3,436,218,0,
        2793,2794,5,92,0,0,2794,2796,3,436,218,0,2795,2793,1,0,0,0,2796,
        2799,1,0,0,0,2797,2795,1,0,0,0,2797,2798,1,0,0,0,2798,2801,1,0,0,
        0,2799,2797,1,0,0,0,2800,2802,5,92,0,0,2801,2800,1,0,0,0,2801,2802,
        1,0,0,0,2802,435,1,0,0,0,2803,2815,3,174,87,0,2804,2806,3,174,87,
        0,2805,2804,1,0,0,0,2805,2806,1,0,0,0,2806,2807,1,0,0,0,2807,2809,
        5,93,0,0,2808,2810,3,174,87,0,2809,2808,1,0,0,0,2809,2810,1,0,0,
        0,2810,2812,1,0,0,0,2811,2813,3,438,219,0,2812,2811,1,0,0,0,2812,
        2813,1,0,0,0,2813,2815,1,0,0,0,2814,2803,1,0,0,0,2814,2805,1,0,0,
        0,2815,437,1,0,0,0,2816,2818,5,93,0,0,2817,2819,3,174,87,0,2818,
        2817,1,0,0,0,2818,2819,1,0,0,0,2819,439,1,0,0,0,2820,2823,3,194,
        97,0,2821,2823,3,192,96,0,2822,2820,1,0,0,0,2822,2821,1,0,0,0,2823,
        2831,1,0,0,0,2824,2827,5,92,0,0,2825,2828,3,194,97,0,2826,2828,3,
        192,96,0,2827,2825,1,0,0,0,2827,2826,1,0,0,0,2828,2830,1,0,0,0,2829,
        2824,1,0,0,0,2830,2833,1,0,0,0,2831,2829,1,0,0,0,2831,2832,1,0,0,
        0,2832,2835,1,0,0,0,2833,2831,1,0,0,0,2834,2836,5,92,0,0,2835,2834,
        1,0,0,0,2835,2836,1,0,0,0,2836,441,1,0,0,0,2837,2842,3,174,87,0,
        2838,2839,5,92,0,0,2839,2841,3,174,87,0,2840,2838,1,0,0,0,2841,2844,
        1,0,0,0,2842,2840,1,0,0,0,2842,2843,1,0,0,0,2843,2846,1,0,0,0,2844,
        2842,1,0,0,0,2845,2847,5,92,0,0,2846,2845,1,0,0,0,2846,2847,1,0,
        0,0,2847,443,1,0,0,0,2848,2849,3,174,87,0,2849,2850,5,93,0,0,2850,
        2851,3,174,87,0,2851,2855,1,0,0,0,2852,2853,5,95,0,0,2853,2855,3,
        194,97,0,2854,2848,1,0,0,0,2854,2852,1,0,0,0,2855,2874,1,0,0,0,2856,
        2875,3,454,227,0,2857,2864,5,92,0,0,2858,2859,3,174,87,0,2859,2860,
        5,93,0,0,2860,2861,3,174,87,0,2861,2865,1,0,0,0,2862,2863,5,95,0,
        0,2863,2865,3,194,97,0,2864,2858,1,0,0,0,2864,2862,1,0,0,0,2865,
        2867,1,0,0,0,2866,2857,1,0,0,0,2867,2870,1,0,0,0,2868,2866,1,0,0,
        0,2868,2869,1,0,0,0,2869,2872,1,0,0,0,2870,2868,1,0,0,0,2871,2873,
        5,92,0,0,2872,2871,1,0,0,0,2872,2873,1,0,0,0,2873,2875,1,0,0,0,2874,
        2856,1,0,0,0,2874,2868,1,0,0,0,2875,2897,1,0,0,0,2876,2879,3,174,
        87,0,2877,2879,3,192,96,0,2878,2876,1,0,0,0,2878,2877,1,0,0,0,2879,
        2894,1,0,0,0,2880,2895,3,454,227,0,2881,2884,5,92,0,0,2882,2885,
        3,174,87,0,2883,2885,3,192,96,0,2884,2882,1,0,0,0,2884,2883,1,0,
        0,0,2885,2887,1,0,0,0,2886,2881,1,0,0,0,2887,2890,1,0,0,0,2888,2886,
        1,0,0,0,2888,2889,1,0,0,0,2889,2892,1,0,0,0,2890,2888,1,0,0,0,2891,
        2893,5,92,0,0,2892,2891,1,0,0,0,2892,2893,1,0,0,0,2893,2895,1,0,
        0,0,2894,2880,1,0,0,0,2894,2888,1,0,0,0,2895,2897,1,0,0,0,2896,2854,
        1,0,0,0,2896,2878,1,0,0,0,2897,445,1,0,0,0,2898,2899,5,56,0,0,2899,
        2905,3,428,214,0,2900,2902,5,90,0,0,2901,2903,3,448,224,0,2902,2901,
        1,0,0,0,2902,2903,1,0,0,0,2903,2904,1,0,0,0,2904,2906,5,91,0,0,2905,
        2900,1,0,0,0,2905,2906,1,0,0,0,2906,2907,1,0,0,0,2907,2908,5,93,
        0,0,2908,2909,3,96,48,0,2909,447,1,0,0,0,2910,2915,3,450,225,0,2911,
        2912,5,92,0,0,2912,2914,3,450,225,0,2913,2911,1,0,0,0,2914,2917,
        1,0,0,0,2915,2913,1,0,0,0,2915,2916,1,0,0,0,2916,2919,1,0,0,0,2917,
        2915,1,0,0,0,2918,2920,5,92,0,0,2919,2918,1,0,0,0,2919,2920,1,0,
        0,0,2920,449,1,0,0,0,2921,2923,3,174,87,0,2922,2924,3,454,227,0,
        2923,2922,1,0,0,0,2923,2924,1,0,0,0,2924,2934,1,0,0,0,2925,2926,
        3,174,87,0,2926,2927,5,96,0,0,2927,2928,3,174,87,0,2928,2934,1,0,
        0,0,2929,2930,5,95,0,0,2930,2934,3,174,87,0,2931,2932,5,89,0,0,2932,
        2934,3,174,87,0,2933,2921,1,0,0,0,2933,2925,1,0,0,0,2933,2929,1,
        0,0,0,2933,2931,1,0,0,0,2934,451,1,0,0,0,2935,2938,3,454,227,0,2936,
        2938,3,456,228,0,2937,2935,1,0,0,0,2937,2936,1,0,0,0,2938,453,1,
        0,0,0,2939,2941,5,52,0,0,2940,2939,1,0,0,0,2940,2941,1,0,0,0,2941,
        2942,1,0,0,0,2942,2943,5,65,0,0,2943,2944,3,440,220,0,2944,2945,
        5,70,0,0,2945,2947,3,182,91,0,2946,2948,3,452,226,0,2947,2946,1,
        0,0,0,2947,2948,1,0,0,0,2948,455,1,0,0,0,2949,2950,5,68,0,0,2950,
        2952,3,176,88,0,2951,2953,3,452,226,0,2952,2951,1,0,0,0,2952,2953,
        1,0,0,0,2953,457,1,0,0,0,2954,2955,3,428,214,0,2955,459,1,0,0,0,
        2956,2958,5,86,0,0,2957,2959,3,462,231,0,2958,2957,1,0,0,0,2958,
        2959,1,0,0,0,2959,461,1,0,0,0,2960,2961,5,66,0,0,2961,2964,3,174,
        87,0,2962,2964,3,442,221,0,2963,2960,1,0,0,0,2963,2962,1,0,0,0,2964,
        463,1,0,0,0,2965,2967,5,134,0,0,2966,2965,1,0,0,0,2967,2968,1,0,
        0,0,2968,2966,1,0,0,0,2968,2969,1,0,0,0,2969,465,1,0,0,0,325,468,
        470,480,486,495,498,505,511,521,528,535,541,545,551,557,561,568,
        570,572,577,579,581,585,591,595,602,604,606,611,613,618,623,629,
        633,639,645,649,656,658,660,665,667,669,673,679,683,690,692,694,
        699,701,707,714,718,730,737,742,746,749,755,759,764,768,772,786,
        794,802,804,808,817,824,826,835,840,845,852,856,863,871,880,889,
        896,908,914,927,933,942,953,964,969,974,979,987,996,1002,1004,1012,
        1016,1026,1033,1036,1042,1045,1050,1055,1065,1069,1080,1091,1101,
        1111,1121,1126,1131,1152,1156,1164,1169,1172,1177,1184,1188,1192,
        1198,1205,1214,1221,1225,1232,1237,1253,1261,1271,1275,1282,1290,
        1303,1306,1310,1314,1321,1331,1336,1343,1348,1355,1363,1368,1383,
        1394,1401,1406,1410,1414,1421,1444,1446,1452,1458,1467,1471,1481,
        1510,1518,1530,1543,1547,1558,1562,1570,1578,1588,1598,1608,1618,
        1628,1638,1648,1658,1668,1678,1688,1696,1706,1716,1726,1736,1746,
        1756,1764,1852,1855,1865,1876,1887,1898,1909,1920,1931,1942,1953,
        1964,1975,1986,1997,2008,2019,2030,2041,2052,2063,2072,2081,2090,
        2101,2112,2121,2132,2141,2152,2163,2174,2185,2196,2207,2218,2229,
        2240,2251,2262,2273,2284,2295,2306,2317,2328,2339,2350,2361,2372,
        2383,2394,2405,2416,2427,2436,2447,2458,2469,2480,2491,2502,2513,
        2522,2531,2540,2549,2558,2567,2576,2587,2598,2609,2620,2631,2642,
        2653,2664,2675,2686,2697,2708,2712,2718,2723,2728,2733,2738,2746,
        2752,2758,2764,2768,2772,2774,2778,2788,2790,2797,2801,2805,2809,
        2812,2814,2818,2822,2827,2831,2835,2842,2846,2854,2864,2868,2872,
        2874,2878,2884,2888,2892,2894,2896,2902,2905,2915,2919,2923,2933,
        2937,2940,2947,2952,2958,2963,2968
    ]

class PyTealParser ( PyTealParserBase ):

    grammarFileName = "PyTealParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'Int'", "'Bytes'", 
                     "'\"base16\"'", "'\"base32\"'", "'\"base64\"'", "'Itob'", 
                     "'Btoi'", "'Lt'", "'Gt'", "'Le'", "'Ge'", "'Add'", 
                     "'Minus'", "'Mul'", "'Div'", "'Mod'", "'Exp'", "'Eq'", 
                     "'Neq'", "'And'", "'Or'", "'Not'", "'BitwiseAnd'", 
                     "'BitwiseOr'", "'BitwiseXor'", "'BitwiseNot'", "'BytesLt'", 
                     "'BytesGt'", "'BytesLe'", "'BytesGe'", "'BytesAdd'", 
                     "'BytesMinus'", "'BytesMul'", "'BytesDiv'", "'BytesMod'", 
                     "'BytesEq'", "'BytesNeq'", "'BytesAnd'", "'BytesOr'", 
                     "'BytesNot'", "'BytesXor'", "'BytesZero'", "'Txn'", 
                     "'InnerTxn'", "'TxnType'", "'Global'", "'and'", "'as'", 
                     "'assert'", "'async'", "'await'", "'break'", "'case'", 
                     "'class'", "'continue'", "'def'", "'del'", "'elif'", 
                     "'else'", "'except'", "'False'", "'finally'", "'for'", 
                     "'from'", "'global'", "'if'", "'import'", "'in'", "'is'", 
                     "'lambda'", "'match'", "'None'", "'nonlocal'", "'not'", 
                     "'or'", "'pass'", "'raise'", "'return'", "'True'", 
                     "'try'", "'_'", "'while'", "'with'", "'yield'", "<INVALID>", 
                     "'...'", "'*'", "'('", "')'", "','", "':'", "';'", 
                     "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", "'<<'", 
                     "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", 
                     "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", "'<='", 
                     "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", 
                     "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", 
                     "'>>='", "'**='", "'//='", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'type'", "'type_enum'", 
                     "'sender'", "'fee'", "'first_valid'", "'first_valid_time'", 
                     "'last_valid'", "'note'", "'lease'", "'group_index'", 
                     "'tx_id'", "'rekey_to'", "'application_id'", "'on_completion'", 
                     "'approval_program'", "'global_num_uints'", "'global_num_byte_slices'", 
                     "'local_num_uints'", "'local_num_byte_slices'", "'accounts'", 
                     "'assets'", "'applications'", "'clear_state_program'", 
                     "'extra_program_pages'", "'application_args'", "'created_application_id'", 
                     "'logs'", "'last_log'", "'approval_program_pages'", 
                     "'clear_state_program_pages'", "'config_asset'", "'config_asset_total'", 
                     "'config_asset_decimals'", "'config_asset_default_frozen'", 
                     "'config_asset_unit_name'", "'config_asset_name'", 
                     "'config_asset_url'", "'config_asset_metadata_hash'", 
                     "'config_asset_manager'", "'config_asset_reserve'", 
                     "'config_asset_freeze'", "'config_asset_clawback'", 
                     "'created_asset_id'", "'freeze_asset'", "'freeze_asset_account'", 
                     "'freeze_asset_frozen'", "'xfer_asset'", "'asset_amount'", 
                     "'asset_sender'", "'asset_receiver'", "'asset_close_to'", 
                     "'vote_pk'", "'selection_pk'", "'state_proof_pk'", 
                     "'vote_first'", "'vote_last'", "'vote_key_dilution'", 
                     "'nonparticipation'", "'receiver'", "'amount'", "'close_remainder_to'", 
                     "'Unknown'", "'Payment'", "'KeyRegistration'", "'AssetConfig'", 
                     "'AssetTransfer'", "'AssetFreeze'", "'ApplicationCall'", 
                     "'min_txn_fee'", "'min_balance'", "'max_txn_life'", 
                     "'zero_address'", "'group_size'", "'logic_sig_version'", 
                     "'round'", "'latest_timestamp'", "'current_application_id'", 
                     "'creator_address'", "'current_application_address'", 
                     "'group_id'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "PYTEAL_INT", "PYTEAL_BYTE", 
                      "PYTEAL_BYTE_BASE16", "PYTEAL_BYTE_BASE32", "PYTEAL_BYTE_BASE64", 
                      "PYTEAL_ITOB", "PYTEAL_BTOI", "PYTEAL_LT", "PYTEAL_GT", 
                      "PYTEAL_LE", "PYTEAL_GE", "PYTEAL_ADD", "PYTEAL_MINUS", 
                      "PYTEAL_MUL", "PYTEAL_DIV", "PYTEAL_MOD", "PYTEAL_EXP", 
                      "PYTEAL_EQ", "PYTEAL_NEQ", "PYTEAL_AND", "PYTEAL_OR", 
                      "PYTEAL_NOT", "PYTEAL_BITWISEAND", "PYTEAL_BITWISEOR", 
                      "PYTEAL_BITWISEXOR", "PYTEAL_BITWISENOT", "PYTEAL_BYTES_LT", 
                      "PYTEAL_BYTES_GT", "PYTEAL_BYTES_LE", "PYTEAL_BYTES_GE", 
                      "PYTEAL_BYTES_ADD", "PYTEAL_BYTES_MINUS", "PYTEAL_BYTES_MUL", 
                      "PYTEAL_BYTES_DIV", "PYTEAL_BYTES_MOD", "PYTEAL_BYTES_EQ", 
                      "PYTEAL_BYTES_NEQ", "PYTEAL_BYTES_AND", "PYTEAL_BYTES_OR", 
                      "PYTEAL_BYTES_NOT", "PYTEAL_BYTES_XOR", "PYTEAL_BYTES_ZERO", 
                      "PYTEAL_TXN", "PYTEAL_INNERTXN", "PYTEAL_TXNTYPE", 
                      "PYTEAL_GLOBAL", "AND", "AS", "ASSERT", "ASYNC", "AWAIT", 
                      "BREAK", "CASE", "CLASS", "CONTINUE", "DEF", "DEL", 
                      "ELIF", "ELSE", "EXCEPT", "FALSE", "FINALLY", "FOR", 
                      "FROM", "GLOBAL", "IF", "IMPORT", "IN", "IS", "LAMBDA", 
                      "MATCH", "NONE", "NONLOCAL", "NOT", "OR", "PASS", 
                      "RAISE", "RETURN", "TRUE", "TRY", "UNDERSCORE", "WHILE", 
                      "WITH", "YIELD", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", 
                      "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", "POWER", 
                      "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", 
                      "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", 
                      "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "STRING", "NUMBER", "INTEGER", "NEWLINE", 
                      "NAME", "STRING_LITERAL", "BYTES_LITERAL", "DECIMAL_INTEGER", 
                      "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", 
                      "IMAG_NUMBER", "SKIP_", "UNKNOWN_CHAR", "PYTEAL_DOT", 
                      "PYTEAL_TXN_TYPE", "PYTEAL_TXN_TYPE_ENUM", "PYTEAL_TXN_SENDER", 
                      "PYTEAL_TXN_FEE", "PYTEAL_TXN_FIRST_VALID", "PYTEAL_TXN_FIRST_VALID_TIME", 
                      "PYTEAL_TXN_LAST_VALID", "PYTEAL_TXN_NOTE", "PYTEAL_TXN_LEASE", 
                      "PYTEAL_TXN_GROUP_INDEX", "PYTEAL_TXN_TXN_ID", "PYTEAL_TXN_REKEY_TO", 
                      "PYTEAL_TXN_APPLICATION_ID", "PYTEAL_TXN_ON_COMPLETION", 
                      "PYTEAL_TXN_APPROVAL_PROGRAM", "PYTEAL_TXN_GLOBAL_NUM_UINTS", 
                      "PYTEAL_TXN_GLOBAL_NUM_BYTE_SLICES", "PYTEAL_TXN_GLOBAL_LOCAL_NUM_UINTS", 
                      "PYTEAL_TXN_LOCAL_NUM_BYTE_SLICES", "PYTEAL_TXN_ACCOUNTS", 
                      "PYTEAL_TXN_ASSETS", "PYTEAL_TXN_APPLICATIONS", "PYTEAL_TXN_CLEAR_STATE_PROGRAM", 
                      "PYTEAL_TXN_EXTRA_PROGRAM_PAGES", "PYTEAL_TXN_APPLICATION_ARGS", 
                      "PYTEAL_TXN_CREATED_APPLICATION_ID", "PYTEAL_TXN_LOGS", 
                      "PYTEAL_TXN_LAST_LOG", "PYTEAL_TXN_APPROVAL_PROGRAM_PAGES", 
                      "PYTEAL_TXN_CLEAR_STATE_PROGRAM_PAGES", "PYTEAL_TXN_CONFIG_ASSET", 
                      "PYTEAL_TXN_CONFIG_ASSET_TOTAL", "PYTEAL_TXN_CONFIG_ASSET_DECIMALS", 
                      "PYTEAL_TXN_CONFIG_ASSET_DEFAULT_FROZEN", "PYTEAL_TXN_CONFIG_ASSET_UNIT_NAME", 
                      "PYTEAL_TXN_CONFIG_ASSET_NAME", "PYTEAL_TXN_CONFIG_ASSET_URL", 
                      "PYTEAL_TXN_CONFIG_ASSET_METADATA_HASH", "PYTEAL_TXN_CONFIG_ASSET_MANAGER", 
                      "PYTEAL_TXN_CONFIG_ASSET_RESERVE", "PYTEAL_TXN_CONFIG_ASSET_FREEZE", 
                      "PYTEAL_TXN_CONFIG_ASSET_CLAWBACK", "PYTEAL_TXN_CREATED_ASSET_ID", 
                      "PYTEAL_TXN_FREEZE_ASSET", "PYTEAL_TXN_FREEZE_ASSET_ACCOUNT", 
                      "PYTEAL_TXN_FREEZE_ASSET_FROZEN", "PYTEAL_TXN_XFER_ASSET", 
                      "PYTEAL_TXN_ASSET_AMOUNT", "PYTEAL_TXN_ASSET_SENDER", 
                      "PYTEAL_TXN_ASSET_RECEIVER", "PYTEAL_TXN_ASSET_CLOSE_TO", 
                      "PYTEAL_TXN_VOTE_PK", "PYTEAL_TXN_SELECTION_PK", "PYTEAL_TXN_STATE_PROOF_PK", 
                      "PYTEAL_TXN_VOTE_FIRST", "PYTEAL_TXN_VOTE_LAST", "PYTEAL_TXN_VOTE_KEY_DILUTION", 
                      "PYTEAL_TXN_NONPARTICIPATION", "PYTEAL_TXN_RECEIVER", 
                      "PYTEAL_TXN_AMOUNT", "PYTEAL_TXN_CLOSE_REMAINDER_TO", 
                      "PYTEAL_TXNTYPE_UNKNOWN", "PYTEAL_TXNTYPE_PAYMENT", 
                      "PYTEAL_TXNTYPE_KEYREGISTRATION", "PYTEAL_TXNTYPE_ASSETCONFIG", 
                      "PYTEAL_TXNTYPE_ASSETTRANSFER", "PYTEAL_TXNTYPE_ASSETFREEZE", 
                      "PYTEAL_TXNTYPE_APPLICATIONCALL", "PYTEAL_GLOBAL_MIN_TXN_FEE", 
                      "PYTEAL_GLOBAL_MIN_BALANCE", "PYTEAL_GLOBAL_MAX_TXN_LIFE", 
                      "PYTEAL_GLOBAL_ZERO_ADDRESS", "PYTEAL_GLOBAL_GROUP_SIZE", 
                      "PYTEAL_GLOBAL_LOGIC_SIG_VERSION", "PYTEAL_GLOBAL_ROUND", 
                      "PYTEAL_GLOBAL_LATEST_TIMESTAMP", "PYTEAL_GLOBAL_CURRENT_APPLICATION_ID", 
                      "PYTEAL_GLOBAL_CREATOR_ADDRESS", "PYTEAL_GLOBAL_CURRENT_APPLICATION_ADDRESS", 
                      "PYTEAL_GLOBAL_GROUP_ID" ]

    RULE_file_input = 0
    RULE_single_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_async_funcdef = 6
    RULE_funcdef = 7
    RULE_parameters = 8
    RULE_typedargslist = 9
    RULE_tfpdef = 10
    RULE_varargslist = 11
    RULE_vfpdef = 12
    RULE_stmt = 13
    RULE_simple_stmts = 14
    RULE_simple_stmt = 15
    RULE_expr_stmt = 16
    RULE_annassign = 17
    RULE_testlist_star_expr = 18
    RULE_augassign = 19
    RULE_del_stmt = 20
    RULE_pass_stmt = 21
    RULE_flow_stmt = 22
    RULE_break_stmt = 23
    RULE_continue_stmt = 24
    RULE_return_stmt = 25
    RULE_yield_stmt = 26
    RULE_raise_stmt = 27
    RULE_import_stmt = 28
    RULE_import_name = 29
    RULE_import_from = 30
    RULE_import_as_name = 31
    RULE_dotted_as_name = 32
    RULE_import_as_names = 33
    RULE_dotted_as_names = 34
    RULE_dotted_name = 35
    RULE_global_stmt = 36
    RULE_nonlocal_stmt = 37
    RULE_assert_stmt = 38
    RULE_compound_stmt = 39
    RULE_async_stmt = 40
    RULE_if_stmt = 41
    RULE_while_stmt = 42
    RULE_for_stmt = 43
    RULE_try_stmt = 44
    RULE_with_stmt = 45
    RULE_with_item = 46
    RULE_except_clause = 47
    RULE_block = 48
    RULE_match_stmt = 49
    RULE_subject_expr = 50
    RULE_star_named_expressions = 51
    RULE_star_named_expression = 52
    RULE_case_block = 53
    RULE_guard = 54
    RULE_patterns = 55
    RULE_pattern = 56
    RULE_as_pattern = 57
    RULE_or_pattern = 58
    RULE_closed_pattern = 59
    RULE_literal_pattern = 60
    RULE_literal_expr = 61
    RULE_complex_number = 62
    RULE_signed_number = 63
    RULE_signed_real_number = 64
    RULE_real_number = 65
    RULE_imaginary_number = 66
    RULE_capture_pattern = 67
    RULE_pattern_capture_target = 68
    RULE_wildcard_pattern = 69
    RULE_value_pattern = 70
    RULE_attr = 71
    RULE_name_or_attr = 72
    RULE_group_pattern = 73
    RULE_sequence_pattern = 74
    RULE_open_sequence_pattern = 75
    RULE_maybe_sequence_pattern = 76
    RULE_maybe_star_pattern = 77
    RULE_star_pattern = 78
    RULE_mapping_pattern = 79
    RULE_items_pattern = 80
    RULE_key_value_pattern = 81
    RULE_double_star_pattern = 82
    RULE_class_pattern = 83
    RULE_positional_patterns = 84
    RULE_keyword_patterns = 85
    RULE_keyword_pattern = 86
    RULE_test = 87
    RULE_test_nocond = 88
    RULE_lambdef = 89
    RULE_lambdef_nocond = 90
    RULE_or_test = 91
    RULE_and_test = 92
    RULE_not_test = 93
    RULE_comparison = 94
    RULE_comp_op = 95
    RULE_star_expr = 96
    RULE_expr = 97
    RULE_pyteal_data_expr = 98
    RULE_pyteal_integers_expr = 99
    RULE_pyteal_bytes_expr = 100
    RULE_pyteal_bytes_base = 101
    RULE_pyteal_conversion_expr = 102
    RULE_pyteal_arithmetic_operations = 103
    RULE_pyteal_comparison = 104
    RULE_pyteal_comp_op = 105
    RULE_pyteal_bytes_comparison = 106
    RULE_pyteal_bytes_comp_op = 107
    RULE_pyteal_or_expr = 108
    RULE_pyteal_and_expr = 109
    RULE_pyteal_not_expr = 110
    RULE_pyteal_exp_expr = 111
    RULE_pyteal_add_expr = 112
    RULE_pyteal_minus_expr = 113
    RULE_pyteal_bitwise_not_expr = 114
    RULE_pyteal_mul_expr = 115
    RULE_pyteal_div_expr = 116
    RULE_pyteal_mod_expr = 117
    RULE_pyteal_bitwise_and_expr = 118
    RULE_pyteal_bitwise_xor_expr = 119
    RULE_pyteal_bitwise_or_expr = 120
    RULE_pyteal_bytes_or_expr = 121
    RULE_pyteal_bytes_and_expr = 122
    RULE_pyteal_bytes_not_expr = 123
    RULE_pyteal_bytes_mul_expr = 124
    RULE_pyteal_bytes_div_expr = 125
    RULE_pyteal_bytes_mod_expr = 126
    RULE_pyteal_bytes_add_expr = 127
    RULE_pyteal_bytes_minus_expr = 128
    RULE_pyteal_bytes_xor_expr = 129
    RULE_pyteal_bytes_zero_expr = 130
    RULE_pyteal_txn_expr = 131
    RULE_pyteal_txn_type_expr = 132
    RULE_pyteal_txn_type_enum_expr = 133
    RULE_pyteal_txn_sender_expr = 134
    RULE_pyteal_txn_fee_expr = 135
    RULE_pyteal_txn_first_valid_expr = 136
    RULE_pyteal_txn_first_valid_time_expr = 137
    RULE_pyteal_txn_last_valid_expr = 138
    RULE_pyteal_txn_note_expr = 139
    RULE_pyteal_txn_lease_expr = 140
    RULE_pyteal_txn_group_index_expr = 141
    RULE_pyteal_txn_tx_id_expr = 142
    RULE_pyteal_txn_rekey_to_expr = 143
    RULE_pyteal_txn_application_id_expr = 144
    RULE_pyteal_txn_on_completion_expr = 145
    RULE_pyteal_txn_approval_program_expr = 146
    RULE_pyteal_txn_global_num_uints_expr = 147
    RULE_pyteal_txn_global_num_byte_slices_expr = 148
    RULE_pyteal_txn_local_num_uints_expr = 149
    RULE_pyteal_txn_local_num_byte_slices_expr = 150
    RULE_pyteal_txn_accounts_expr = 151
    RULE_pyteal_txn_assets_expr = 152
    RULE_pyteal_txn_applications_expr = 153
    RULE_pyteal_txn_clear_state_program_expr = 154
    RULE_pyteal_txn_extra_program_pages_expr = 155
    RULE_pyteal_txn_application_args_expr = 156
    RULE_pyteal_txn_created_application_id_expr = 157
    RULE_pyteal_txn_logs_expr = 158
    RULE_pyteal_txn_last_log_expr = 159
    RULE_pyteal_txn_approval_program_pages_expr = 160
    RULE_pyteal_txn_clear_state_program_pages_expr = 161
    RULE_pyteal_txn_config_asset_expr = 162
    RULE_pyteal_txn_config_asset_total_expr = 163
    RULE_pyteal_txn_config_asset_decimals_expr = 164
    RULE_pyteal_txn_config_asset_default_frozen_expr = 165
    RULE_pyteal_txn_config_asset_unit_name_expr = 166
    RULE_pyteal_txn_config_asset_name_expr = 167
    RULE_pyteal_txn_config_asset_url_expr = 168
    RULE_pyteal_txn_config_asset_metadata_hash_expr = 169
    RULE_pyteal_txn_config_asset_manager_expr = 170
    RULE_pyteal_txn_config_asset_reserve_expr = 171
    RULE_pyteal_txn_config_asset_freeze_expr = 172
    RULE_pyteal_txn_config_asset_clawback_expr = 173
    RULE_pyteal_txn_created_asset_id_expr = 174
    RULE_pyteal_txn_freeze_asset_expr = 175
    RULE_pyteal_txn_freeze_asset_account_expr = 176
    RULE_pyteal_txn_freeze_asset_frozen_expr = 177
    RULE_pyteal_txn_xfer_asset_expr = 178
    RULE_pyteal_txn_asset_amount_expr = 179
    RULE_pyteal_txn_asset_sender_expr = 180
    RULE_pyteal_txn_asset_receiver_expr = 181
    RULE_pyteal_txn_asset_close_to_expr = 182
    RULE_pyteal_txn_vote_pk_expr = 183
    RULE_pyteal_txn_selection_pk_expr = 184
    RULE_pyteal_txn_state_proof_pk_expr = 185
    RULE_pyteal_txn_vote_first_expr = 186
    RULE_pyteal_txn_vote_last_expr = 187
    RULE_pyteal_txn_vote_key_dilution_expr = 188
    RULE_pyteal_txn_nonparticipation_expr = 189
    RULE_pyteal_txn_receiver_expr = 190
    RULE_pyteal_txn_amount_expr = 191
    RULE_pyteal_txn_close_remainder_to_expr = 192
    RULE_pyteal_txntype_Unknown_expr = 193
    RULE_pyteal_txntype_Payment_expr = 194
    RULE_pyteal_txntype_KeyRegistration_expr = 195
    RULE_pyteal_txntype_AssetConfig_expr = 196
    RULE_pyteal_txntype_AssetTransfer_expr = 197
    RULE_pyteal_txntype_AssetFreeze_expr = 198
    RULE_pyteal_txntype_ApplicationCall_expr = 199
    RULE_pyteal_global_min_txn_fee_expr = 200
    RULE_pyteal_global_min_balance_expr = 201
    RULE_pyteal_global_max_txn_life_expr = 202
    RULE_pyteal_global_zero_address_expr = 203
    RULE_pyteal_global_group_size_expr = 204
    RULE_pyteal_global_logic_sig_version_expr = 205
    RULE_pyteal_global_round_expr = 206
    RULE_pyteal_global_latest_timestamp_expr = 207
    RULE_pyteal_global_current_application_id_expr = 208
    RULE_pyteal_global_creator_address_expr = 209
    RULE_pyteal_global_current_application_address_expr = 210
    RULE_pyteal_global_group_id_expr = 211
    RULE_atom_expr = 212
    RULE_atom = 213
    RULE_name = 214
    RULE_testlist_comp = 215
    RULE_trailer = 216
    RULE_subscriptlist = 217
    RULE_subscript_ = 218
    RULE_sliceop = 219
    RULE_exprlist = 220
    RULE_testlist = 221
    RULE_dictorsetmaker = 222
    RULE_classdef = 223
    RULE_arglist = 224
    RULE_argument = 225
    RULE_comp_iter = 226
    RULE_comp_for = 227
    RULE_comp_if = 228
    RULE_encoding_decl = 229
    RULE_yield_expr = 230
    RULE_yield_arg = 231
    RULE_strings = 232

    ruleNames =  [ "file_input", "single_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "parameters", "typedargslist", "tfpdef", "varargslist", 
                   "vfpdef", "stmt", "simple_stmts", "simple_stmt", "expr_stmt", 
                   "annassign", "testlist_star_expr", "augassign", "del_stmt", 
                   "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", 
                   "with_stmt", "with_item", "except_clause", "block", "match_stmt", 
                   "subject_expr", "star_named_expressions", "star_named_expression", 
                   "case_block", "guard", "patterns", "pattern", "as_pattern", 
                   "or_pattern", "closed_pattern", "literal_pattern", "literal_expr", 
                   "complex_number", "signed_number", "signed_real_number", 
                   "real_number", "imaginary_number", "capture_pattern", 
                   "pattern_capture_target", "wildcard_pattern", "value_pattern", 
                   "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
                   "open_sequence_pattern", "maybe_sequence_pattern", "maybe_star_pattern", 
                   "star_pattern", "mapping_pattern", "items_pattern", "key_value_pattern", 
                   "double_star_pattern", "class_pattern", "positional_patterns", 
                   "keyword_patterns", "keyword_pattern", "test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "pyteal_data_expr", 
                   "pyteal_integers_expr", "pyteal_bytes_expr", "pyteal_bytes_base", 
                   "pyteal_conversion_expr", "pyteal_arithmetic_operations", 
                   "pyteal_comparison", "pyteal_comp_op", "pyteal_bytes_comparison", 
                   "pyteal_bytes_comp_op", "pyteal_or_expr", "pyteal_and_expr", 
                   "pyteal_not_expr", "pyteal_exp_expr", "pyteal_add_expr", 
                   "pyteal_minus_expr", "pyteal_bitwise_not_expr", "pyteal_mul_expr", 
                   "pyteal_div_expr", "pyteal_mod_expr", "pyteal_bitwise_and_expr", 
                   "pyteal_bitwise_xor_expr", "pyteal_bitwise_or_expr", 
                   "pyteal_bytes_or_expr", "pyteal_bytes_and_expr", "pyteal_bytes_not_expr", 
                   "pyteal_bytes_mul_expr", "pyteal_bytes_div_expr", "pyteal_bytes_mod_expr", 
                   "pyteal_bytes_add_expr", "pyteal_bytes_minus_expr", "pyteal_bytes_xor_expr", 
                   "pyteal_bytes_zero_expr", "pyteal_txn_expr", "pyteal_txn_type_expr", 
                   "pyteal_txn_type_enum_expr", "pyteal_txn_sender_expr", 
                   "pyteal_txn_fee_expr", "pyteal_txn_first_valid_expr", 
                   "pyteal_txn_first_valid_time_expr", "pyteal_txn_last_valid_expr", 
                   "pyteal_txn_note_expr", "pyteal_txn_lease_expr", "pyteal_txn_group_index_expr", 
                   "pyteal_txn_tx_id_expr", "pyteal_txn_rekey_to_expr", 
                   "pyteal_txn_application_id_expr", "pyteal_txn_on_completion_expr", 
                   "pyteal_txn_approval_program_expr", "pyteal_txn_global_num_uints_expr", 
                   "pyteal_txn_global_num_byte_slices_expr", "pyteal_txn_local_num_uints_expr", 
                   "pyteal_txn_local_num_byte_slices_expr", "pyteal_txn_accounts_expr", 
                   "pyteal_txn_assets_expr", "pyteal_txn_applications_expr", 
                   "pyteal_txn_clear_state_program_expr", "pyteal_txn_extra_program_pages_expr", 
                   "pyteal_txn_application_args_expr", "pyteal_txn_created_application_id_expr", 
                   "pyteal_txn_logs_expr", "pyteal_txn_last_log_expr", "pyteal_txn_approval_program_pages_expr", 
                   "pyteal_txn_clear_state_program_pages_expr", "pyteal_txn_config_asset_expr", 
                   "pyteal_txn_config_asset_total_expr", "pyteal_txn_config_asset_decimals_expr", 
                   "pyteal_txn_config_asset_default_frozen_expr", "pyteal_txn_config_asset_unit_name_expr", 
                   "pyteal_txn_config_asset_name_expr", "pyteal_txn_config_asset_url_expr", 
                   "pyteal_txn_config_asset_metadata_hash_expr", "pyteal_txn_config_asset_manager_expr", 
                   "pyteal_txn_config_asset_reserve_expr", "pyteal_txn_config_asset_freeze_expr", 
                   "pyteal_txn_config_asset_clawback_expr", "pyteal_txn_created_asset_id_expr", 
                   "pyteal_txn_freeze_asset_expr", "pyteal_txn_freeze_asset_account_expr", 
                   "pyteal_txn_freeze_asset_frozen_expr", "pyteal_txn_xfer_asset_expr", 
                   "pyteal_txn_asset_amount_expr", "pyteal_txn_asset_sender_expr", 
                   "pyteal_txn_asset_receiver_expr", "pyteal_txn_asset_close_to_expr", 
                   "pyteal_txn_vote_pk_expr", "pyteal_txn_selection_pk_expr", 
                   "pyteal_txn_state_proof_pk_expr", "pyteal_txn_vote_first_expr", 
                   "pyteal_txn_vote_last_expr", "pyteal_txn_vote_key_dilution_expr", 
                   "pyteal_txn_nonparticipation_expr", "pyteal_txn_receiver_expr", 
                   "pyteal_txn_amount_expr", "pyteal_txn_close_remainder_to_expr", 
                   "pyteal_txntype_Unknown_expr", "pyteal_txntype_Payment_expr", 
                   "pyteal_txntype_KeyRegistration_expr", "pyteal_txntype_AssetConfig_expr", 
                   "pyteal_txntype_AssetTransfer_expr", "pyteal_txntype_AssetFreeze_expr", 
                   "pyteal_txntype_ApplicationCall_expr", "pyteal_global_min_txn_fee_expr", 
                   "pyteal_global_min_balance_expr", "pyteal_global_max_txn_life_expr", 
                   "pyteal_global_zero_address_expr", "pyteal_global_group_size_expr", 
                   "pyteal_global_logic_sig_version_expr", "pyteal_global_round_expr", 
                   "pyteal_global_latest_timestamp_expr", "pyteal_global_current_application_id_expr", 
                   "pyteal_global_creator_address_expr", "pyteal_global_current_application_address_expr", 
                   "pyteal_global_group_id_expr", "atom_expr", "atom", "name", 
                   "testlist_comp", "trailer", "subscriptlist", "subscript_", 
                   "sliceop", "exprlist", "testlist", "dictorsetmaker", 
                   "classdef", "arglist", "argument", "comp_iter", "comp_for", 
                   "comp_if", "encoding_decl", "yield_expr", "yield_arg", 
                   "strings" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    PYTEAL_INT=3
    PYTEAL_BYTE=4
    PYTEAL_BYTE_BASE16=5
    PYTEAL_BYTE_BASE32=6
    PYTEAL_BYTE_BASE64=7
    PYTEAL_ITOB=8
    PYTEAL_BTOI=9
    PYTEAL_LT=10
    PYTEAL_GT=11
    PYTEAL_LE=12
    PYTEAL_GE=13
    PYTEAL_ADD=14
    PYTEAL_MINUS=15
    PYTEAL_MUL=16
    PYTEAL_DIV=17
    PYTEAL_MOD=18
    PYTEAL_EXP=19
    PYTEAL_EQ=20
    PYTEAL_NEQ=21
    PYTEAL_AND=22
    PYTEAL_OR=23
    PYTEAL_NOT=24
    PYTEAL_BITWISEAND=25
    PYTEAL_BITWISEOR=26
    PYTEAL_BITWISEXOR=27
    PYTEAL_BITWISENOT=28
    PYTEAL_BYTES_LT=29
    PYTEAL_BYTES_GT=30
    PYTEAL_BYTES_LE=31
    PYTEAL_BYTES_GE=32
    PYTEAL_BYTES_ADD=33
    PYTEAL_BYTES_MINUS=34
    PYTEAL_BYTES_MUL=35
    PYTEAL_BYTES_DIV=36
    PYTEAL_BYTES_MOD=37
    PYTEAL_BYTES_EQ=38
    PYTEAL_BYTES_NEQ=39
    PYTEAL_BYTES_AND=40
    PYTEAL_BYTES_OR=41
    PYTEAL_BYTES_NOT=42
    PYTEAL_BYTES_XOR=43
    PYTEAL_BYTES_ZERO=44
    PYTEAL_TXN=45
    PYTEAL_INNERTXN=46
    PYTEAL_TXNTYPE=47
    PYTEAL_GLOBAL=48
    AND=49
    AS=50
    ASSERT=51
    ASYNC=52
    AWAIT=53
    BREAK=54
    CASE=55
    CLASS=56
    CONTINUE=57
    DEF=58
    DEL=59
    ELIF=60
    ELSE=61
    EXCEPT=62
    FALSE=63
    FINALLY=64
    FOR=65
    FROM=66
    GLOBAL=67
    IF=68
    IMPORT=69
    IN=70
    IS=71
    LAMBDA=72
    MATCH=73
    NONE=74
    NONLOCAL=75
    NOT=76
    OR=77
    PASS=78
    RAISE=79
    RETURN=80
    TRUE=81
    TRY=82
    UNDERSCORE=83
    WHILE=84
    WITH=85
    YIELD=86
    DOT=87
    ELLIPSIS=88
    STAR=89
    OPEN_PAREN=90
    CLOSE_PAREN=91
    COMMA=92
    COLON=93
    SEMI_COLON=94
    POWER=95
    ASSIGN=96
    OPEN_BRACK=97
    CLOSE_BRACK=98
    OR_OP=99
    XOR=100
    AND_OP=101
    LEFT_SHIFT=102
    RIGHT_SHIFT=103
    ADD=104
    MINUS=105
    DIV=106
    MOD=107
    IDIV=108
    NOT_OP=109
    OPEN_BRACE=110
    CLOSE_BRACE=111
    LESS_THAN=112
    GREATER_THAN=113
    EQUALS=114
    GT_EQ=115
    LT_EQ=116
    NOT_EQ_1=117
    NOT_EQ_2=118
    AT=119
    ARROW=120
    ADD_ASSIGN=121
    SUB_ASSIGN=122
    MULT_ASSIGN=123
    AT_ASSIGN=124
    DIV_ASSIGN=125
    MOD_ASSIGN=126
    AND_ASSIGN=127
    OR_ASSIGN=128
    XOR_ASSIGN=129
    LEFT_SHIFT_ASSIGN=130
    RIGHT_SHIFT_ASSIGN=131
    POWER_ASSIGN=132
    IDIV_ASSIGN=133
    STRING=134
    NUMBER=135
    INTEGER=136
    NEWLINE=137
    NAME=138
    STRING_LITERAL=139
    BYTES_LITERAL=140
    DECIMAL_INTEGER=141
    OCT_INTEGER=142
    HEX_INTEGER=143
    BIN_INTEGER=144
    FLOAT_NUMBER=145
    IMAG_NUMBER=146
    SKIP_=147
    UNKNOWN_CHAR=148
    PYTEAL_DOT=149
    PYTEAL_TXN_TYPE=150
    PYTEAL_TXN_TYPE_ENUM=151
    PYTEAL_TXN_SENDER=152
    PYTEAL_TXN_FEE=153
    PYTEAL_TXN_FIRST_VALID=154
    PYTEAL_TXN_FIRST_VALID_TIME=155
    PYTEAL_TXN_LAST_VALID=156
    PYTEAL_TXN_NOTE=157
    PYTEAL_TXN_LEASE=158
    PYTEAL_TXN_GROUP_INDEX=159
    PYTEAL_TXN_TXN_ID=160
    PYTEAL_TXN_REKEY_TO=161
    PYTEAL_TXN_APPLICATION_ID=162
    PYTEAL_TXN_ON_COMPLETION=163
    PYTEAL_TXN_APPROVAL_PROGRAM=164
    PYTEAL_TXN_GLOBAL_NUM_UINTS=165
    PYTEAL_TXN_GLOBAL_NUM_BYTE_SLICES=166
    PYTEAL_TXN_GLOBAL_LOCAL_NUM_UINTS=167
    PYTEAL_TXN_LOCAL_NUM_BYTE_SLICES=168
    PYTEAL_TXN_ACCOUNTS=169
    PYTEAL_TXN_ASSETS=170
    PYTEAL_TXN_APPLICATIONS=171
    PYTEAL_TXN_CLEAR_STATE_PROGRAM=172
    PYTEAL_TXN_EXTRA_PROGRAM_PAGES=173
    PYTEAL_TXN_APPLICATION_ARGS=174
    PYTEAL_TXN_CREATED_APPLICATION_ID=175
    PYTEAL_TXN_LOGS=176
    PYTEAL_TXN_LAST_LOG=177
    PYTEAL_TXN_APPROVAL_PROGRAM_PAGES=178
    PYTEAL_TXN_CLEAR_STATE_PROGRAM_PAGES=179
    PYTEAL_TXN_CONFIG_ASSET=180
    PYTEAL_TXN_CONFIG_ASSET_TOTAL=181
    PYTEAL_TXN_CONFIG_ASSET_DECIMALS=182
    PYTEAL_TXN_CONFIG_ASSET_DEFAULT_FROZEN=183
    PYTEAL_TXN_CONFIG_ASSET_UNIT_NAME=184
    PYTEAL_TXN_CONFIG_ASSET_NAME=185
    PYTEAL_TXN_CONFIG_ASSET_URL=186
    PYTEAL_TXN_CONFIG_ASSET_METADATA_HASH=187
    PYTEAL_TXN_CONFIG_ASSET_MANAGER=188
    PYTEAL_TXN_CONFIG_ASSET_RESERVE=189
    PYTEAL_TXN_CONFIG_ASSET_FREEZE=190
    PYTEAL_TXN_CONFIG_ASSET_CLAWBACK=191
    PYTEAL_TXN_CREATED_ASSET_ID=192
    PYTEAL_TXN_FREEZE_ASSET=193
    PYTEAL_TXN_FREEZE_ASSET_ACCOUNT=194
    PYTEAL_TXN_FREEZE_ASSET_FROZEN=195
    PYTEAL_TXN_XFER_ASSET=196
    PYTEAL_TXN_ASSET_AMOUNT=197
    PYTEAL_TXN_ASSET_SENDER=198
    PYTEAL_TXN_ASSET_RECEIVER=199
    PYTEAL_TXN_ASSET_CLOSE_TO=200
    PYTEAL_TXN_VOTE_PK=201
    PYTEAL_TXN_SELECTION_PK=202
    PYTEAL_TXN_STATE_PROOF_PK=203
    PYTEAL_TXN_VOTE_FIRST=204
    PYTEAL_TXN_VOTE_LAST=205
    PYTEAL_TXN_VOTE_KEY_DILUTION=206
    PYTEAL_TXN_NONPARTICIPATION=207
    PYTEAL_TXN_RECEIVER=208
    PYTEAL_TXN_AMOUNT=209
    PYTEAL_TXN_CLOSE_REMAINDER_TO=210
    PYTEAL_TXNTYPE_UNKNOWN=211
    PYTEAL_TXNTYPE_PAYMENT=212
    PYTEAL_TXNTYPE_KEYREGISTRATION=213
    PYTEAL_TXNTYPE_ASSETCONFIG=214
    PYTEAL_TXNTYPE_ASSETTRANSFER=215
    PYTEAL_TXNTYPE_ASSETFREEZE=216
    PYTEAL_TXNTYPE_APPLICATIONCALL=217
    PYTEAL_GLOBAL_MIN_TXN_FEE=218
    PYTEAL_GLOBAL_MIN_BALANCE=219
    PYTEAL_GLOBAL_MAX_TXN_LIFE=220
    PYTEAL_GLOBAL_ZERO_ADDRESS=221
    PYTEAL_GLOBAL_GROUP_SIZE=222
    PYTEAL_GLOBAL_LOGIC_SIG_VERSION=223
    PYTEAL_GLOBAL_ROUND=224
    PYTEAL_GLOBAL_LATEST_TIMESTAMP=225
    PYTEAL_GLOBAL_CURRENT_APPLICATION_ID=226
    PYTEAL_GLOBAL_CREATOR_ADDRESS=227
    PYTEAL_GLOBAL_CURRENT_APPLICATION_ADDRESS=228
    PYTEAL_GLOBAL_GROUP_ID=229

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PyTealParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.NEWLINE)
            else:
                return self.getToken(PyTealParser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.StmtContext)
            else:
                return self.getTypedRuleContext(PyTealParser.StmtContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = PyTealParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8108238547871334632) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 18068828692934559) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 27) != 0):
                self.state = 468
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [137]:
                    self.state = 466
                    self.match(PyTealParser.NEWLINE)
                    pass
                elif token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 63, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 97, 104, 105, 109, 110, 119, 134, 135, 138]:
                    self.state = 467
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 473
            self.match(PyTealParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PyTealParser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(PyTealParser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = PyTealParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_input)
        try:
            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 475
                self.match(PyTealParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 476
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 477
                self.compound_stmt()
                self.state = 478
                self.match(PyTealParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(PyTealParser.TestlistContext,0)


        def EOF(self):
            return self.getToken(PyTealParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.NEWLINE)
            else:
                return self.getToken(PyTealParser.NEWLINE, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = PyTealParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.testlist()
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 483
                self.match(PyTealParser.NEWLINE)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 489
            self.match(PyTealParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(PyTealParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PyTealParser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(PyTealParser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(PyTealParser.ArglistContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = PyTealParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(PyTealParser.AT)
            self.state = 492
            self.dotted_name()
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 493
                self.match(PyTealParser.OPEN_PAREN)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593183221225) != 0) or _la==138:
                    self.state = 494
                    self.arglist()


                self.state = 497
                self.match(PyTealParser.CLOSE_PAREN)


            self.state = 500
            self.match(PyTealParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(PyTealParser.DecoratorContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = PyTealParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 502
                self.decorator()
                self.state = 505 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==119):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PyTealParser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PyTealParser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PyTealParser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(PyTealParser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = PyTealParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.decorators()
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.state = 508
                self.classdef()
                pass
            elif token in [58]:
                self.state = 509
                self.funcdef()
                pass
            elif token in [52]:
                self.state = 510
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_funcdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(PyTealParser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(PyTealParser.FuncdefContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_async_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_funcdef" ):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_funcdef" ):
                listener.exitAsync_funcdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_funcdef" ):
                return visitor.visitAsync_funcdef(self)
            else:
                return visitor.visitChildren(self)




    def async_funcdef(self):

        localctx = PyTealParser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(PyTealParser.ASYNC)
            self.state = 514
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PyTealParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def parameters(self):
            return self.getTypedRuleContext(PyTealParser.ParametersContext,0)


        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PyTealParser.BlockContext,0)


        def ARROW(self):
            return self.getToken(PyTealParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = PyTealParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(PyTealParser.DEF)
            self.state = 517
            self.name()
            self.state = 518
            self.parameters()
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 519
                self.match(PyTealParser.ARROW)
                self.state = 520
                self.test()


            self.state = 523
            self.match(PyTealParser.COLON)
            self.state = 524
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(PyTealParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = PyTealParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 4260865) != 0) or _la==138:
                self.state = 527
                self.typedargslist()


            self.state = 530
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TfpdefContext,i)


        def STAR(self):
            return self.getToken(PyTealParser.STAR, 0)

        def POWER(self):
            return self.getToken(PyTealParser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.ASSIGN)
            else:
                return self.getToken(PyTealParser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = PyTealParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [73, 83, 138]:
                self.state = 532
                self.tfpdef()
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 533
                    self.match(PyTealParser.ASSIGN)
                    self.state = 534
                    self.test()


                self.state = 545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 537
                        self.match(PyTealParser.COMMA)
                        self.state = 538
                        self.tfpdef()
                        self.state = 541
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==96:
                            self.state = 539
                            self.match(PyTealParser.ASSIGN)
                            self.state = 540
                            self.test()

                 
                    self.state = 547
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 548
                    self.match(PyTealParser.COMMA)
                    self.state = 579
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [89]:
                        self.state = 549
                        self.match(PyTealParser.STAR)
                        self.state = 551
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==73 or _la==83 or _la==138:
                            self.state = 550
                            self.tfpdef()


                        self.state = 561
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 553
                                self.match(PyTealParser.COMMA)
                                self.state = 554
                                self.tfpdef()
                                self.state = 557
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==96:
                                    self.state = 555
                                    self.match(PyTealParser.ASSIGN)
                                    self.state = 556
                                    self.test()

                         
                            self.state = 563
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 572
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==92:
                            self.state = 564
                            self.match(PyTealParser.COMMA)
                            self.state = 570
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==95:
                                self.state = 565
                                self.match(PyTealParser.POWER)
                                self.state = 566
                                self.tfpdef()
                                self.state = 568
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==92:
                                    self.state = 567
                                    self.match(PyTealParser.COMMA)






                        pass
                    elif token in [95]:
                        self.state = 574
                        self.match(PyTealParser.POWER)
                        self.state = 575
                        self.tfpdef()
                        self.state = 577
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==92:
                            self.state = 576
                            self.match(PyTealParser.COMMA)


                        pass
                    elif token in [91]:
                        pass
                    else:
                        pass


                pass
            elif token in [89]:
                self.state = 583
                self.match(PyTealParser.STAR)
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73 or _la==83 or _la==138:
                    self.state = 584
                    self.tfpdef()


                self.state = 595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 587
                        self.match(PyTealParser.COMMA)
                        self.state = 588
                        self.tfpdef()
                        self.state = 591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==96:
                            self.state = 589
                            self.match(PyTealParser.ASSIGN)
                            self.state = 590
                            self.test()

                 
                    self.state = 597
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 598
                    self.match(PyTealParser.COMMA)
                    self.state = 604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==95:
                        self.state = 599
                        self.match(PyTealParser.POWER)
                        self.state = 600
                        self.tfpdef()
                        self.state = 602
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==92:
                            self.state = 601
                            self.match(PyTealParser.COMMA)






                pass
            elif token in [95]:
                self.state = 608
                self.match(PyTealParser.POWER)
                self.state = 609
                self.tfpdef()
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 610
                    self.match(PyTealParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = PyTealParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.name()
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 616
                self.match(PyTealParser.COLON)
                self.state = 617
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(PyTealParser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(PyTealParser.STAR, 0)

        def POWER(self):
            return self.getToken(PyTealParser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.ASSIGN)
            else:
                return self.getToken(PyTealParser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = PyTealParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [73, 83, 138]:
                self.state = 620
                self.vfpdef()
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 621
                    self.match(PyTealParser.ASSIGN)
                    self.state = 622
                    self.test()


                self.state = 633
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 625
                        self.match(PyTealParser.COMMA)
                        self.state = 626
                        self.vfpdef()
                        self.state = 629
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==96:
                            self.state = 627
                            self.match(PyTealParser.ASSIGN)
                            self.state = 628
                            self.test()

                 
                    self.state = 635
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 636
                    self.match(PyTealParser.COMMA)
                    self.state = 667
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [89]:
                        self.state = 637
                        self.match(PyTealParser.STAR)
                        self.state = 639
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==73 or _la==83 or _la==138:
                            self.state = 638
                            self.vfpdef()


                        self.state = 649
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 641
                                self.match(PyTealParser.COMMA)
                                self.state = 642
                                self.vfpdef()
                                self.state = 645
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==96:
                                    self.state = 643
                                    self.match(PyTealParser.ASSIGN)
                                    self.state = 644
                                    self.test()

                         
                            self.state = 651
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                        self.state = 660
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==92:
                            self.state = 652
                            self.match(PyTealParser.COMMA)
                            self.state = 658
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==95:
                                self.state = 653
                                self.match(PyTealParser.POWER)
                                self.state = 654
                                self.vfpdef()
                                self.state = 656
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==92:
                                    self.state = 655
                                    self.match(PyTealParser.COMMA)






                        pass
                    elif token in [95]:
                        self.state = 662
                        self.match(PyTealParser.POWER)
                        self.state = 663
                        self.vfpdef()
                        self.state = 665
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==92:
                            self.state = 664
                            self.match(PyTealParser.COMMA)


                        pass
                    elif token in [93]:
                        pass
                    else:
                        pass


                pass
            elif token in [89]:
                self.state = 671
                self.match(PyTealParser.STAR)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73 or _la==83 or _la==138:
                    self.state = 672
                    self.vfpdef()


                self.state = 683
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 675
                        self.match(PyTealParser.COMMA)
                        self.state = 676
                        self.vfpdef()
                        self.state = 679
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==96:
                            self.state = 677
                            self.match(PyTealParser.ASSIGN)
                            self.state = 678
                            self.test()

                 
                    self.state = 685
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 686
                    self.match(PyTealParser.COMMA)
                    self.state = 692
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==95:
                        self.state = 687
                        self.match(PyTealParser.POWER)
                        self.state = 688
                        self.vfpdef()
                        self.state = 690
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==92:
                            self.state = 689
                            self.match(PyTealParser.COMMA)






                pass
            elif token in [95]:
                self.state = 696
                self.match(PyTealParser.POWER)
                self.state = 697
                self.vfpdef()
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 698
                    self.match(PyTealParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = PyTealParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(PyTealParser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = PyTealParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stmt)
        try:
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 705
                self.simple_stmts()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Simple_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(PyTealParser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.SEMI_COLON)
            else:
                return self.getToken(PyTealParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_simple_stmts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmts" ):
                listener.enterSimple_stmts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmts" ):
                listener.exitSimple_stmts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmts" ):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmts(self):

        localctx = PyTealParser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_simple_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.simple_stmt()
            self.state = 714
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 710
                    self.match(PyTealParser.SEMI_COLON)
                    self.state = 711
                    self.simple_stmt() 
                self.state = 716
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 717
                self.match(PyTealParser.SEMI_COLON)


            self.state = 720
            self.match(PyTealParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = PyTealParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_simple_stmt)
        try:
            self.state = 730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 89, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 722
                self.expr_stmt()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 723
                self.del_stmt()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 3)
                self.state = 724
                self.pass_stmt()
                pass
            elif token in [54, 57, 79, 80, 86]:
                self.enterOuterAlt(localctx, 4)
                self.state = 725
                self.flow_stmt()
                pass
            elif token in [66, 69]:
                self.enterOuterAlt(localctx, 5)
                self.state = 726
                self.import_stmt()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 6)
                self.state = 727
                self.global_stmt()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 7)
                self.state = 728
                self.nonlocal_stmt()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 8)
                self.state = 729
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Testlist_star_exprContext,i)


        def annassign(self):
            return self.getTypedRuleContext(PyTealParser.AnnassignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(PyTealParser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(PyTealParser.TestlistContext,0)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.ASSIGN)
            else:
                return self.getToken(PyTealParser.ASSIGN, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = PyTealParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.testlist_star_expr()
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.state = 733
                self.annassign()
                pass
            elif token in [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133]:
                self.state = 734
                self.augassign()
                self.state = 737
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [86]:
                    self.state = 735
                    self.yield_expr()
                    pass
                elif token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                    self.state = 736
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [94, 96, 137]:
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==96:
                    self.state = 739
                    self.match(PyTealParser.ASSIGN)
                    self.state = 742
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [86]:
                        self.state = 740
                        self.yield_expr()
                        pass
                    elif token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 89, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                        self.state = 741
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 748
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(PyTealParser.ASSIGN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_annassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnassign" ):
                listener.enterAnnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnassign" ):
                listener.exitAnnassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnassign" ):
                return visitor.visitAnnassign(self)
            else:
                return visitor.visitChildren(self)




    def annassign(self):

        localctx = PyTealParser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(PyTealParser.COLON)
            self.state = 752
            self.test()
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 753
                self.match(PyTealParser.ASSIGN)
                self.state = 754
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = PyTealParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.state = 757
                self.test()
                pass
            elif token in [89]:
                self.state = 758
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 768
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 761
                    self.match(PyTealParser.COMMA)
                    self.state = 764
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                        self.state = 762
                        self.test()
                        pass
                    elif token in [89]:
                        self.state = 763
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 771
                self.match(PyTealParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(PyTealParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(PyTealParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(PyTealParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(PyTealParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(PyTealParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(PyTealParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(PyTealParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(PyTealParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(PyTealParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(PyTealParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(PyTealParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(PyTealParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(PyTealParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = PyTealParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            _la = self._input.LA(1)
            if not(((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & 8191) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(PyTealParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PyTealParser.ExprlistContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = PyTealParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(PyTealParser.DEL)
            self.state = 777
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(PyTealParser.PASS, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = PyTealParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(PyTealParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flow_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = PyTealParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_flow_stmt)
        try:
            self.state = 786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 781
                self.break_stmt()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.continue_stmt()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 3)
                self.state = 783
                self.return_stmt()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 4)
                self.state = 784
                self.raise_stmt()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 5)
                self.state = 785
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(PyTealParser.BREAK, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = PyTealParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(PyTealParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(PyTealParser.CONTINUE, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = PyTealParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(PyTealParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PyTealParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PyTealParser.TestlistContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = PyTealParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(PyTealParser.RETURN)
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593191740905) != 0) or _la==138:
                self.state = 793
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PyTealParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = PyTealParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PyTealParser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def FROM(self):
            return self.getToken(PyTealParser.FROM, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = PyTealParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(PyTealParser.RAISE)
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593191740905) != 0) or _la==138:
                self.state = 799
                self.test()
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 800
                    self.match(PyTealParser.FROM)
                    self.state = 801
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(PyTealParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(PyTealParser.Import_fromContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = PyTealParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_stmt)
        try:
            self.state = 808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self.import_name()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(PyTealParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(PyTealParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = PyTealParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(PyTealParser.IMPORT)
            self.state = 811
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PyTealParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(PyTealParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PyTealParser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(PyTealParser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(PyTealParser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.DOT)
            else:
                return self.getToken(PyTealParser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.ELLIPSIS)
            else:
                return self.getToken(PyTealParser.ELLIPSIS, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = PyTealParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(PyTealParser.FROM)
            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==87 or _la==88:
                    self.state = 814
                    _la = self._input.LA(1)
                    if not(_la==87 or _la==88):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 820
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 822 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 821
                    _la = self._input.LA(1)
                    if not(_la==87 or _la==88):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 824 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==87 or _la==88):
                        break

                pass


            self.state = 828
            self.match(PyTealParser.IMPORT)
            self.state = 835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.state = 829
                self.match(PyTealParser.STAR)
                pass
            elif token in [90]:
                self.state = 830
                self.match(PyTealParser.OPEN_PAREN)
                self.state = 831
                self.import_as_names()
                self.state = 832
                self.match(PyTealParser.CLOSE_PAREN)
                pass
            elif token in [73, 83, 138]:
                self.state = 834
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.NameContext)
            else:
                return self.getTypedRuleContext(PyTealParser.NameContext,i)


        def AS(self):
            return self.getToken(PyTealParser.AS, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = PyTealParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.name()
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 838
                self.match(PyTealParser.AS)
                self.state = 839
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PyTealParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PyTealParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = PyTealParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.dotted_name()
            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 843
                self.match(PyTealParser.AS)
                self.state = 844
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = PyTealParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.import_as_name()
            self.state = 852
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 848
                    self.match(PyTealParser.COMMA)
                    self.state = 849
                    self.import_as_name() 
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 855
                self.match(PyTealParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = PyTealParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.dotted_as_name()
            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==92:
                self.state = 859
                self.match(PyTealParser.COMMA)
                self.state = 860
                self.dotted_as_name()
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.NameContext)
            else:
                return self.getTypedRuleContext(PyTealParser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.DOT)
            else:
                return self.getToken(PyTealParser.DOT, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = PyTealParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.name()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==87:
                self.state = 867
                self.match(PyTealParser.DOT)
                self.state = 868
                self.name()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(PyTealParser.GLOBAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.NameContext)
            else:
                return self.getTypedRuleContext(PyTealParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = PyTealParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(PyTealParser.GLOBAL)
            self.state = 875
            self.name()
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==92:
                self.state = 876
                self.match(PyTealParser.COMMA)
                self.state = 877
                self.name()
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(PyTealParser.NONLOCAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.NameContext)
            else:
                return self.getTypedRuleContext(PyTealParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = PyTealParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(PyTealParser.NONLOCAL)
            self.state = 884
            self.name()
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==92:
                self.state = 885
                self.match(PyTealParser.COMMA)
                self.state = 886
                self.name()
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(PyTealParser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self):
            return self.getToken(PyTealParser.COMMA, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = PyTealParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(PyTealParser.ASSERT)
            self.state = 893
            self.test()
            self.state = 896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 894
                self.match(PyTealParser.COMMA)
                self.state = 895
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(PyTealParser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(PyTealParser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(PyTealParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(PyTealParser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(PyTealParser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(PyTealParser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(PyTealParser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Async_stmtContext,0)


        def match_stmt(self):
            return self.getTypedRuleContext(PyTealParser.Match_stmtContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = PyTealParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_compound_stmt)
        try:
            self.state = 908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 898
                self.if_stmt()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self.while_stmt()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 900
                self.for_stmt()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 4)
                self.state = 901
                self.try_stmt()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 5)
                self.state = 902
                self.with_stmt()
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 6)
                self.state = 903
                self.funcdef()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 7)
                self.state = 904
                self.classdef()
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 8)
                self.state = 905
                self.decorated()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 9)
                self.state = 906
                self.async_stmt()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 10)
                self.state = 907
                self.match_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(PyTealParser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(PyTealParser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(PyTealParser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(PyTealParser.For_stmtContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_async_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_stmt" ):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_stmt" ):
                listener.exitAsync_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_stmt" ):
                return visitor.visitAsync_stmt(self)
            else:
                return visitor.visitChildren(self)




    def async_stmt(self):

        localctx = PyTealParser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(PyTealParser.ASYNC)
            self.state = 914
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.state = 911
                self.funcdef()
                pass
            elif token in [85]:
                self.state = 912
                self.with_stmt()
                pass
            elif token in [65]:
                self.state = 913
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PyTealParser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COLON)
            else:
                return self.getToken(PyTealParser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.BlockContext)
            else:
                return self.getTypedRuleContext(PyTealParser.BlockContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.ELIF)
            else:
                return self.getToken(PyTealParser.ELIF, i)

        def ELSE(self):
            return self.getToken(PyTealParser.ELSE, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = PyTealParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.match(PyTealParser.IF)
            self.state = 917
            self.test()
            self.state = 918
            self.match(PyTealParser.COLON)
            self.state = 919
            self.block()
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 920
                self.match(PyTealParser.ELIF)
                self.state = 921
                self.test()
                self.state = 922
                self.match(PyTealParser.COLON)
                self.state = 923
                self.block()
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 930
                self.match(PyTealParser.ELSE)
                self.state = 931
                self.match(PyTealParser.COLON)
                self.state = 932
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PyTealParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COLON)
            else:
                return self.getToken(PyTealParser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.BlockContext)
            else:
                return self.getTypedRuleContext(PyTealParser.BlockContext,i)


        def ELSE(self):
            return self.getToken(PyTealParser.ELSE, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = PyTealParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(PyTealParser.WHILE)
            self.state = 936
            self.test()
            self.state = 937
            self.match(PyTealParser.COLON)
            self.state = 938
            self.block()
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 939
                self.match(PyTealParser.ELSE)
                self.state = 940
                self.match(PyTealParser.COLON)
                self.state = 941
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PyTealParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PyTealParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PyTealParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(PyTealParser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COLON)
            else:
                return self.getToken(PyTealParser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.BlockContext)
            else:
                return self.getTypedRuleContext(PyTealParser.BlockContext,i)


        def ELSE(self):
            return self.getToken(PyTealParser.ELSE, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = PyTealParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(PyTealParser.FOR)
            self.state = 945
            self.exprlist()
            self.state = 946
            self.match(PyTealParser.IN)
            self.state = 947
            self.testlist()
            self.state = 948
            self.match(PyTealParser.COLON)
            self.state = 949
            self.block()
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 950
                self.match(PyTealParser.ELSE)
                self.state = 951
                self.match(PyTealParser.COLON)
                self.state = 952
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(PyTealParser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COLON)
            else:
                return self.getToken(PyTealParser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.BlockContext)
            else:
                return self.getTypedRuleContext(PyTealParser.BlockContext,i)


        def FINALLY(self):
            return self.getToken(PyTealParser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(PyTealParser.ELSE, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = PyTealParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(PyTealParser.TRY)
            self.state = 956
            self.match(PyTealParser.COLON)
            self.state = 957
            self.block()
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62]:
                self.state = 962 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 958
                    self.except_clause()
                    self.state = 959
                    self.match(PyTealParser.COLON)
                    self.state = 960
                    self.block()
                    self.state = 964 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==62):
                        break

                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 966
                    self.match(PyTealParser.ELSE)
                    self.state = 967
                    self.match(PyTealParser.COLON)
                    self.state = 968
                    self.block()


                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 971
                    self.match(PyTealParser.FINALLY)
                    self.state = 972
                    self.match(PyTealParser.COLON)
                    self.state = 973
                    self.block()


                pass
            elif token in [64]:
                self.state = 976
                self.match(PyTealParser.FINALLY)
                self.state = 977
                self.match(PyTealParser.COLON)
                self.state = 978
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PyTealParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PyTealParser.With_itemContext,i)


        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PyTealParser.BlockContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = PyTealParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(PyTealParser.WITH)
            self.state = 982
            self.with_item()
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==92:
                self.state = 983
                self.match(PyTealParser.COMMA)
                self.state = 984
                self.with_item()
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 990
            self.match(PyTealParser.COLON)
            self.state = 991
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def AS(self):
            return self.getToken(PyTealParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(PyTealParser.ExprContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = PyTealParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.test()
            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 994
                self.match(PyTealParser.AS)
                self.state = 995
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PyTealParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def AS(self):
            return self.getToken(PyTealParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = PyTealParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.match(PyTealParser.EXCEPT)
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593191740905) != 0) or _la==138:
                self.state = 999
                self.test()
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1000
                    self.match(PyTealParser.AS)
                    self.state = 1001
                    self.name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(PyTealParser.Simple_stmtsContext,0)


        def NEWLINE(self):
            return self.getToken(PyTealParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PyTealParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PyTealParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.StmtContext)
            else:
                return self.getTypedRuleContext(PyTealParser.StmtContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = PyTealParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.state = 1016
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 53, 54, 57, 59, 63, 66, 67, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 86, 88, 89, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.simple_stmts()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.match(PyTealParser.NEWLINE)
                self.state = 1008
                self.match(PyTealParser.INDENT)
                self.state = 1010 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1009
                    self.stmt()
                    self.state = 1012 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -8108238547871334632) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 18068828692934559) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 19) != 0)):
                        break

                self.state = 1014
                self.match(PyTealParser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(PyTealParser.MATCH, 0)

        def subject_expr(self):
            return self.getTypedRuleContext(PyTealParser.Subject_exprContext,0)


        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(PyTealParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PyTealParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PyTealParser.DEDENT, 0)

        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Case_blockContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Case_blockContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_match_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_stmt" ):
                listener.enterMatch_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_stmt" ):
                listener.exitMatch_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_stmt" ):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)




    def match_stmt(self):

        localctx = PyTealParser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_match_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(PyTealParser.MATCH)
            self.state = 1019
            self.subject_expr()
            self.state = 1020
            self.match(PyTealParser.COLON)
            self.state = 1021
            self.match(PyTealParser.NEWLINE)
            self.state = 1022
            self.match(PyTealParser.INDENT)
            self.state = 1024 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1023
                self.case_block()
                self.state = 1026 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==55):
                    break

            self.state = 1028
            self.match(PyTealParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subject_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(PyTealParser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(PyTealParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PyTealParser.Star_named_expressionsContext,0)


        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_subject_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubject_expr" ):
                listener.enterSubject_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubject_expr" ):
                listener.exitSubject_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubject_expr" ):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)




    def subject_expr(self):

        localctx = PyTealParser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_subject_expr)
        self._la = 0 # Token type
        try:
            self.state = 1036
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1030
                self.star_named_expression()
                self.state = 1031
                self.match(PyTealParser.COMMA)
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1032
                    self.star_named_expressions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def star_named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Star_named_expressionContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Star_named_expressionContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_star_named_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expressions" ):
                listener.enterStar_named_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expressions" ):
                listener.exitStar_named_expressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expressions" ):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expressions(self):

        localctx = PyTealParser.Star_named_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_star_named_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(PyTealParser.COMMA)
            self.state = 1040 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1039
                self.star_named_expression()
                self.state = 1042 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593191609833) != 0) or _la==138):
                    break

            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1044
                self.match(PyTealParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PyTealParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(PyTealParser.ExprContext,0)


        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_star_named_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expression" ):
                listener.enterStar_named_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expression" ):
                listener.exitStar_named_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expression" ):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expression(self):

        localctx = PyTealParser.Star_named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_star_named_expression)
        try:
            self.state = 1050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1047
                self.match(PyTealParser.STAR)
                self.state = 1048
                self.expr(0)
                pass
            elif token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(PyTealParser.CASE, 0)

        def patterns(self):
            return self.getTypedRuleContext(PyTealParser.PatternsContext,0)


        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PyTealParser.BlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(PyTealParser.GuardContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_case_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_block" ):
                listener.enterCase_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_block" ):
                listener.exitCase_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_block" ):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)




    def case_block(self):

        localctx = PyTealParser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(PyTealParser.CASE)
            self.state = 1053
            self.patterns()
            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 1054
                self.guard()


            self.state = 1057
            self.match(PyTealParser.COLON)
            self.state = 1058
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PyTealParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard" ):
                listener.enterGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard" ):
                listener.exitGuard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard" ):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)




    def guard(self):

        localctx = PyTealParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(PyTealParser.IF)
            self.state = 1061
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Open_sequence_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(PyTealParser.PatternContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatterns" ):
                listener.enterPatterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatterns" ):
                listener.exitPatterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatterns" ):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)




    def patterns(self):

        localctx = PyTealParser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_patterns)
        try:
            self.state = 1065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(PyTealParser.As_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Or_patternContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = PyTealParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_pattern)
        try:
            self.state = 1069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1067
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.or_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Or_patternContext,0)


        def AS(self):
            return self.getToken(PyTealParser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PyTealParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_as_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_pattern" ):
                listener.enterAs_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_pattern" ):
                listener.exitAs_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_pattern" ):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)




    def as_pattern(self):

        localctx = PyTealParser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.or_pattern()
            self.state = 1072
            self.match(PyTealParser.AS)
            self.state = 1073
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Closed_patternContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.OR_OP)
            else:
                return self.getToken(PyTealParser.OR_OP, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_pattern" ):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)




    def or_pattern(self):

        localctx = PyTealParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_or_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.closed_pattern()
            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==99:
                self.state = 1076
                self.match(PyTealParser.OR_OP)
                self.state = 1077
                self.closed_pattern()
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closed_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Literal_patternContext,0)


        def capture_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Capture_patternContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Wildcard_patternContext,0)


        def value_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Value_patternContext,0)


        def group_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Group_patternContext,0)


        def sequence_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Sequence_patternContext,0)


        def mapping_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Mapping_patternContext,0)


        def class_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Class_patternContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_closed_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosed_pattern" ):
                listener.enterClosed_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosed_pattern" ):
                listener.exitClosed_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosed_pattern" ):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)




    def closed_pattern(self):

        localctx = PyTealParser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_closed_pattern)
        try:
            self.state = 1091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1083
                self.literal_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1084
                self.capture_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1085
                self.wildcard_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1086
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1087
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1088
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1089
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1090
                self.class_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(PyTealParser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(PyTealParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(PyTealParser.StringsContext,0)


        def NONE(self):
            return self.getToken(PyTealParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PyTealParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PyTealParser.FALSE, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_literal_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_pattern" ):
                listener.enterLiteral_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_pattern" ):
                listener.exitLiteral_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_pattern" ):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)




    def literal_pattern(self):

        localctx = PyTealParser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_literal_pattern)
        try:
            self.state = 1101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1093
                self.signed_number()
                self.state = 1094
                if not  self.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " self.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1096
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1097
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1098
                self.match(PyTealParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1099
                self.match(PyTealParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1100
                self.match(PyTealParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(PyTealParser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(PyTealParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(PyTealParser.StringsContext,0)


        def NONE(self):
            return self.getToken(PyTealParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PyTealParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PyTealParser.FALSE, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_literal_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expr" ):
                listener.enterLiteral_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expr" ):
                listener.exitLiteral_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_expr" ):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)




    def literal_expr(self):

        localctx = PyTealParser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_literal_expr)
        try:
            self.state = 1111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1103
                self.signed_number()
                self.state = 1104
                if not  self.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " self.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1106
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1107
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1108
                self.match(PyTealParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1109
                self.match(PyTealParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1110
                self.match(PyTealParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Complex_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(PyTealParser.Signed_real_numberContext,0)


        def ADD(self):
            return self.getToken(PyTealParser.ADD, 0)

        def imaginary_number(self):
            return self.getTypedRuleContext(PyTealParser.Imaginary_numberContext,0)


        def MINUS(self):
            return self.getToken(PyTealParser.MINUS, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_complex_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex_number" ):
                listener.enterComplex_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex_number" ):
                listener.exitComplex_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex_number" ):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)




    def complex_number(self):

        localctx = PyTealParser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_complex_number)
        try:
            self.state = 1121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1113
                self.signed_real_number()
                self.state = 1114
                self.match(PyTealParser.ADD)
                self.state = 1115
                self.imaginary_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1117
                self.signed_real_number()
                self.state = 1118
                self.match(PyTealParser.MINUS)
                self.state = 1119
                self.imaginary_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PyTealParser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(PyTealParser.MINUS, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = PyTealParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_signed_number)
        try:
            self.state = 1126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1123
                self.match(PyTealParser.NUMBER)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1124
                self.match(PyTealParser.MINUS)
                self.state = 1125
                self.match(PyTealParser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(PyTealParser.Real_numberContext,0)


        def MINUS(self):
            return self.getToken(PyTealParser.MINUS, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_signed_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_real_number" ):
                listener.enterSigned_real_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_real_number" ):
                listener.exitSigned_real_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_real_number" ):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_real_number(self):

        localctx = PyTealParser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_signed_real_number)
        try:
            self.state = 1131
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1128
                self.real_number()
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1129
                self.match(PyTealParser.MINUS)
                self.state = 1130
                self.real_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PyTealParser.NUMBER, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_number" ):
                listener.enterReal_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_number" ):
                listener.exitReal_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReal_number" ):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)




    def real_number(self):

        localctx = PyTealParser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(PyTealParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Imaginary_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PyTealParser.NUMBER, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_imaginary_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImaginary_number" ):
                listener.enterImaginary_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImaginary_number" ):
                listener.exitImaginary_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImaginary_number" ):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)




    def imaginary_number(self):

        localctx = PyTealParser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.match(PyTealParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PyTealParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_capture_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_pattern" ):
                listener.enterCapture_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_pattern" ):
                listener.exitCapture_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_pattern" ):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)




    def capture_pattern(self):

        localctx = PyTealParser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_capture_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_pattern_capture_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_capture_target" ):
                listener.enterPattern_capture_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_capture_target" ):
                listener.exitPattern_capture_target(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern_capture_target" ):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)




    def pattern_capture_target(self):

        localctx = PyTealParser.Pattern_capture_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.name()
            self.state = 1140
            if not  self.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " self.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PyTealParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_wildcard_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_pattern" ):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_pattern" ):
                listener.exitWildcard_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_pattern" ):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_pattern(self):

        localctx = PyTealParser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(PyTealParser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(PyTealParser.AttrContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_pattern" ):
                listener.enterValue_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_pattern" ):
                listener.exitValue_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_pattern" ):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)




    def value_pattern(self):

        localctx = PyTealParser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.attr()
            self.state = 1145
            if not  self.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " self.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.NameContext)
            else:
                return self.getTypedRuleContext(PyTealParser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.DOT)
            else:
                return self.getToken(PyTealParser.DOT, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = PyTealParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.name()
            self.state = 1150 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1148
                    self.match(PyTealParser.DOT)
                    self.state = 1149
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 1152 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_or_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(PyTealParser.AttrContext,0)


        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_name_or_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_or_attr" ):
                listener.enterName_or_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_or_attr" ):
                listener.exitName_or_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_or_attr" ):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)




    def name_or_attr(self):

        localctx = PyTealParser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_name_or_attr)
        try:
            self.state = 1156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1154
                self.attr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1155
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(PyTealParser.PatternContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_group_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_pattern" ):
                listener.enterGroup_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_pattern" ):
                listener.exitGroup_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_pattern" ):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)




    def group_pattern(self):

        localctx = PyTealParser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1159
            self.pattern()
            self.state = 1160
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(PyTealParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(PyTealParser.CLOSE_BRACK, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Maybe_sequence_patternContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Open_sequence_patternContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_pattern" ):
                listener.enterSequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_pattern" ):
                listener.exitSequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_pattern" ):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def sequence_pattern(self):

        localctx = PyTealParser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1162
                self.match(PyTealParser.OPEN_BRACK)
                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 145152917376001) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 19) != 0):
                    self.state = 1163
                    self.maybe_sequence_pattern()


                self.state = 1166
                self.match(PyTealParser.CLOSE_BRACK)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                self.match(PyTealParser.OPEN_PAREN)
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 145152917376001) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 19) != 0):
                    self.state = 1168
                    self.open_sequence_pattern()


                self.state = 1171
                self.match(PyTealParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Maybe_star_patternContext,0)


        def COMMA(self):
            return self.getToken(PyTealParser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Maybe_sequence_patternContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_open_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_sequence_pattern" ):
                listener.enterOpen_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_sequence_pattern" ):
                listener.exitOpen_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_sequence_pattern" ):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def open_sequence_pattern(self):

        localctx = PyTealParser.Open_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_open_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.maybe_star_pattern()
            self.state = 1175
            self.match(PyTealParser.COMMA)
            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 145152917376001) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 19) != 0):
                self.state = 1176
                self.maybe_sequence_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Maybe_star_patternContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Maybe_star_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_maybe_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_sequence_pattern" ):
                listener.enterMaybe_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_sequence_pattern" ):
                listener.exitMaybe_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_sequence_pattern" ):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_sequence_pattern(self):

        localctx = PyTealParser.Maybe_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_maybe_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.maybe_star_pattern()
            self.state = 1184
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1180
                    self.match(PyTealParser.COMMA)
                    self.state = 1181
                    self.maybe_star_pattern() 
                self.state = 1186
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1187
                self.match(PyTealParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Star_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(PyTealParser.PatternContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_maybe_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_star_pattern" ):
                listener.enterMaybe_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_star_pattern" ):
                listener.exitMaybe_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_star_pattern" ):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_star_pattern(self):

        localctx = PyTealParser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_maybe_star_pattern)
        try:
            self.state = 1192
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1190
                self.star_pattern()
                pass
            elif token in [63, 73, 74, 81, 83, 90, 97, 105, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1191
                self.pattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PyTealParser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PyTealParser.Pattern_capture_targetContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Wildcard_patternContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_pattern" ):
                listener.enterStar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_pattern" ):
                listener.exitStar_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_pattern" ):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)




    def star_pattern(self):

        localctx = PyTealParser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_star_pattern)
        try:
            self.state = 1198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1194
                self.match(PyTealParser.STAR)
                self.state = 1195
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.match(PyTealParser.STAR)
                self.state = 1197
                self.wildcard_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(PyTealParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(PyTealParser.CLOSE_BRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Double_star_patternContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(PyTealParser.Items_patternContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_mapping_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_pattern" ):
                listener.enterMapping_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_pattern" ):
                listener.exitMapping_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping_pattern" ):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)




    def mapping_pattern(self):

        localctx = PyTealParser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_mapping_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1200
                self.match(PyTealParser.OPEN_BRACE)
                self.state = 1201
                self.match(PyTealParser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1202
                self.match(PyTealParser.OPEN_BRACE)
                self.state = 1203
                self.double_star_pattern()
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1204
                    self.match(PyTealParser.COMMA)


                self.state = 1207
                self.match(PyTealParser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1209
                self.match(PyTealParser.OPEN_BRACE)
                self.state = 1210
                self.items_pattern()
                self.state = 1211
                self.match(PyTealParser.COMMA)
                self.state = 1212
                self.double_star_pattern()
                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1213
                    self.match(PyTealParser.COMMA)


                self.state = 1216
                self.match(PyTealParser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1218
                self.match(PyTealParser.OPEN_BRACE)
                self.state = 1219
                self.items_pattern()
                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1220
                    self.match(PyTealParser.COMMA)


                self.state = 1223
                self.match(PyTealParser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Items_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Key_value_patternContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Key_value_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_items_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItems_pattern" ):
                listener.enterItems_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItems_pattern" ):
                listener.exitItems_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItems_pattern" ):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)




    def items_pattern(self):

        localctx = PyTealParser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.key_value_pattern()
            self.state = 1232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1228
                    self.match(PyTealParser.COMMA)
                    self.state = 1229
                    self.key_value_pattern() 
                self.state = 1234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(PyTealParser.PatternContext,0)


        def literal_expr(self):
            return self.getTypedRuleContext(PyTealParser.Literal_exprContext,0)


        def attr(self):
            return self.getTypedRuleContext(PyTealParser.AttrContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_key_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value_pattern" ):
                listener.enterKey_value_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value_pattern" ):
                listener.exitKey_value_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_value_pattern" ):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)




    def key_value_pattern(self):

        localctx = PyTealParser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 74, 81, 105, 134, 135]:
                self.state = 1235
                self.literal_expr()
                pass
            elif token in [73, 83, 138]:
                self.state = 1236
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1239
            self.match(PyTealParser.COLON)
            self.state = 1240
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(PyTealParser.POWER, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PyTealParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_double_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_star_pattern" ):
                listener.enterDouble_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_star_pattern" ):
                listener.exitDouble_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_star_pattern" ):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def double_star_pattern(self):

        localctx = PyTealParser.Double_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.match(PyTealParser.POWER)
            self.state = 1243
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(PyTealParser.Name_or_attrContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(PyTealParser.Positional_patternsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def keyword_patterns(self):
            return self.getTypedRuleContext(PyTealParser.Keyword_patternsContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_class_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_pattern" ):
                listener.enterClass_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_pattern" ):
                listener.exitClass_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_pattern" ):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)




    def class_pattern(self):

        localctx = PyTealParser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_class_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.name_or_attr()
                self.state = 1246
                self.match(PyTealParser.OPEN_PAREN)
                self.state = 1247
                self.match(PyTealParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1249
                self.name_or_attr()
                self.state = 1250
                self.match(PyTealParser.OPEN_PAREN)
                self.state = 1251
                self.positional_patterns()
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1252
                    self.match(PyTealParser.COMMA)


                self.state = 1255
                self.match(PyTealParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1257
                self.name_or_attr()
                self.state = 1258
                self.match(PyTealParser.OPEN_PAREN)
                self.state = 1259
                self.keyword_patterns()
                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1260
                    self.match(PyTealParser.COMMA)


                self.state = 1263
                self.match(PyTealParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1265
                self.name_or_attr()
                self.state = 1266
                self.match(PyTealParser.OPEN_PAREN)
                self.state = 1267
                self.positional_patterns()
                self.state = 1268
                self.match(PyTealParser.COMMA)
                self.state = 1269
                self.keyword_patterns()
                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1270
                    self.match(PyTealParser.COMMA)


                self.state = 1273
                self.match(PyTealParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positional_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.PatternContext)
            else:
                return self.getTypedRuleContext(PyTealParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_positional_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_patterns" ):
                listener.enterPositional_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_patterns" ):
                listener.exitPositional_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositional_patterns" ):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)




    def positional_patterns(self):

        localctx = PyTealParser.Positional_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self.pattern()
            self.state = 1282
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1278
                    self.match(PyTealParser.COMMA)
                    self.state = 1279
                    self.pattern() 
                self.state = 1284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Keyword_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_keyword_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_patterns" ):
                listener.enterKeyword_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_patterns" ):
                listener.exitKeyword_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_patterns" ):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)




    def keyword_patterns(self):

        localctx = PyTealParser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self.keyword_pattern()
            self.state = 1290
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1286
                    self.match(PyTealParser.COMMA)
                    self.state = 1287
                    self.keyword_pattern() 
                self.state = 1292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(PyTealParser.ASSIGN, 0)

        def pattern(self):
            return self.getTypedRuleContext(PyTealParser.PatternContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_keyword_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_pattern" ):
                listener.enterKeyword_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_pattern" ):
                listener.exitKeyword_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_pattern" ):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)




    def keyword_pattern(self):

        localctx = PyTealParser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.name()
            self.state = 1294
            self.match(PyTealParser.ASSIGN)
            self.state = 1295
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Or_testContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Or_testContext,i)


        def IF(self):
            return self.getToken(PyTealParser.IF, 0)

        def ELSE(self):
            return self.getToken(PyTealParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(PyTealParser.LambdefContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = PyTealParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 1306
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1297
                self.or_test()
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1298
                    self.match(PyTealParser.IF)
                    self.state = 1299
                    self.or_test()
                    self.state = 1300
                    self.match(PyTealParser.ELSE)
                    self.state = 1301
                    self.test()


                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(PyTealParser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(PyTealParser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = PyTealParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_test_nocond)
        try:
            self.state = 1310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1308
                self.or_test()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1309
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PyTealParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PyTealParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = PyTealParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self.match(PyTealParser.LAMBDA)
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 4260865) != 0) or _la==138:
                self.state = 1313
                self.varargslist()


            self.state = 1316
            self.match(PyTealParser.COLON)
            self.state = 1317
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambdef_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PyTealParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PyTealParser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(PyTealParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = PyTealParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(PyTealParser.LAMBDA)
            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 4260865) != 0) or _la==138:
                self.state = 1320
                self.varargslist()


            self.state = 1323
            self.match(PyTealParser.COLON)
            self.state = 1324
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.And_testContext)
            else:
                return self.getTypedRuleContext(PyTealParser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.OR)
            else:
                return self.getToken(PyTealParser.OR, i)

        def pyteal_or_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_or_exprContext,0)


        def pyteal_bytes_or_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_or_exprContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = PyTealParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.state = 1336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 53, 63, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1326
                self.and_test()
                self.state = 1331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==77:
                    self.state = 1327
                    self.match(PyTealParser.OR)
                    self.state = 1328
                    self.and_test()
                    self.state = 1333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1334
                self.pyteal_or_expr()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1335
                self.pyteal_bytes_or_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Not_testContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.AND)
            else:
                return self.getToken(PyTealParser.AND, i)

        def pyteal_and_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_and_exprContext,0)


        def pyteal_bytes_and_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_and_exprContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = PyTealParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.state = 1348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 47, 48, 53, 63, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1338
                self.not_test()
                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==49:
                    self.state = 1339
                    self.match(PyTealParser.AND)
                    self.state = 1340
                    self.not_test()
                    self.state = 1345
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1346
                self.pyteal_and_expr()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1347
                self.pyteal_bytes_and_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PyTealParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(PyTealParser.Not_testContext,0)


        def pyteal_not_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_not_exprContext,0)


        def pyteal_bytes_not_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_not_exprContext,0)


        def comparison(self):
            return self.getTypedRuleContext(PyTealParser.ComparisonContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = PyTealParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_not_test)
        try:
            self.state = 1355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1350
                self.match(PyTealParser.NOT)
                self.state = 1351
                self.not_test()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1352
                self.pyteal_not_expr()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1353
                self.pyteal_bytes_not_expr()
                pass
            elif token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 47, 48, 53, 63, 73, 74, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1354
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.ExprContext)
            else:
                return self.getTypedRuleContext(PyTealParser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Comp_opContext,i)


        def pyteal_comparison(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_comparisonContext,0)


        def pyteal_bytes_comparison(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_comparisonContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = PyTealParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_comparison)
        try:
            self.state = 1368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 9, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 33, 34, 35, 36, 37, 43, 44, 45, 47, 48, 53, 63, 73, 74, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1357
                self.expr(0)
                self.state = 1363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1358
                        self.comp_op()
                        self.state = 1359
                        self.expr(0) 
                    self.state = 1365
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

                pass
            elif token in [10, 11, 12, 13, 20, 21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1366
                self.pyteal_comparison()
                pass
            elif token in [29, 30, 31, 32, 38, 39]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1367
                self.pyteal_bytes_comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(PyTealParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(PyTealParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(PyTealParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(PyTealParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(PyTealParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(PyTealParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(PyTealParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(PyTealParser.IN, 0)

        def NOT(self):
            return self.getToken(PyTealParser.NOT, 0)

        def IS(self):
            return self.getToken(PyTealParser.IS, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = PyTealParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_comp_op)
        try:
            self.state = 1383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1370
                self.match(PyTealParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1371
                self.match(PyTealParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1372
                self.match(PyTealParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1373
                self.match(PyTealParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1374
                self.match(PyTealParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1375
                self.match(PyTealParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1376
                self.match(PyTealParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1377
                self.match(PyTealParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1378
                self.match(PyTealParser.NOT)
                self.state = 1379
                self.match(PyTealParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1380
                self.match(PyTealParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1381
                self.match(PyTealParser.IS)
                self.state = 1382
                self.match(PyTealParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PyTealParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(PyTealParser.ExprContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = PyTealParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(PyTealParser.STAR)
            self.state = 1386
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(PyTealParser.Atom_exprContext,0)


        def pyteal_exp_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_exp_exprContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.ExprContext)
            else:
                return self.getTypedRuleContext(PyTealParser.ExprContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.ADD)
            else:
                return self.getToken(PyTealParser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.MINUS)
            else:
                return self.getToken(PyTealParser.MINUS, i)

        def NOT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.NOT_OP)
            else:
                return self.getToken(PyTealParser.NOT_OP, i)

        def pyteal_bitwise_not_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bitwise_not_exprContext,0)


        def pyteal_mul_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_mul_exprContext,0)


        def pyteal_div_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_div_exprContext,0)


        def pyteal_mod_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_mod_exprContext,0)


        def pyteal_bytes_mul_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_mul_exprContext,0)


        def pyteal_bytes_div_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_div_exprContext,0)


        def pyteal_bytes_mod_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_mod_exprContext,0)


        def pyteal_add_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_add_exprContext,0)


        def pyteal_minus_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_minus_exprContext,0)


        def pyteal_bytes_add_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_add_exprContext,0)


        def pyteal_bytes_minus_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_minus_exprContext,0)


        def pyteal_bitwise_and_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bitwise_and_exprContext,0)


        def pyteal_bitwise_xor_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bitwise_xor_exprContext,0)


        def pyteal_bytes_xor_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_xor_exprContext,0)


        def pyteal_bitwise_or_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bitwise_or_exprContext,0)


        def pyteal_bytes_zero_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_zero_exprContext,0)


        def POWER(self):
            return self.getToken(PyTealParser.POWER, 0)

        def STAR(self):
            return self.getToken(PyTealParser.STAR, 0)

        def AT(self):
            return self.getToken(PyTealParser.AT, 0)

        def DIV(self):
            return self.getToken(PyTealParser.DIV, 0)

        def MOD(self):
            return self.getToken(PyTealParser.MOD, 0)

        def IDIV(self):
            return self.getToken(PyTealParser.IDIV, 0)

        def LEFT_SHIFT(self):
            return self.getToken(PyTealParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(PyTealParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(PyTealParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(PyTealParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(PyTealParser.OR_OP, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PyTealParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 194
        self.enterRecursionRule(localctx, 194, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 9, 45, 47, 48, 53, 63, 73, 74, 81, 83, 88, 90, 97, 110, 134, 135, 138]:
                self.state = 1389
                self.atom_expr()
                pass
            elif token in [19]:
                self.state = 1390
                self.pyteal_exp_expr()
                pass
            elif token in [104, 105, 109]:
                self.state = 1392 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1391
                        _la = self._input.LA(1)
                        if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 35) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1394 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

                self.state = 1396
                self.expr(17)
                pass
            elif token in [28]:
                self.state = 1397
                self.pyteal_bitwise_not_expr()
                pass
            elif token in [16, 17, 18]:
                self.state = 1401
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [16]:
                    self.state = 1398
                    self.pyteal_mul_expr()
                    pass
                elif token in [17]:
                    self.state = 1399
                    self.pyteal_div_expr()
                    pass
                elif token in [18]:
                    self.state = 1400
                    self.pyteal_mod_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [35, 36, 37]:
                self.state = 1406
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [35]:
                    self.state = 1403
                    self.pyteal_bytes_mul_expr()
                    pass
                elif token in [36]:
                    self.state = 1404
                    self.pyteal_bytes_div_expr()
                    pass
                elif token in [37]:
                    self.state = 1405
                    self.pyteal_bytes_mod_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [14, 15]:
                self.state = 1410
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 1408
                    self.pyteal_add_expr()
                    pass
                elif token in [15]:
                    self.state = 1409
                    self.pyteal_minus_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [33, 34]:
                self.state = 1414
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [33]:
                    self.state = 1412
                    self.pyteal_bytes_add_expr()
                    pass
                elif token in [34]:
                    self.state = 1413
                    self.pyteal_bytes_minus_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [25]:
                self.state = 1416
                self.pyteal_bitwise_and_expr()
                pass
            elif token in [27]:
                self.state = 1417
                self.pyteal_bitwise_xor_expr()
                pass
            elif token in [43]:
                self.state = 1418
                self.pyteal_bytes_xor_expr()
                pass
            elif token in [26]:
                self.state = 1419
                self.pyteal_bitwise_or_expr()
                pass
            elif token in [44]:
                self.state = 1420
                self.pyteal_bytes_zero_expr()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1446
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1444
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        localctx = PyTealParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1423
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1424
                        self.match(PyTealParser.POWER)
                        self.state = 1425
                        self.expr(20)
                        pass

                    elif la_ == 2:
                        localctx = PyTealParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1426
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1427
                        _la = self._input.LA(1)
                        if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 1074659329) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1428
                        self.expr(16)
                        pass

                    elif la_ == 3:
                        localctx = PyTealParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1429
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1430
                        _la = self._input.LA(1)
                        if not(_la==104 or _la==105):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1431
                        self.expr(13)
                        pass

                    elif la_ == 4:
                        localctx = PyTealParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1432
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1433
                        _la = self._input.LA(1)
                        if not(_la==102 or _la==103):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1434
                        self.expr(10)
                        pass

                    elif la_ == 5:
                        localctx = PyTealParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1435
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1436
                        self.match(PyTealParser.AND_OP)
                        self.state = 1437
                        self.expr(9)
                        pass

                    elif la_ == 6:
                        localctx = PyTealParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1438
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1439
                        self.match(PyTealParser.XOR)
                        self.state = 1440
                        self.expr(7)
                        pass

                    elif la_ == 7:
                        localctx = PyTealParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1441
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1442
                        self.match(PyTealParser.OR_OP)
                        self.state = 1443
                        self.expr(4)
                        pass

             
                self.state = 1448
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Pyteal_data_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pyteal_integers_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_integers_exprContext,0)


        def pyteal_bytes_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_exprContext,0)


        def pyteal_conversion_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_conversion_exprContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_data_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_data_expr" ):
                listener.enterPyteal_data_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_data_expr" ):
                listener.exitPyteal_data_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_data_expr" ):
                return visitor.visitPyteal_data_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_data_expr(self):

        localctx = PyTealParser.Pyteal_data_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_pyteal_data_expr)
        try:
            self.state = 1452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1449
                self.pyteal_integers_expr()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1450
                self.pyteal_bytes_expr()
                pass
            elif token in [8, 9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1451
                self.pyteal_conversion_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_integers_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_INT(self):
            return self.getToken(PyTealParser.PYTEAL_INT, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def COMMA(self):
            return self.getToken(PyTealParser.COMMA, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_integers_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_integers_expr" ):
                listener.enterPyteal_integers_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_integers_expr" ):
                listener.exitPyteal_integers_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_integers_expr" ):
                return visitor.visitPyteal_integers_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_integers_expr(self):

        localctx = PyTealParser.Pyteal_integers_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_pyteal_integers_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self.match(PyTealParser.PYTEAL_INT)
            self.state = 1455
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1456
            self.test()
            self.state = 1458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1457
                self.match(PyTealParser.COMMA)


            self.state = 1460
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTE(self):
            return self.getToken(PyTealParser.PYTEAL_BYTE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def pyteal_bytes_base(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_baseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_expr" ):
                listener.enterPyteal_bytes_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_expr" ):
                listener.exitPyteal_bytes_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_expr" ):
                return visitor.visitPyteal_bytes_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_expr(self):

        localctx = PyTealParser.Pyteal_bytes_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_pyteal_bytes_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self.match(PyTealParser.PYTEAL_BYTE)
            self.state = 1463
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 224) != 0):
                self.state = 1464
                self.pyteal_bytes_base()
                self.state = 1465
                self.match(PyTealParser.COMMA)


            self.state = 1469
            self.test()
            self.state = 1471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1470
                self.match(PyTealParser.COMMA)


            self.state = 1473
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTE_BASE16(self):
            return self.getToken(PyTealParser.PYTEAL_BYTE_BASE16, 0)

        def PYTEAL_BYTE_BASE32(self):
            return self.getToken(PyTealParser.PYTEAL_BYTE_BASE32, 0)

        def PYTEAL_BYTE_BASE64(self):
            return self.getToken(PyTealParser.PYTEAL_BYTE_BASE64, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_base" ):
                listener.enterPyteal_bytes_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_base" ):
                listener.exitPyteal_bytes_base(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_base" ):
                return visitor.visitPyteal_bytes_base(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_base(self):

        localctx = PyTealParser.Pyteal_bytes_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_pyteal_bytes_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1475
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 224) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_conversion_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def PYTEAL_ITOB(self):
            return self.getToken(PyTealParser.PYTEAL_ITOB, 0)

        def PYTEAL_BTOI(self):
            return self.getToken(PyTealParser.PYTEAL_BTOI, 0)

        def COMMA(self):
            return self.getToken(PyTealParser.COMMA, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_conversion_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_conversion_expr" ):
                listener.enterPyteal_conversion_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_conversion_expr" ):
                listener.exitPyteal_conversion_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_conversion_expr" ):
                return visitor.visitPyteal_conversion_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_conversion_expr(self):

        localctx = PyTealParser.Pyteal_conversion_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_pyteal_conversion_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1478
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1479
            self.test()
            self.state = 1481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1480
                self.match(PyTealParser.COMMA)


            self.state = 1483
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_arithmetic_operationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pyteal_comparison(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_comparisonContext,0)


        def pyteal_bytes_comparison(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_comparisonContext,0)


        def pyteal_or_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_or_exprContext,0)


        def pyteal_and_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_and_exprContext,0)


        def pyteal_not_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_not_exprContext,0)


        def pyteal_exp_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_exp_exprContext,0)


        def pyteal_add_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_add_exprContext,0)


        def pyteal_minus_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_minus_exprContext,0)


        def pyteal_bitwise_not_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bitwise_not_exprContext,0)


        def pyteal_mul_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_mul_exprContext,0)


        def pyteal_div_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_div_exprContext,0)


        def pyteal_mod_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_mod_exprContext,0)


        def pyteal_bitwise_and_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bitwise_and_exprContext,0)


        def pyteal_bitwise_xor_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bitwise_xor_exprContext,0)


        def pyteal_bitwise_or_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bitwise_or_exprContext,0)


        def pyteal_bytes_or_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_or_exprContext,0)


        def pyteal_bytes_and_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_and_exprContext,0)


        def pyteal_bytes_not_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_not_exprContext,0)


        def pyteal_bytes_mul_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_mul_exprContext,0)


        def pyteal_bytes_div_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_div_exprContext,0)


        def pyteal_bytes_mod_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_mod_exprContext,0)


        def pyteal_bytes_add_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_add_exprContext,0)


        def pyteal_bytes_minus_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_minus_exprContext,0)


        def pyteal_bytes_xor_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_xor_exprContext,0)


        def pyteal_bytes_zero_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_zero_exprContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_arithmetic_operations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_arithmetic_operations" ):
                listener.enterPyteal_arithmetic_operations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_arithmetic_operations" ):
                listener.exitPyteal_arithmetic_operations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_arithmetic_operations" ):
                return visitor.visitPyteal_arithmetic_operations(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_arithmetic_operations(self):

        localctx = PyTealParser.Pyteal_arithmetic_operationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_pyteal_arithmetic_operations)
        try:
            self.state = 1510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 13, 20, 21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1485
                self.pyteal_comparison()
                pass
            elif token in [29, 30, 31, 32, 38, 39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1486
                self.pyteal_bytes_comparison()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1487
                self.pyteal_or_expr()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1488
                self.pyteal_and_expr()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1489
                self.pyteal_not_expr()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1490
                self.pyteal_exp_expr()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1491
                self.pyteal_add_expr()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1492
                self.pyteal_minus_expr()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1493
                self.pyteal_bitwise_not_expr()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1494
                self.pyteal_mul_expr()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1495
                self.pyteal_div_expr()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1496
                self.pyteal_mod_expr()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1497
                self.pyteal_bitwise_and_expr()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1498
                self.pyteal_bitwise_xor_expr()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1499
                self.pyteal_bitwise_or_expr()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1500
                self.pyteal_bytes_or_expr()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1501
                self.pyteal_bytes_and_expr()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1502
                self.pyteal_bytes_not_expr()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1503
                self.pyteal_bytes_mul_expr()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1504
                self.pyteal_bytes_div_expr()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1505
                self.pyteal_bytes_mod_expr()
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1506
                self.pyteal_bytes_add_expr()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1507
                self.pyteal_bytes_minus_expr()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1508
                self.pyteal_bytes_xor_expr()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1509
                self.pyteal_bytes_zero_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_comparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pyteal_comp_op(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_comp_opContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_comparison" ):
                listener.enterPyteal_comparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_comparison" ):
                listener.exitPyteal_comparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_comparison" ):
                return visitor.visitPyteal_comparison(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_comparison(self):

        localctx = PyTealParser.Pyteal_comparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_pyteal_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.pyteal_comp_op()
            self.state = 1513
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1514
            self.test()
            self.state = 1515
            self.match(PyTealParser.COMMA)
            self.state = 1516
            self.test()
            self.state = 1518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1517
                self.match(PyTealParser.COMMA)


            self.state = 1520
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_LT(self):
            return self.getToken(PyTealParser.PYTEAL_LT, 0)

        def PYTEAL_GT(self):
            return self.getToken(PyTealParser.PYTEAL_GT, 0)

        def PYTEAL_EQ(self):
            return self.getToken(PyTealParser.PYTEAL_EQ, 0)

        def PYTEAL_GE(self):
            return self.getToken(PyTealParser.PYTEAL_GE, 0)

        def PYTEAL_LE(self):
            return self.getToken(PyTealParser.PYTEAL_LE, 0)

        def PYTEAL_NEQ(self):
            return self.getToken(PyTealParser.PYTEAL_NEQ, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_comp_op" ):
                listener.enterPyteal_comp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_comp_op" ):
                listener.exitPyteal_comp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_comp_op" ):
                return visitor.visitPyteal_comp_op(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_comp_op(self):

        localctx = PyTealParser.Pyteal_comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_pyteal_comp_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3161088) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_comparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pyteal_bytes_comp_op(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_bytes_comp_opContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_comparison" ):
                listener.enterPyteal_bytes_comparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_comparison" ):
                listener.exitPyteal_bytes_comparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_comparison" ):
                return visitor.visitPyteal_bytes_comparison(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_comparison(self):

        localctx = PyTealParser.Pyteal_bytes_comparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_pyteal_bytes_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.pyteal_bytes_comp_op()
            self.state = 1525
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1526
            self.test()
            self.state = 1527
            self.match(PyTealParser.COMMA)
            self.state = 1528
            self.test()
            self.state = 1530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1529
                self.match(PyTealParser.COMMA)


            self.state = 1532
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTES_LT(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_LT, 0)

        def PYTEAL_BYTES_GT(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_GT, 0)

        def PYTEAL_BYTES_EQ(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_EQ, 0)

        def PYTEAL_BYTES_GE(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_GE, 0)

        def PYTEAL_BYTES_LE(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_LE, 0)

        def PYTEAL_BYTES_NEQ(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_NEQ, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_comp_op" ):
                listener.enterPyteal_bytes_comp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_comp_op" ):
                listener.exitPyteal_bytes_comp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_comp_op" ):
                return visitor.visitPyteal_bytes_comp_op(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_comp_op(self):

        localctx = PyTealParser.Pyteal_bytes_comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_pyteal_bytes_comp_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 832686784512) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_or_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_OR(self):
            return self.getToken(PyTealParser.PYTEAL_OR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_or_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_or_expr" ):
                listener.enterPyteal_or_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_or_expr" ):
                listener.exitPyteal_or_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_or_expr" ):
                return visitor.visitPyteal_or_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_or_expr(self):

        localctx = PyTealParser.Pyteal_or_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_pyteal_or_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.match(PyTealParser.PYTEAL_OR)
            self.state = 1537
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1538
            self.test()
            self.state = 1543
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1539
                    self.match(PyTealParser.COMMA)
                    self.state = 1540
                    self.test() 
                self.state = 1545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

            self.state = 1547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1546
                self.match(PyTealParser.COMMA)


            self.state = 1549
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_and_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_AND(self):
            return self.getToken(PyTealParser.PYTEAL_AND, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_and_expr" ):
                listener.enterPyteal_and_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_and_expr" ):
                listener.exitPyteal_and_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_and_expr" ):
                return visitor.visitPyteal_and_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_and_expr(self):

        localctx = PyTealParser.Pyteal_and_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_pyteal_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(PyTealParser.PYTEAL_AND)
            self.state = 1552
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1553
            self.test()
            self.state = 1558
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1554
                    self.match(PyTealParser.COMMA)
                    self.state = 1555
                    self.test() 
                self.state = 1560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

            self.state = 1562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1561
                self.match(PyTealParser.COMMA)


            self.state = 1564
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_not_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_NOT(self):
            return self.getToken(PyTealParser.PYTEAL_NOT, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def COMMA(self):
            return self.getToken(PyTealParser.COMMA, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_not_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_not_expr" ):
                listener.enterPyteal_not_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_not_expr" ):
                listener.exitPyteal_not_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_not_expr" ):
                return visitor.visitPyteal_not_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_not_expr(self):

        localctx = PyTealParser.Pyteal_not_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_pyteal_not_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(PyTealParser.PYTEAL_NOT)
            self.state = 1567
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1568
            self.test()
            self.state = 1570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1569
                self.match(PyTealParser.COMMA)


            self.state = 1572
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_exp_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_EXP(self):
            return self.getToken(PyTealParser.PYTEAL_EXP, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_exp_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_exp_expr" ):
                listener.enterPyteal_exp_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_exp_expr" ):
                listener.exitPyteal_exp_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_exp_expr" ):
                return visitor.visitPyteal_exp_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_exp_expr(self):

        localctx = PyTealParser.Pyteal_exp_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_pyteal_exp_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1574
            self.match(PyTealParser.PYTEAL_EXP)
            self.state = 1575
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1576
            self.test()
            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1577
                self.match(PyTealParser.COMMA)


            self.state = 1580
            self.match(PyTealParser.COMMA)
            self.state = 1581
            self.test()
            self.state = 1582
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_add_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_ADD(self):
            return self.getToken(PyTealParser.PYTEAL_ADD, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_add_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_add_expr" ):
                listener.enterPyteal_add_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_add_expr" ):
                listener.exitPyteal_add_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_add_expr" ):
                return visitor.visitPyteal_add_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_add_expr(self):

        localctx = PyTealParser.Pyteal_add_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_pyteal_add_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            self.match(PyTealParser.PYTEAL_ADD)
            self.state = 1585
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1586
            self.test()
            self.state = 1588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1587
                self.match(PyTealParser.COMMA)


            self.state = 1590
            self.match(PyTealParser.COMMA)
            self.state = 1591
            self.test()
            self.state = 1592
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_minus_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_MINUS(self):
            return self.getToken(PyTealParser.PYTEAL_MINUS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_minus_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_minus_expr" ):
                listener.enterPyteal_minus_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_minus_expr" ):
                listener.exitPyteal_minus_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_minus_expr" ):
                return visitor.visitPyteal_minus_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_minus_expr(self):

        localctx = PyTealParser.Pyteal_minus_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_pyteal_minus_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.match(PyTealParser.PYTEAL_MINUS)
            self.state = 1595
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1596
            self.test()
            self.state = 1598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1597
                self.match(PyTealParser.COMMA)


            self.state = 1600
            self.match(PyTealParser.COMMA)
            self.state = 1601
            self.test()
            self.state = 1602
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bitwise_not_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BITWISENOT(self):
            return self.getToken(PyTealParser.PYTEAL_BITWISENOT, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def COMMA(self):
            return self.getToken(PyTealParser.COMMA, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bitwise_not_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bitwise_not_expr" ):
                listener.enterPyteal_bitwise_not_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bitwise_not_expr" ):
                listener.exitPyteal_bitwise_not_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bitwise_not_expr" ):
                return visitor.visitPyteal_bitwise_not_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bitwise_not_expr(self):

        localctx = PyTealParser.Pyteal_bitwise_not_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_pyteal_bitwise_not_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.match(PyTealParser.PYTEAL_BITWISENOT)
            self.state = 1605
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1606
            self.test()
            self.state = 1608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1607
                self.match(PyTealParser.COMMA)


            self.state = 1610
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_mul_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_MUL(self):
            return self.getToken(PyTealParser.PYTEAL_MUL, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_mul_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_mul_expr" ):
                listener.enterPyteal_mul_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_mul_expr" ):
                listener.exitPyteal_mul_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_mul_expr" ):
                return visitor.visitPyteal_mul_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_mul_expr(self):

        localctx = PyTealParser.Pyteal_mul_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_pyteal_mul_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            self.match(PyTealParser.PYTEAL_MUL)
            self.state = 1613
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1614
            self.test()
            self.state = 1615
            self.match(PyTealParser.COMMA)
            self.state = 1616
            self.test()
            self.state = 1618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1617
                self.match(PyTealParser.COMMA)


            self.state = 1620
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_div_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_DIV(self):
            return self.getToken(PyTealParser.PYTEAL_DIV, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_div_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_div_expr" ):
                listener.enterPyteal_div_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_div_expr" ):
                listener.exitPyteal_div_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_div_expr" ):
                return visitor.visitPyteal_div_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_div_expr(self):

        localctx = PyTealParser.Pyteal_div_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_pyteal_div_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            self.match(PyTealParser.PYTEAL_DIV)
            self.state = 1623
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1624
            self.test()
            self.state = 1625
            self.match(PyTealParser.COMMA)
            self.state = 1626
            self.test()
            self.state = 1628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1627
                self.match(PyTealParser.COMMA)


            self.state = 1630
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_mod_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_MOD(self):
            return self.getToken(PyTealParser.PYTEAL_MOD, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_mod_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_mod_expr" ):
                listener.enterPyteal_mod_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_mod_expr" ):
                listener.exitPyteal_mod_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_mod_expr" ):
                return visitor.visitPyteal_mod_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_mod_expr(self):

        localctx = PyTealParser.Pyteal_mod_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_pyteal_mod_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.match(PyTealParser.PYTEAL_MOD)
            self.state = 1633
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1634
            self.test()
            self.state = 1635
            self.match(PyTealParser.COMMA)
            self.state = 1636
            self.test()
            self.state = 1638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1637
                self.match(PyTealParser.COMMA)


            self.state = 1640
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bitwise_and_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BITWISEAND(self):
            return self.getToken(PyTealParser.PYTEAL_BITWISEAND, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bitwise_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bitwise_and_expr" ):
                listener.enterPyteal_bitwise_and_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bitwise_and_expr" ):
                listener.exitPyteal_bitwise_and_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bitwise_and_expr" ):
                return visitor.visitPyteal_bitwise_and_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bitwise_and_expr(self):

        localctx = PyTealParser.Pyteal_bitwise_and_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_pyteal_bitwise_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            self.match(PyTealParser.PYTEAL_BITWISEAND)
            self.state = 1643
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1644
            self.test()
            self.state = 1645
            self.match(PyTealParser.COMMA)
            self.state = 1646
            self.test()
            self.state = 1648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1647
                self.match(PyTealParser.COMMA)


            self.state = 1650
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bitwise_xor_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BITWISEXOR(self):
            return self.getToken(PyTealParser.PYTEAL_BITWISEXOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bitwise_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bitwise_xor_expr" ):
                listener.enterPyteal_bitwise_xor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bitwise_xor_expr" ):
                listener.exitPyteal_bitwise_xor_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bitwise_xor_expr" ):
                return visitor.visitPyteal_bitwise_xor_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bitwise_xor_expr(self):

        localctx = PyTealParser.Pyteal_bitwise_xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_pyteal_bitwise_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self.match(PyTealParser.PYTEAL_BITWISEXOR)
            self.state = 1653
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1654
            self.test()
            self.state = 1655
            self.match(PyTealParser.COMMA)
            self.state = 1656
            self.test()
            self.state = 1658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1657
                self.match(PyTealParser.COMMA)


            self.state = 1660
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bitwise_or_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BITWISEOR(self):
            return self.getToken(PyTealParser.PYTEAL_BITWISEOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bitwise_or_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bitwise_or_expr" ):
                listener.enterPyteal_bitwise_or_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bitwise_or_expr" ):
                listener.exitPyteal_bitwise_or_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bitwise_or_expr" ):
                return visitor.visitPyteal_bitwise_or_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bitwise_or_expr(self):

        localctx = PyTealParser.Pyteal_bitwise_or_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_pyteal_bitwise_or_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            self.match(PyTealParser.PYTEAL_BITWISEOR)
            self.state = 1663
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1664
            self.test()
            self.state = 1665
            self.match(PyTealParser.COMMA)
            self.state = 1666
            self.test()
            self.state = 1668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1667
                self.match(PyTealParser.COMMA)


            self.state = 1670
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_or_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTES_OR(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_OR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_or_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_or_expr" ):
                listener.enterPyteal_bytes_or_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_or_expr" ):
                listener.exitPyteal_bytes_or_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_or_expr" ):
                return visitor.visitPyteal_bytes_or_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_or_expr(self):

        localctx = PyTealParser.Pyteal_bytes_or_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_pyteal_bytes_or_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            self.match(PyTealParser.PYTEAL_BYTES_OR)
            self.state = 1673
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1674
            self.test()
            self.state = 1675
            self.match(PyTealParser.COMMA)
            self.state = 1676
            self.test()
            self.state = 1678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1677
                self.match(PyTealParser.COMMA)


            self.state = 1680
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_and_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTES_AND(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_AND, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_and_expr" ):
                listener.enterPyteal_bytes_and_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_and_expr" ):
                listener.exitPyteal_bytes_and_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_and_expr" ):
                return visitor.visitPyteal_bytes_and_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_and_expr(self):

        localctx = PyTealParser.Pyteal_bytes_and_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_pyteal_bytes_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.match(PyTealParser.PYTEAL_BYTES_AND)
            self.state = 1683
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1684
            self.test()
            self.state = 1685
            self.match(PyTealParser.COMMA)
            self.state = 1686
            self.test()
            self.state = 1688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1687
                self.match(PyTealParser.COMMA)


            self.state = 1690
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_not_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTES_NOT(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_NOT, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def COMMA(self):
            return self.getToken(PyTealParser.COMMA, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_not_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_not_expr" ):
                listener.enterPyteal_bytes_not_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_not_expr" ):
                listener.exitPyteal_bytes_not_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_not_expr" ):
                return visitor.visitPyteal_bytes_not_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_not_expr(self):

        localctx = PyTealParser.Pyteal_bytes_not_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_pyteal_bytes_not_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.match(PyTealParser.PYTEAL_BYTES_NOT)
            self.state = 1693
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1694
            self.test()
            self.state = 1696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1695
                self.match(PyTealParser.COMMA)


            self.state = 1698
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_mul_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTES_MUL(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_MUL, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_mul_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_mul_expr" ):
                listener.enterPyteal_bytes_mul_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_mul_expr" ):
                listener.exitPyteal_bytes_mul_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_mul_expr" ):
                return visitor.visitPyteal_bytes_mul_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_mul_expr(self):

        localctx = PyTealParser.Pyteal_bytes_mul_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_pyteal_bytes_mul_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700
            self.match(PyTealParser.PYTEAL_BYTES_MUL)
            self.state = 1701
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1702
            self.test()
            self.state = 1703
            self.match(PyTealParser.COMMA)
            self.state = 1704
            self.test()
            self.state = 1706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1705
                self.match(PyTealParser.COMMA)


            self.state = 1708
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_div_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTES_DIV(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_DIV, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_div_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_div_expr" ):
                listener.enterPyteal_bytes_div_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_div_expr" ):
                listener.exitPyteal_bytes_div_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_div_expr" ):
                return visitor.visitPyteal_bytes_div_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_div_expr(self):

        localctx = PyTealParser.Pyteal_bytes_div_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_pyteal_bytes_div_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1710
            self.match(PyTealParser.PYTEAL_BYTES_DIV)
            self.state = 1711
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1712
            self.test()
            self.state = 1713
            self.match(PyTealParser.COMMA)
            self.state = 1714
            self.test()
            self.state = 1716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1715
                self.match(PyTealParser.COMMA)


            self.state = 1718
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_mod_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTES_MOD(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_MOD, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_mod_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_mod_expr" ):
                listener.enterPyteal_bytes_mod_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_mod_expr" ):
                listener.exitPyteal_bytes_mod_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_mod_expr" ):
                return visitor.visitPyteal_bytes_mod_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_mod_expr(self):

        localctx = PyTealParser.Pyteal_bytes_mod_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_pyteal_bytes_mod_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            self.match(PyTealParser.PYTEAL_BYTES_MOD)
            self.state = 1721
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1722
            self.test()
            self.state = 1723
            self.match(PyTealParser.COMMA)
            self.state = 1724
            self.test()
            self.state = 1726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1725
                self.match(PyTealParser.COMMA)


            self.state = 1728
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_add_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTES_ADD(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_ADD, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_add_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_add_expr" ):
                listener.enterPyteal_bytes_add_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_add_expr" ):
                listener.exitPyteal_bytes_add_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_add_expr" ):
                return visitor.visitPyteal_bytes_add_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_add_expr(self):

        localctx = PyTealParser.Pyteal_bytes_add_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_pyteal_bytes_add_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.match(PyTealParser.PYTEAL_BYTES_ADD)
            self.state = 1731
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1732
            self.test()
            self.state = 1733
            self.match(PyTealParser.COMMA)
            self.state = 1734
            self.test()
            self.state = 1736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1735
                self.match(PyTealParser.COMMA)


            self.state = 1738
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_minus_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTES_MINUS(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_MINUS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_minus_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_minus_expr" ):
                listener.enterPyteal_bytes_minus_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_minus_expr" ):
                listener.exitPyteal_bytes_minus_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_minus_expr" ):
                return visitor.visitPyteal_bytes_minus_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_minus_expr(self):

        localctx = PyTealParser.Pyteal_bytes_minus_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_pyteal_bytes_minus_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self.match(PyTealParser.PYTEAL_BYTES_MINUS)
            self.state = 1741
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1742
            self.test()
            self.state = 1743
            self.match(PyTealParser.COMMA)
            self.state = 1744
            self.test()
            self.state = 1746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1745
                self.match(PyTealParser.COMMA)


            self.state = 1748
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_xor_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTES_XOR(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_XOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_xor_expr" ):
                listener.enterPyteal_bytes_xor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_xor_expr" ):
                listener.exitPyteal_bytes_xor_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_xor_expr" ):
                return visitor.visitPyteal_bytes_xor_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_xor_expr(self):

        localctx = PyTealParser.Pyteal_bytes_xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_pyteal_bytes_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self.match(PyTealParser.PYTEAL_BYTES_XOR)
            self.state = 1751
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1752
            self.test()
            self.state = 1753
            self.match(PyTealParser.COMMA)
            self.state = 1754
            self.test()
            self.state = 1756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1755
                self.match(PyTealParser.COMMA)


            self.state = 1758
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_bytes_zero_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_BYTES_ZERO(self):
            return self.getToken(PyTealParser.PYTEAL_BYTES_ZERO, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def COMMA(self):
            return self.getToken(PyTealParser.COMMA, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_bytes_zero_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_bytes_zero_expr" ):
                listener.enterPyteal_bytes_zero_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_bytes_zero_expr" ):
                listener.exitPyteal_bytes_zero_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_bytes_zero_expr" ):
                return visitor.visitPyteal_bytes_zero_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_bytes_zero_expr(self):

        localctx = PyTealParser.Pyteal_bytes_zero_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_pyteal_bytes_zero_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.match(PyTealParser.PYTEAL_BYTES_ZERO)
            self.state = 1761
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1762
            self.test()
            self.state = 1764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1763
                self.match(PyTealParser.COMMA)


            self.state = 1766
            self.match(PyTealParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pyteal_txn_type_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_type_exprContext,0)


        def pyteal_txn_type_enum_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_type_enum_exprContext,0)


        def pyteal_txn_sender_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_sender_exprContext,0)


        def pyteal_txn_fee_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_fee_exprContext,0)


        def pyteal_txn_first_valid_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_first_valid_exprContext,0)


        def pyteal_txn_first_valid_time_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_first_valid_time_exprContext,0)


        def pyteal_txn_last_valid_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_last_valid_exprContext,0)


        def pyteal_txn_note_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_note_exprContext,0)


        def pyteal_txn_lease_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_lease_exprContext,0)


        def pyteal_txn_group_index_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_group_index_exprContext,0)


        def pyteal_txn_tx_id_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_tx_id_exprContext,0)


        def pyteal_txn_rekey_to_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_rekey_to_exprContext,0)


        def pyteal_txn_application_id_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_application_id_exprContext,0)


        def pyteal_txn_on_completion_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_on_completion_exprContext,0)


        def pyteal_txn_approval_program_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_approval_program_exprContext,0)


        def pyteal_txn_global_num_uints_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_global_num_uints_exprContext,0)


        def pyteal_txn_global_num_byte_slices_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_global_num_byte_slices_exprContext,0)


        def pyteal_txn_local_num_uints_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_local_num_uints_exprContext,0)


        def pyteal_txn_local_num_byte_slices_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_local_num_byte_slices_exprContext,0)


        def pyteal_txn_accounts_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_accounts_exprContext,0)


        def pyteal_txn_assets_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_assets_exprContext,0)


        def pyteal_txn_applications_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_applications_exprContext,0)


        def pyteal_txn_clear_state_program_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_clear_state_program_exprContext,0)


        def pyteal_txn_extra_program_pages_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_extra_program_pages_exprContext,0)


        def pyteal_txn_application_args_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_application_args_exprContext,0)


        def pyteal_txn_created_application_id_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_created_application_id_exprContext,0)


        def pyteal_txn_logs_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_logs_exprContext,0)


        def pyteal_txn_last_log_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_last_log_exprContext,0)


        def pyteal_txn_approval_program_pages_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_approval_program_pages_exprContext,0)


        def pyteal_txn_clear_state_program_pages_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_clear_state_program_pages_exprContext,0)


        def pyteal_txn_config_asset_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_exprContext,0)


        def pyteal_txn_config_asset_total_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_total_exprContext,0)


        def pyteal_txn_config_asset_decimals_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_decimals_exprContext,0)


        def pyteal_txn_config_asset_default_frozen_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_default_frozen_exprContext,0)


        def pyteal_txn_config_asset_unit_name_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_unit_name_exprContext,0)


        def pyteal_txn_config_asset_name_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_name_exprContext,0)


        def pyteal_txn_config_asset_url_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_url_exprContext,0)


        def pyteal_txn_config_asset_metadata_hash_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_metadata_hash_exprContext,0)


        def pyteal_txn_config_asset_manager_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_manager_exprContext,0)


        def pyteal_txn_config_asset_reserve_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_reserve_exprContext,0)


        def pyteal_txn_config_asset_freeze_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_freeze_exprContext,0)


        def pyteal_txn_config_asset_clawback_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_config_asset_clawback_exprContext,0)


        def pyteal_txn_created_asset_id_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_created_asset_id_exprContext,0)


        def pyteal_txn_freeze_asset_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_freeze_asset_exprContext,0)


        def pyteal_txn_freeze_asset_account_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_freeze_asset_account_exprContext,0)


        def pyteal_txn_freeze_asset_frozen_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_freeze_asset_frozen_exprContext,0)


        def pyteal_txn_xfer_asset_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_xfer_asset_exprContext,0)


        def pyteal_txn_asset_amount_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_asset_amount_exprContext,0)


        def pyteal_txn_asset_sender_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_asset_sender_exprContext,0)


        def pyteal_txn_asset_receiver_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_asset_receiver_exprContext,0)


        def pyteal_txn_asset_close_to_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_asset_close_to_exprContext,0)


        def pyteal_txn_vote_pk_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_vote_pk_exprContext,0)


        def pyteal_txn_selection_pk_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_selection_pk_exprContext,0)


        def pyteal_txn_state_proof_pk_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_state_proof_pk_exprContext,0)


        def pyteal_txn_vote_first_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_vote_first_exprContext,0)


        def pyteal_txn_vote_last_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_vote_last_exprContext,0)


        def pyteal_txn_vote_key_dilution_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_vote_key_dilution_exprContext,0)


        def pyteal_txn_nonparticipation_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_nonparticipation_exprContext,0)


        def pyteal_txn_receiver_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_receiver_exprContext,0)


        def pyteal_txn_amount_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_amount_exprContext,0)


        def pyteal_txn_close_remainder_to_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_close_remainder_to_exprContext,0)


        def pyteal_txntype_Unknown_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txntype_Unknown_exprContext,0)


        def pyteal_txntype_Payment_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txntype_Payment_exprContext,0)


        def pyteal_txntype_KeyRegistration_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txntype_KeyRegistration_exprContext,0)


        def pyteal_txntype_AssetConfig_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txntype_AssetConfig_exprContext,0)


        def pyteal_txntype_AssetTransfer_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txntype_AssetTransfer_exprContext,0)


        def pyteal_txntype_AssetFreeze_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txntype_AssetFreeze_exprContext,0)


        def pyteal_txntype_ApplicationCall_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txntype_ApplicationCall_exprContext,0)


        def pyteal_global_min_txn_fee_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_min_txn_fee_exprContext,0)


        def pyteal_global_min_balance_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_min_balance_exprContext,0)


        def pyteal_global_max_txn_life_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_max_txn_life_exprContext,0)


        def pyteal_global_zero_address_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_zero_address_exprContext,0)


        def pyteal_global_group_size_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_group_size_exprContext,0)


        def pyteal_global_logic_sig_version_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_logic_sig_version_exprContext,0)


        def pyteal_global_round_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_round_exprContext,0)


        def pyteal_global_latest_timestamp_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_latest_timestamp_exprContext,0)


        def pyteal_global_current_application_id_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_current_application_id_exprContext,0)


        def pyteal_global_creator_address_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_creator_address_exprContext,0)


        def pyteal_global_current_application_address_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_current_application_address_exprContext,0)


        def pyteal_global_group_id_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_global_group_id_exprContext,0)


        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_expr" ):
                listener.enterPyteal_txn_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_expr" ):
                listener.exitPyteal_txn_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_expr" ):
                return visitor.visitPyteal_txn_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_expr(self):

        localctx = PyTealParser.Pyteal_txn_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_pyteal_txn_expr)
        try:
            self.state = 1855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1768
                self.pyteal_txn_type_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1769
                self.pyteal_txn_type_enum_expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1770
                self.pyteal_txn_sender_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1771
                self.pyteal_txn_fee_expr()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1772
                self.pyteal_txn_first_valid_expr()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1773
                self.pyteal_txn_first_valid_time_expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1774
                self.pyteal_txn_last_valid_expr()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1775
                self.pyteal_txn_note_expr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1776
                self.pyteal_txn_lease_expr()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1777
                self.pyteal_txn_group_index_expr()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1778
                self.pyteal_txn_tx_id_expr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1779
                self.pyteal_txn_rekey_to_expr()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1780
                self.pyteal_txn_application_id_expr()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1781
                self.pyteal_txn_on_completion_expr()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1782
                self.pyteal_txn_approval_program_expr()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1783
                self.pyteal_txn_global_num_uints_expr()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1784
                self.pyteal_txn_global_num_byte_slices_expr()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1785
                self.pyteal_txn_local_num_uints_expr()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1786
                self.pyteal_txn_local_num_byte_slices_expr()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1787
                self.pyteal_txn_accounts_expr()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1788
                self.pyteal_txn_assets_expr()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1789
                self.pyteal_txn_applications_expr()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1790
                self.pyteal_txn_clear_state_program_expr()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1791
                self.pyteal_txn_extra_program_pages_expr()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1792
                self.pyteal_txn_application_args_expr()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1793
                self.pyteal_txn_created_application_id_expr()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1794
                self.pyteal_txn_logs_expr()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1795
                self.pyteal_txn_last_log_expr()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1796
                self.pyteal_txn_approval_program_pages_expr()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1797
                self.pyteal_txn_clear_state_program_pages_expr()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1798
                self.pyteal_txn_config_asset_expr()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1799
                self.pyteal_txn_config_asset_total_expr()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1800
                self.pyteal_txn_config_asset_decimals_expr()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1801
                self.pyteal_txn_config_asset_default_frozen_expr()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1802
                self.pyteal_txn_config_asset_unit_name_expr()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1803
                self.pyteal_txn_config_asset_name_expr()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1804
                self.pyteal_txn_config_asset_url_expr()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1805
                self.pyteal_txn_config_asset_metadata_hash_expr()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1806
                self.pyteal_txn_config_asset_manager_expr()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1807
                self.pyteal_txn_config_asset_reserve_expr()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1808
                self.pyteal_txn_config_asset_freeze_expr()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1809
                self.pyteal_txn_config_asset_clawback_expr()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1810
                self.pyteal_txn_created_asset_id_expr()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1811
                self.pyteal_txn_freeze_asset_expr()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1812
                self.pyteal_txn_freeze_asset_account_expr()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1813
                self.pyteal_txn_freeze_asset_frozen_expr()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1814
                self.pyteal_txn_xfer_asset_expr()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1815
                self.pyteal_txn_asset_amount_expr()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1816
                self.pyteal_txn_asset_sender_expr()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1817
                self.pyteal_txn_asset_receiver_expr()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1818
                self.pyteal_txn_asset_close_to_expr()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1819
                self.pyteal_txn_vote_pk_expr()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1820
                self.pyteal_txn_selection_pk_expr()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1821
                self.pyteal_txn_state_proof_pk_expr()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1822
                self.pyteal_txn_vote_first_expr()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1823
                self.pyteal_txn_vote_last_expr()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1824
                self.pyteal_txn_vote_key_dilution_expr()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1825
                self.pyteal_txn_nonparticipation_expr()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1826
                self.pyteal_txn_receiver_expr()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1827
                self.pyteal_txn_amount_expr()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1828
                self.pyteal_txn_close_remainder_to_expr()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1829
                self.pyteal_txntype_Unknown_expr()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1830
                self.pyteal_txntype_Payment_expr()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1831
                self.pyteal_txntype_KeyRegistration_expr()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1832
                self.pyteal_txntype_AssetConfig_expr()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1833
                self.pyteal_txntype_AssetTransfer_expr()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1834
                self.pyteal_txntype_AssetFreeze_expr()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1835
                self.pyteal_txntype_ApplicationCall_expr()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1836
                self.pyteal_global_min_txn_fee_expr()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1837
                self.pyteal_global_min_balance_expr()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1838
                self.pyteal_global_max_txn_life_expr()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1839
                self.pyteal_global_zero_address_expr()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1840
                self.pyteal_global_group_size_expr()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1841
                self.pyteal_global_logic_sig_version_expr()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1842
                self.pyteal_global_round_expr()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1843
                self.pyteal_global_latest_timestamp_expr()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1844
                self.pyteal_global_current_application_id_expr()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1845
                self.pyteal_global_creator_address_expr()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1846
                self.pyteal_global_current_application_address_expr()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 1847
                self.pyteal_global_group_id_expr()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 1848
                self.match(PyTealParser.PYTEAL_TXN)
                self.state = 1852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1849
                        self.trailer() 
                    self.state = 1854
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_type_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_TYPE(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_TYPE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_type_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_type_expr" ):
                listener.enterPyteal_txn_type_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_type_expr" ):
                listener.exitPyteal_txn_type_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_type_expr" ):
                return visitor.visitPyteal_txn_type_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_type_expr(self):

        localctx = PyTealParser.Pyteal_txn_type_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_pyteal_txn_type_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1858
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1859
            self.match(PyTealParser.PYTEAL_TXN_TYPE)
            self.state = 1860
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1861
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1865
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1862
                    self.trailer() 
                self.state = 1867
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_type_enum_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_TYPE_ENUM(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_TYPE_ENUM, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_type_enum_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_type_enum_expr" ):
                listener.enterPyteal_txn_type_enum_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_type_enum_expr" ):
                listener.exitPyteal_txn_type_enum_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_type_enum_expr" ):
                return visitor.visitPyteal_txn_type_enum_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_type_enum_expr(self):

        localctx = PyTealParser.Pyteal_txn_type_enum_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_pyteal_txn_type_enum_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1868
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1869
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1870
            self.match(PyTealParser.PYTEAL_TXN_TYPE_ENUM)
            self.state = 1871
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1872
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1876
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1873
                    self.trailer() 
                self.state = 1878
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_sender_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_SENDER(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_SENDER, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_sender_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_sender_expr" ):
                listener.enterPyteal_txn_sender_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_sender_expr" ):
                listener.exitPyteal_txn_sender_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_sender_expr" ):
                return visitor.visitPyteal_txn_sender_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_sender_expr(self):

        localctx = PyTealParser.Pyteal_txn_sender_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_pyteal_txn_sender_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1879
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1880
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1881
            self.match(PyTealParser.PYTEAL_TXN_SENDER)
            self.state = 1882
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1883
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1884
                    self.trailer() 
                self.state = 1889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_fee_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_FEE(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_FEE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_fee_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_fee_expr" ):
                listener.enterPyteal_txn_fee_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_fee_expr" ):
                listener.exitPyteal_txn_fee_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_fee_expr" ):
                return visitor.visitPyteal_txn_fee_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_fee_expr(self):

        localctx = PyTealParser.Pyteal_txn_fee_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_pyteal_txn_fee_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1890
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1891
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1892
            self.match(PyTealParser.PYTEAL_TXN_FEE)
            self.state = 1893
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1894
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1898
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1895
                    self.trailer() 
                self.state = 1900
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_first_valid_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_FIRST_VALID(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_FIRST_VALID, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_first_valid_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_first_valid_expr" ):
                listener.enterPyteal_txn_first_valid_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_first_valid_expr" ):
                listener.exitPyteal_txn_first_valid_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_first_valid_expr" ):
                return visitor.visitPyteal_txn_first_valid_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_first_valid_expr(self):

        localctx = PyTealParser.Pyteal_txn_first_valid_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_pyteal_txn_first_valid_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1902
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1903
            self.match(PyTealParser.PYTEAL_TXN_FIRST_VALID)
            self.state = 1904
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1905
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1909
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1906
                    self.trailer() 
                self.state = 1911
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_first_valid_time_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_FIRST_VALID_TIME(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_FIRST_VALID_TIME, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_first_valid_time_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_first_valid_time_expr" ):
                listener.enterPyteal_txn_first_valid_time_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_first_valid_time_expr" ):
                listener.exitPyteal_txn_first_valid_time_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_first_valid_time_expr" ):
                return visitor.visitPyteal_txn_first_valid_time_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_first_valid_time_expr(self):

        localctx = PyTealParser.Pyteal_txn_first_valid_time_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_pyteal_txn_first_valid_time_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1913
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1914
            self.match(PyTealParser.PYTEAL_TXN_FIRST_VALID_TIME)
            self.state = 1915
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1916
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1920
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1917
                    self.trailer() 
                self.state = 1922
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_last_valid_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_LAST_VALID(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_LAST_VALID, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_last_valid_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_last_valid_expr" ):
                listener.enterPyteal_txn_last_valid_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_last_valid_expr" ):
                listener.exitPyteal_txn_last_valid_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_last_valid_expr" ):
                return visitor.visitPyteal_txn_last_valid_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_last_valid_expr(self):

        localctx = PyTealParser.Pyteal_txn_last_valid_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_pyteal_txn_last_valid_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1923
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1924
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1925
            self.match(PyTealParser.PYTEAL_TXN_LAST_VALID)
            self.state = 1926
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1927
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1931
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1928
                    self.trailer() 
                self.state = 1933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_note_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_NOTE(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_NOTE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_note_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_note_expr" ):
                listener.enterPyteal_txn_note_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_note_expr" ):
                listener.exitPyteal_txn_note_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_note_expr" ):
                return visitor.visitPyteal_txn_note_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_note_expr(self):

        localctx = PyTealParser.Pyteal_txn_note_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_pyteal_txn_note_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1935
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1936
            self.match(PyTealParser.PYTEAL_TXN_NOTE)
            self.state = 1937
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1938
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1942
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1939
                    self.trailer() 
                self.state = 1944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_lease_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_LEASE(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_LEASE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_lease_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_lease_expr" ):
                listener.enterPyteal_txn_lease_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_lease_expr" ):
                listener.exitPyteal_txn_lease_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_lease_expr" ):
                return visitor.visitPyteal_txn_lease_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_lease_expr(self):

        localctx = PyTealParser.Pyteal_txn_lease_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_pyteal_txn_lease_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1945
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1946
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1947
            self.match(PyTealParser.PYTEAL_TXN_LEASE)
            self.state = 1948
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1949
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1953
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1950
                    self.trailer() 
                self.state = 1955
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_group_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_GROUP_INDEX(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_GROUP_INDEX, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_group_index_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_group_index_expr" ):
                listener.enterPyteal_txn_group_index_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_group_index_expr" ):
                listener.exitPyteal_txn_group_index_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_group_index_expr" ):
                return visitor.visitPyteal_txn_group_index_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_group_index_expr(self):

        localctx = PyTealParser.Pyteal_txn_group_index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_pyteal_txn_group_index_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1956
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1957
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1958
            self.match(PyTealParser.PYTEAL_TXN_GROUP_INDEX)
            self.state = 1959
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1960
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1964
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1961
                    self.trailer() 
                self.state = 1966
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_tx_id_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_TXN_ID(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_TXN_ID, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_tx_id_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_tx_id_expr" ):
                listener.enterPyteal_txn_tx_id_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_tx_id_expr" ):
                listener.exitPyteal_txn_tx_id_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_tx_id_expr" ):
                return visitor.visitPyteal_txn_tx_id_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_tx_id_expr(self):

        localctx = PyTealParser.Pyteal_txn_tx_id_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_pyteal_txn_tx_id_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1967
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1968
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1969
            self.match(PyTealParser.PYTEAL_TXN_TXN_ID)
            self.state = 1970
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1971
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1975
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1972
                    self.trailer() 
                self.state = 1977
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_rekey_to_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_REKEY_TO(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_REKEY_TO, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_rekey_to_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_rekey_to_expr" ):
                listener.enterPyteal_txn_rekey_to_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_rekey_to_expr" ):
                listener.exitPyteal_txn_rekey_to_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_rekey_to_expr" ):
                return visitor.visitPyteal_txn_rekey_to_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_rekey_to_expr(self):

        localctx = PyTealParser.Pyteal_txn_rekey_to_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_pyteal_txn_rekey_to_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1979
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1980
            self.match(PyTealParser.PYTEAL_TXN_REKEY_TO)
            self.state = 1981
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1982
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1986
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1983
                    self.trailer() 
                self.state = 1988
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_application_id_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_APPLICATION_ID(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_APPLICATION_ID, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_application_id_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_application_id_expr" ):
                listener.enterPyteal_txn_application_id_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_application_id_expr" ):
                listener.exitPyteal_txn_application_id_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_application_id_expr" ):
                return visitor.visitPyteal_txn_application_id_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_application_id_expr(self):

        localctx = PyTealParser.Pyteal_txn_application_id_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_pyteal_txn_application_id_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1989
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 1990
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 1991
            self.match(PyTealParser.PYTEAL_TXN_APPLICATION_ID)
            self.state = 1992
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 1993
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 1997
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1994
                    self.trailer() 
                self.state = 1999
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_on_completion_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_ON_COMPLETION(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_ON_COMPLETION, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_on_completion_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_on_completion_expr" ):
                listener.enterPyteal_txn_on_completion_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_on_completion_expr" ):
                listener.exitPyteal_txn_on_completion_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_on_completion_expr" ):
                return visitor.visitPyteal_txn_on_completion_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_on_completion_expr(self):

        localctx = PyTealParser.Pyteal_txn_on_completion_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_pyteal_txn_on_completion_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2001
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2002
            self.match(PyTealParser.PYTEAL_TXN_ON_COMPLETION)
            self.state = 2003
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2004
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2008
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2005
                    self.trailer() 
                self.state = 2010
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_approval_program_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_APPROVAL_PROGRAM(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_APPROVAL_PROGRAM, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_approval_program_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_approval_program_expr" ):
                listener.enterPyteal_txn_approval_program_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_approval_program_expr" ):
                listener.exitPyteal_txn_approval_program_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_approval_program_expr" ):
                return visitor.visitPyteal_txn_approval_program_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_approval_program_expr(self):

        localctx = PyTealParser.Pyteal_txn_approval_program_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_pyteal_txn_approval_program_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2011
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2012
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2013
            self.match(PyTealParser.PYTEAL_TXN_APPROVAL_PROGRAM)
            self.state = 2014
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2015
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2019
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2016
                    self.trailer() 
                self.state = 2021
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_global_num_uints_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_GLOBAL_NUM_UINTS(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_GLOBAL_NUM_UINTS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_global_num_uints_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_global_num_uints_expr" ):
                listener.enterPyteal_txn_global_num_uints_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_global_num_uints_expr" ):
                listener.exitPyteal_txn_global_num_uints_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_global_num_uints_expr" ):
                return visitor.visitPyteal_txn_global_num_uints_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_global_num_uints_expr(self):

        localctx = PyTealParser.Pyteal_txn_global_num_uints_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_pyteal_txn_global_num_uints_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2023
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2024
            self.match(PyTealParser.PYTEAL_TXN_GLOBAL_NUM_UINTS)
            self.state = 2025
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2026
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2030
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2027
                    self.trailer() 
                self.state = 2032
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_global_num_byte_slices_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_GLOBAL_NUM_BYTE_SLICES(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_GLOBAL_NUM_BYTE_SLICES, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_global_num_byte_slices_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_global_num_byte_slices_expr" ):
                listener.enterPyteal_txn_global_num_byte_slices_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_global_num_byte_slices_expr" ):
                listener.exitPyteal_txn_global_num_byte_slices_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_global_num_byte_slices_expr" ):
                return visitor.visitPyteal_txn_global_num_byte_slices_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_global_num_byte_slices_expr(self):

        localctx = PyTealParser.Pyteal_txn_global_num_byte_slices_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_pyteal_txn_global_num_byte_slices_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2033
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2034
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2035
            self.match(PyTealParser.PYTEAL_TXN_GLOBAL_NUM_BYTE_SLICES)
            self.state = 2036
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2037
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2041
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2038
                    self.trailer() 
                self.state = 2043
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_local_num_uints_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_GLOBAL_LOCAL_NUM_UINTS(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_GLOBAL_LOCAL_NUM_UINTS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_local_num_uints_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_local_num_uints_expr" ):
                listener.enterPyteal_txn_local_num_uints_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_local_num_uints_expr" ):
                listener.exitPyteal_txn_local_num_uints_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_local_num_uints_expr" ):
                return visitor.visitPyteal_txn_local_num_uints_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_local_num_uints_expr(self):

        localctx = PyTealParser.Pyteal_txn_local_num_uints_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_pyteal_txn_local_num_uints_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2045
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2046
            self.match(PyTealParser.PYTEAL_TXN_GLOBAL_LOCAL_NUM_UINTS)
            self.state = 2047
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2048
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2052
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2049
                    self.trailer() 
                self.state = 2054
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_local_num_byte_slices_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_LOCAL_NUM_BYTE_SLICES(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_LOCAL_NUM_BYTE_SLICES, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_local_num_byte_slices_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_local_num_byte_slices_expr" ):
                listener.enterPyteal_txn_local_num_byte_slices_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_local_num_byte_slices_expr" ):
                listener.exitPyteal_txn_local_num_byte_slices_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_local_num_byte_slices_expr" ):
                return visitor.visitPyteal_txn_local_num_byte_slices_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_local_num_byte_slices_expr(self):

        localctx = PyTealParser.Pyteal_txn_local_num_byte_slices_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_pyteal_txn_local_num_byte_slices_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2056
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2057
            self.match(PyTealParser.PYTEAL_TXN_LOCAL_NUM_BYTE_SLICES)
            self.state = 2058
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2059
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2063
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2060
                    self.trailer() 
                self.state = 2065
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_accounts_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_ACCOUNTS(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_ACCOUNTS, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_accounts_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_accounts_expr" ):
                listener.enterPyteal_txn_accounts_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_accounts_expr" ):
                listener.exitPyteal_txn_accounts_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_accounts_expr" ):
                return visitor.visitPyteal_txn_accounts_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_accounts_expr(self):

        localctx = PyTealParser.Pyteal_txn_accounts_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_pyteal_txn_accounts_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2066
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2067
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2068
            self.match(PyTealParser.PYTEAL_TXN_ACCOUNTS)
            self.state = 2072
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2069
                    self.trailer() 
                self.state = 2074
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_assets_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_ASSETS(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_ASSETS, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_assets_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_assets_expr" ):
                listener.enterPyteal_txn_assets_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_assets_expr" ):
                listener.exitPyteal_txn_assets_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_assets_expr" ):
                return visitor.visitPyteal_txn_assets_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_assets_expr(self):

        localctx = PyTealParser.Pyteal_txn_assets_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_pyteal_txn_assets_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2076
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2077
            self.match(PyTealParser.PYTEAL_TXN_ASSETS)
            self.state = 2081
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2078
                    self.trailer() 
                self.state = 2083
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_applications_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_APPLICATIONS(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_APPLICATIONS, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_applications_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_applications_expr" ):
                listener.enterPyteal_txn_applications_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_applications_expr" ):
                listener.exitPyteal_txn_applications_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_applications_expr" ):
                return visitor.visitPyteal_txn_applications_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_applications_expr(self):

        localctx = PyTealParser.Pyteal_txn_applications_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_pyteal_txn_applications_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2084
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2085
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2086
            self.match(PyTealParser.PYTEAL_TXN_APPLICATIONS)
            self.state = 2090
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2087
                    self.trailer() 
                self.state = 2092
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_clear_state_program_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CLEAR_STATE_PROGRAM(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CLEAR_STATE_PROGRAM, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_clear_state_program_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_clear_state_program_expr" ):
                listener.enterPyteal_txn_clear_state_program_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_clear_state_program_expr" ):
                listener.exitPyteal_txn_clear_state_program_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_clear_state_program_expr" ):
                return visitor.visitPyteal_txn_clear_state_program_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_clear_state_program_expr(self):

        localctx = PyTealParser.Pyteal_txn_clear_state_program_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_pyteal_txn_clear_state_program_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2093
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2094
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2095
            self.match(PyTealParser.PYTEAL_TXN_CLEAR_STATE_PROGRAM)
            self.state = 2096
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2097
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2101
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2098
                    self.trailer() 
                self.state = 2103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_extra_program_pages_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_EXTRA_PROGRAM_PAGES(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_EXTRA_PROGRAM_PAGES, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_extra_program_pages_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_extra_program_pages_expr" ):
                listener.enterPyteal_txn_extra_program_pages_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_extra_program_pages_expr" ):
                listener.exitPyteal_txn_extra_program_pages_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_extra_program_pages_expr" ):
                return visitor.visitPyteal_txn_extra_program_pages_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_extra_program_pages_expr(self):

        localctx = PyTealParser.Pyteal_txn_extra_program_pages_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_pyteal_txn_extra_program_pages_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2104
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2105
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2106
            self.match(PyTealParser.PYTEAL_TXN_EXTRA_PROGRAM_PAGES)
            self.state = 2107
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2108
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2112
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2109
                    self.trailer() 
                self.state = 2114
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_application_args_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_APPLICATION_ARGS(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_APPLICATION_ARGS, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_application_args_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_application_args_expr" ):
                listener.enterPyteal_txn_application_args_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_application_args_expr" ):
                listener.exitPyteal_txn_application_args_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_application_args_expr" ):
                return visitor.visitPyteal_txn_application_args_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_application_args_expr(self):

        localctx = PyTealParser.Pyteal_txn_application_args_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_pyteal_txn_application_args_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2116
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2117
            self.match(PyTealParser.PYTEAL_TXN_APPLICATION_ARGS)
            self.state = 2121
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2118
                    self.trailer() 
                self.state = 2123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_created_application_id_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CREATED_APPLICATION_ID(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CREATED_APPLICATION_ID, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_created_application_id_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_created_application_id_expr" ):
                listener.enterPyteal_txn_created_application_id_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_created_application_id_expr" ):
                listener.exitPyteal_txn_created_application_id_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_created_application_id_expr" ):
                return visitor.visitPyteal_txn_created_application_id_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_created_application_id_expr(self):

        localctx = PyTealParser.Pyteal_txn_created_application_id_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_pyteal_txn_created_application_id_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2125
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2126
            self.match(PyTealParser.PYTEAL_TXN_CREATED_APPLICATION_ID)
            self.state = 2127
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2128
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2132
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2129
                    self.trailer() 
                self.state = 2134
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_logs_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_LOGS(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_LOGS, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_logs_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_logs_expr" ):
                listener.enterPyteal_txn_logs_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_logs_expr" ):
                listener.exitPyteal_txn_logs_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_logs_expr" ):
                return visitor.visitPyteal_txn_logs_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_logs_expr(self):

        localctx = PyTealParser.Pyteal_txn_logs_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_pyteal_txn_logs_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2136
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2137
            self.match(PyTealParser.PYTEAL_TXN_LOGS)
            self.state = 2141
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2138
                    self.trailer() 
                self.state = 2143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_last_log_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_LAST_LOG(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_LAST_LOG, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_last_log_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_last_log_expr" ):
                listener.enterPyteal_txn_last_log_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_last_log_expr" ):
                listener.exitPyteal_txn_last_log_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_last_log_expr" ):
                return visitor.visitPyteal_txn_last_log_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_last_log_expr(self):

        localctx = PyTealParser.Pyteal_txn_last_log_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_pyteal_txn_last_log_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2144
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2145
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2146
            self.match(PyTealParser.PYTEAL_TXN_LAST_LOG)
            self.state = 2147
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2148
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2152
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,219,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2149
                    self.trailer() 
                self.state = 2154
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,219,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_approval_program_pages_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_APPROVAL_PROGRAM_PAGES(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_APPROVAL_PROGRAM_PAGES, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_approval_program_pages_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_approval_program_pages_expr" ):
                listener.enterPyteal_txn_approval_program_pages_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_approval_program_pages_expr" ):
                listener.exitPyteal_txn_approval_program_pages_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_approval_program_pages_expr" ):
                return visitor.visitPyteal_txn_approval_program_pages_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_approval_program_pages_expr(self):

        localctx = PyTealParser.Pyteal_txn_approval_program_pages_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_pyteal_txn_approval_program_pages_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2156
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2157
            self.match(PyTealParser.PYTEAL_TXN_APPROVAL_PROGRAM_PAGES)
            self.state = 2158
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2159
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2163
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2160
                    self.trailer() 
                self.state = 2165
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_clear_state_program_pages_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CLEAR_STATE_PROGRAM_PAGES(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CLEAR_STATE_PROGRAM_PAGES, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_clear_state_program_pages_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_clear_state_program_pages_expr" ):
                listener.enterPyteal_txn_clear_state_program_pages_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_clear_state_program_pages_expr" ):
                listener.exitPyteal_txn_clear_state_program_pages_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_clear_state_program_pages_expr" ):
                return visitor.visitPyteal_txn_clear_state_program_pages_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_clear_state_program_pages_expr(self):

        localctx = PyTealParser.Pyteal_txn_clear_state_program_pages_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_pyteal_txn_clear_state_program_pages_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2166
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2167
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2168
            self.match(PyTealParser.PYTEAL_TXN_CLEAR_STATE_PROGRAM_PAGES)
            self.state = 2169
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2170
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2174
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2171
                    self.trailer() 
                self.state = 2176
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_expr" ):
                listener.enterPyteal_txn_config_asset_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_expr" ):
                listener.exitPyteal_txn_config_asset_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_expr" ):
                return visitor.visitPyteal_txn_config_asset_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_pyteal_txn_config_asset_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2178
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2179
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET)
            self.state = 2180
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2181
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2185
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2182
                    self.trailer() 
                self.state = 2187
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_total_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET_TOTAL(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_TOTAL, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_total_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_total_expr" ):
                listener.enterPyteal_txn_config_asset_total_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_total_expr" ):
                listener.exitPyteal_txn_config_asset_total_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_total_expr" ):
                return visitor.visitPyteal_txn_config_asset_total_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_total_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_total_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_pyteal_txn_config_asset_total_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2189
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2190
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_TOTAL)
            self.state = 2191
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2192
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2196
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2193
                    self.trailer() 
                self.state = 2198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_decimals_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET_DECIMALS(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_DECIMALS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_decimals_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_decimals_expr" ):
                listener.enterPyteal_txn_config_asset_decimals_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_decimals_expr" ):
                listener.exitPyteal_txn_config_asset_decimals_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_decimals_expr" ):
                return visitor.visitPyteal_txn_config_asset_decimals_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_decimals_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_decimals_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_pyteal_txn_config_asset_decimals_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2199
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2200
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2201
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_DECIMALS)
            self.state = 2202
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2203
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2207
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2204
                    self.trailer() 
                self.state = 2209
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_default_frozen_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET_DEFAULT_FROZEN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_DEFAULT_FROZEN, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_default_frozen_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_default_frozen_expr" ):
                listener.enterPyteal_txn_config_asset_default_frozen_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_default_frozen_expr" ):
                listener.exitPyteal_txn_config_asset_default_frozen_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_default_frozen_expr" ):
                return visitor.visitPyteal_txn_config_asset_default_frozen_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_default_frozen_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_default_frozen_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_pyteal_txn_config_asset_default_frozen_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2211
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2212
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_DEFAULT_FROZEN)
            self.state = 2213
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2214
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2218
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2215
                    self.trailer() 
                self.state = 2220
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_unit_name_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET_UNIT_NAME(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_UNIT_NAME, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_unit_name_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_unit_name_expr" ):
                listener.enterPyteal_txn_config_asset_unit_name_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_unit_name_expr" ):
                listener.exitPyteal_txn_config_asset_unit_name_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_unit_name_expr" ):
                return visitor.visitPyteal_txn_config_asset_unit_name_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_unit_name_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_unit_name_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_pyteal_txn_config_asset_unit_name_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2221
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2222
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2223
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_UNIT_NAME)
            self.state = 2224
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2225
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2226
                    self.trailer() 
                self.state = 2231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_name_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET_NAME(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_NAME, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_name_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_name_expr" ):
                listener.enterPyteal_txn_config_asset_name_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_name_expr" ):
                listener.exitPyteal_txn_config_asset_name_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_name_expr" ):
                return visitor.visitPyteal_txn_config_asset_name_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_name_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_name_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_pyteal_txn_config_asset_name_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2232
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2233
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2234
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_NAME)
            self.state = 2235
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2236
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2237
                    self.trailer() 
                self.state = 2242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_url_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET_URL(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_URL, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_url_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_url_expr" ):
                listener.enterPyteal_txn_config_asset_url_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_url_expr" ):
                listener.exitPyteal_txn_config_asset_url_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_url_expr" ):
                return visitor.visitPyteal_txn_config_asset_url_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_url_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_url_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_pyteal_txn_config_asset_url_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2243
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2244
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2245
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_URL)
            self.state = 2246
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2247
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2251
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,228,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2248
                    self.trailer() 
                self.state = 2253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,228,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_metadata_hash_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET_METADATA_HASH(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_METADATA_HASH, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_metadata_hash_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_metadata_hash_expr" ):
                listener.enterPyteal_txn_config_asset_metadata_hash_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_metadata_hash_expr" ):
                listener.exitPyteal_txn_config_asset_metadata_hash_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_metadata_hash_expr" ):
                return visitor.visitPyteal_txn_config_asset_metadata_hash_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_metadata_hash_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_metadata_hash_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_pyteal_txn_config_asset_metadata_hash_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2254
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2255
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2256
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_METADATA_HASH)
            self.state = 2257
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2258
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2262
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2259
                    self.trailer() 
                self.state = 2264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_manager_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET_MANAGER(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_MANAGER, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_manager_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_manager_expr" ):
                listener.enterPyteal_txn_config_asset_manager_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_manager_expr" ):
                listener.exitPyteal_txn_config_asset_manager_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_manager_expr" ):
                return visitor.visitPyteal_txn_config_asset_manager_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_manager_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_manager_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_pyteal_txn_config_asset_manager_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2265
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2266
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2267
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_MANAGER)
            self.state = 2268
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2269
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2273
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2270
                    self.trailer() 
                self.state = 2275
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_reserve_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET_RESERVE(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_RESERVE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_reserve_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_reserve_expr" ):
                listener.enterPyteal_txn_config_asset_reserve_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_reserve_expr" ):
                listener.exitPyteal_txn_config_asset_reserve_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_reserve_expr" ):
                return visitor.visitPyteal_txn_config_asset_reserve_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_reserve_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_reserve_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_pyteal_txn_config_asset_reserve_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2276
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2277
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2278
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_RESERVE)
            self.state = 2279
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2280
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2284
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2281
                    self.trailer() 
                self.state = 2286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_freeze_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET_FREEZE(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_FREEZE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_freeze_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_freeze_expr" ):
                listener.enterPyteal_txn_config_asset_freeze_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_freeze_expr" ):
                listener.exitPyteal_txn_config_asset_freeze_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_freeze_expr" ):
                return visitor.visitPyteal_txn_config_asset_freeze_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_freeze_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_freeze_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_pyteal_txn_config_asset_freeze_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2287
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2288
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2289
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_FREEZE)
            self.state = 2290
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2291
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2292
                    self.trailer() 
                self.state = 2297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_config_asset_clawback_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CONFIG_ASSET_CLAWBACK(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_CLAWBACK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_config_asset_clawback_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_config_asset_clawback_expr" ):
                listener.enterPyteal_txn_config_asset_clawback_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_config_asset_clawback_expr" ):
                listener.exitPyteal_txn_config_asset_clawback_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_config_asset_clawback_expr" ):
                return visitor.visitPyteal_txn_config_asset_clawback_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_config_asset_clawback_expr(self):

        localctx = PyTealParser.Pyteal_txn_config_asset_clawback_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_pyteal_txn_config_asset_clawback_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2298
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2299
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2300
            self.match(PyTealParser.PYTEAL_TXN_CONFIG_ASSET_CLAWBACK)
            self.state = 2301
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2302
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2306
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2303
                    self.trailer() 
                self.state = 2308
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_created_asset_id_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CREATED_ASSET_ID(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CREATED_ASSET_ID, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_created_asset_id_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_created_asset_id_expr" ):
                listener.enterPyteal_txn_created_asset_id_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_created_asset_id_expr" ):
                listener.exitPyteal_txn_created_asset_id_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_created_asset_id_expr" ):
                return visitor.visitPyteal_txn_created_asset_id_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_created_asset_id_expr(self):

        localctx = PyTealParser.Pyteal_txn_created_asset_id_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_pyteal_txn_created_asset_id_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2310
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2311
            self.match(PyTealParser.PYTEAL_TXN_CREATED_ASSET_ID)
            self.state = 2312
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2313
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2317
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2314
                    self.trailer() 
                self.state = 2319
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_freeze_asset_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_FREEZE_ASSET(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_FREEZE_ASSET, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_freeze_asset_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_freeze_asset_expr" ):
                listener.enterPyteal_txn_freeze_asset_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_freeze_asset_expr" ):
                listener.exitPyteal_txn_freeze_asset_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_freeze_asset_expr" ):
                return visitor.visitPyteal_txn_freeze_asset_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_freeze_asset_expr(self):

        localctx = PyTealParser.Pyteal_txn_freeze_asset_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_pyteal_txn_freeze_asset_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2321
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2322
            self.match(PyTealParser.PYTEAL_TXN_FREEZE_ASSET)
            self.state = 2323
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2324
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2325
                    self.trailer() 
                self.state = 2330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_freeze_asset_account_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_FREEZE_ASSET_ACCOUNT(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_FREEZE_ASSET_ACCOUNT, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_freeze_asset_account_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_freeze_asset_account_expr" ):
                listener.enterPyteal_txn_freeze_asset_account_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_freeze_asset_account_expr" ):
                listener.exitPyteal_txn_freeze_asset_account_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_freeze_asset_account_expr" ):
                return visitor.visitPyteal_txn_freeze_asset_account_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_freeze_asset_account_expr(self):

        localctx = PyTealParser.Pyteal_txn_freeze_asset_account_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_pyteal_txn_freeze_asset_account_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2331
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2332
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2333
            self.match(PyTealParser.PYTEAL_TXN_FREEZE_ASSET_ACCOUNT)
            self.state = 2334
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2335
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2336
                    self.trailer() 
                self.state = 2341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_freeze_asset_frozen_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_FREEZE_ASSET_FROZEN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_FREEZE_ASSET_FROZEN, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_freeze_asset_frozen_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_freeze_asset_frozen_expr" ):
                listener.enterPyteal_txn_freeze_asset_frozen_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_freeze_asset_frozen_expr" ):
                listener.exitPyteal_txn_freeze_asset_frozen_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_freeze_asset_frozen_expr" ):
                return visitor.visitPyteal_txn_freeze_asset_frozen_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_freeze_asset_frozen_expr(self):

        localctx = PyTealParser.Pyteal_txn_freeze_asset_frozen_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_pyteal_txn_freeze_asset_frozen_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2342
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2343
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2344
            self.match(PyTealParser.PYTEAL_TXN_FREEZE_ASSET_FROZEN)
            self.state = 2345
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2346
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2347
                    self.trailer() 
                self.state = 2352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_xfer_asset_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_XFER_ASSET(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_XFER_ASSET, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_xfer_asset_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_xfer_asset_expr" ):
                listener.enterPyteal_txn_xfer_asset_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_xfer_asset_expr" ):
                listener.exitPyteal_txn_xfer_asset_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_xfer_asset_expr" ):
                return visitor.visitPyteal_txn_xfer_asset_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_xfer_asset_expr(self):

        localctx = PyTealParser.Pyteal_txn_xfer_asset_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_pyteal_txn_xfer_asset_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2354
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2355
            self.match(PyTealParser.PYTEAL_TXN_XFER_ASSET)
            self.state = 2356
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2357
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2358
                    self.trailer() 
                self.state = 2363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_asset_amount_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_ASSET_AMOUNT(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_ASSET_AMOUNT, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_asset_amount_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_asset_amount_expr" ):
                listener.enterPyteal_txn_asset_amount_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_asset_amount_expr" ):
                listener.exitPyteal_txn_asset_amount_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_asset_amount_expr" ):
                return visitor.visitPyteal_txn_asset_amount_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_asset_amount_expr(self):

        localctx = PyTealParser.Pyteal_txn_asset_amount_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_pyteal_txn_asset_amount_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2364
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2365
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2366
            self.match(PyTealParser.PYTEAL_TXN_ASSET_AMOUNT)
            self.state = 2367
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2368
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2372
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2369
                    self.trailer() 
                self.state = 2374
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_asset_sender_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_ASSET_SENDER(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_ASSET_SENDER, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_asset_sender_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_asset_sender_expr" ):
                listener.enterPyteal_txn_asset_sender_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_asset_sender_expr" ):
                listener.exitPyteal_txn_asset_sender_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_asset_sender_expr" ):
                return visitor.visitPyteal_txn_asset_sender_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_asset_sender_expr(self):

        localctx = PyTealParser.Pyteal_txn_asset_sender_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_pyteal_txn_asset_sender_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2375
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2376
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2377
            self.match(PyTealParser.PYTEAL_TXN_ASSET_SENDER)
            self.state = 2378
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2379
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2383
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,240,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2380
                    self.trailer() 
                self.state = 2385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_asset_receiver_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_ASSET_RECEIVER(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_ASSET_RECEIVER, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_asset_receiver_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_asset_receiver_expr" ):
                listener.enterPyteal_txn_asset_receiver_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_asset_receiver_expr" ):
                listener.exitPyteal_txn_asset_receiver_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_asset_receiver_expr" ):
                return visitor.visitPyteal_txn_asset_receiver_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_asset_receiver_expr(self):

        localctx = PyTealParser.Pyteal_txn_asset_receiver_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_pyteal_txn_asset_receiver_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2386
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2387
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2388
            self.match(PyTealParser.PYTEAL_TXN_ASSET_RECEIVER)
            self.state = 2389
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2390
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2394
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2391
                    self.trailer() 
                self.state = 2396
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_asset_close_to_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_ASSET_CLOSE_TO(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_ASSET_CLOSE_TO, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_asset_close_to_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_asset_close_to_expr" ):
                listener.enterPyteal_txn_asset_close_to_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_asset_close_to_expr" ):
                listener.exitPyteal_txn_asset_close_to_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_asset_close_to_expr" ):
                return visitor.visitPyteal_txn_asset_close_to_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_asset_close_to_expr(self):

        localctx = PyTealParser.Pyteal_txn_asset_close_to_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_pyteal_txn_asset_close_to_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2397
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2398
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2399
            self.match(PyTealParser.PYTEAL_TXN_ASSET_CLOSE_TO)
            self.state = 2400
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2401
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2402
                    self.trailer() 
                self.state = 2407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_vote_pk_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_VOTE_PK(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_VOTE_PK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_vote_pk_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_vote_pk_expr" ):
                listener.enterPyteal_txn_vote_pk_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_vote_pk_expr" ):
                listener.exitPyteal_txn_vote_pk_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_vote_pk_expr" ):
                return visitor.visitPyteal_txn_vote_pk_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_vote_pk_expr(self):

        localctx = PyTealParser.Pyteal_txn_vote_pk_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_pyteal_txn_vote_pk_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2408
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2409
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2410
            self.match(PyTealParser.PYTEAL_TXN_VOTE_PK)
            self.state = 2411
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2412
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2416
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2413
                    self.trailer() 
                self.state = 2418
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_selection_pk_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_SELECTION_PK(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_SELECTION_PK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_selection_pk_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_selection_pk_expr" ):
                listener.enterPyteal_txn_selection_pk_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_selection_pk_expr" ):
                listener.exitPyteal_txn_selection_pk_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_selection_pk_expr" ):
                return visitor.visitPyteal_txn_selection_pk_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_selection_pk_expr(self):

        localctx = PyTealParser.Pyteal_txn_selection_pk_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_pyteal_txn_selection_pk_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2419
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2420
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2421
            self.match(PyTealParser.PYTEAL_TXN_SELECTION_PK)
            self.state = 2422
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2423
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2427
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2424
                    self.trailer() 
                self.state = 2429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_state_proof_pk_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_STATE_PROOF_PK(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_STATE_PROOF_PK, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_state_proof_pk_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_state_proof_pk_expr" ):
                listener.enterPyteal_txn_state_proof_pk_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_state_proof_pk_expr" ):
                listener.exitPyteal_txn_state_proof_pk_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_state_proof_pk_expr" ):
                return visitor.visitPyteal_txn_state_proof_pk_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_state_proof_pk_expr(self):

        localctx = PyTealParser.Pyteal_txn_state_proof_pk_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_pyteal_txn_state_proof_pk_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2431
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2432
            self.match(PyTealParser.PYTEAL_TXN_STATE_PROOF_PK)
            self.state = 2436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2433
                    self.trailer() 
                self.state = 2438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_vote_first_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_VOTE_FIRST(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_VOTE_FIRST, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_vote_first_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_vote_first_expr" ):
                listener.enterPyteal_txn_vote_first_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_vote_first_expr" ):
                listener.exitPyteal_txn_vote_first_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_vote_first_expr" ):
                return visitor.visitPyteal_txn_vote_first_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_vote_first_expr(self):

        localctx = PyTealParser.Pyteal_txn_vote_first_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_pyteal_txn_vote_first_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2439
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2440
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2441
            self.match(PyTealParser.PYTEAL_TXN_VOTE_FIRST)
            self.state = 2442
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2443
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2447
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2444
                    self.trailer() 
                self.state = 2449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_vote_last_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_VOTE_LAST(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_VOTE_LAST, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_vote_last_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_vote_last_expr" ):
                listener.enterPyteal_txn_vote_last_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_vote_last_expr" ):
                listener.exitPyteal_txn_vote_last_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_vote_last_expr" ):
                return visitor.visitPyteal_txn_vote_last_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_vote_last_expr(self):

        localctx = PyTealParser.Pyteal_txn_vote_last_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_pyteal_txn_vote_last_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2450
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2451
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2452
            self.match(PyTealParser.PYTEAL_TXN_VOTE_LAST)
            self.state = 2453
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2454
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2458
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2455
                    self.trailer() 
                self.state = 2460
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_vote_key_dilution_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_VOTE_KEY_DILUTION(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_VOTE_KEY_DILUTION, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_vote_key_dilution_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_vote_key_dilution_expr" ):
                listener.enterPyteal_txn_vote_key_dilution_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_vote_key_dilution_expr" ):
                listener.exitPyteal_txn_vote_key_dilution_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_vote_key_dilution_expr" ):
                return visitor.visitPyteal_txn_vote_key_dilution_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_vote_key_dilution_expr(self):

        localctx = PyTealParser.Pyteal_txn_vote_key_dilution_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_pyteal_txn_vote_key_dilution_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2462
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2463
            self.match(PyTealParser.PYTEAL_TXN_VOTE_KEY_DILUTION)
            self.state = 2464
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2465
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2469
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2466
                    self.trailer() 
                self.state = 2471
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_nonparticipation_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_NONPARTICIPATION(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_NONPARTICIPATION, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_nonparticipation_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_nonparticipation_expr" ):
                listener.enterPyteal_txn_nonparticipation_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_nonparticipation_expr" ):
                listener.exitPyteal_txn_nonparticipation_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_nonparticipation_expr" ):
                return visitor.visitPyteal_txn_nonparticipation_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_nonparticipation_expr(self):

        localctx = PyTealParser.Pyteal_txn_nonparticipation_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_pyteal_txn_nonparticipation_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2472
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2473
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2474
            self.match(PyTealParser.PYTEAL_TXN_NONPARTICIPATION)
            self.state = 2475
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2476
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2480
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2477
                    self.trailer() 
                self.state = 2482
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_receiver_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_RECEIVER(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_RECEIVER, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_receiver_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_receiver_expr" ):
                listener.enterPyteal_txn_receiver_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_receiver_expr" ):
                listener.exitPyteal_txn_receiver_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_receiver_expr" ):
                return visitor.visitPyteal_txn_receiver_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_receiver_expr(self):

        localctx = PyTealParser.Pyteal_txn_receiver_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_pyteal_txn_receiver_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2483
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2484
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2485
            self.match(PyTealParser.PYTEAL_TXN_RECEIVER)
            self.state = 2486
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2487
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2491
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2488
                    self.trailer() 
                self.state = 2493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_amount_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_AMOUNT(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_AMOUNT, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_amount_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_amount_expr" ):
                listener.enterPyteal_txn_amount_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_amount_expr" ):
                listener.exitPyteal_txn_amount_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_amount_expr" ):
                return visitor.visitPyteal_txn_amount_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_amount_expr(self):

        localctx = PyTealParser.Pyteal_txn_amount_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_pyteal_txn_amount_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2494
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2495
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2496
            self.match(PyTealParser.PYTEAL_TXN_AMOUNT)
            self.state = 2497
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2498
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2502
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2499
                    self.trailer() 
                self.state = 2504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txn_close_remainder_to_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXN(self):
            return self.getToken(PyTealParser.PYTEAL_TXN, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXN_CLOSE_REMAINDER_TO(self):
            return self.getToken(PyTealParser.PYTEAL_TXN_CLOSE_REMAINDER_TO, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txn_close_remainder_to_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txn_close_remainder_to_expr" ):
                listener.enterPyteal_txn_close_remainder_to_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txn_close_remainder_to_expr" ):
                listener.exitPyteal_txn_close_remainder_to_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txn_close_remainder_to_expr" ):
                return visitor.visitPyteal_txn_close_remainder_to_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txn_close_remainder_to_expr(self):

        localctx = PyTealParser.Pyteal_txn_close_remainder_to_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_pyteal_txn_close_remainder_to_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2505
            self.match(PyTealParser.PYTEAL_TXN)
            self.state = 2506
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2507
            self.match(PyTealParser.PYTEAL_TXN_CLOSE_REMAINDER_TO)
            self.state = 2508
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2509
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2513
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2510
                    self.trailer() 
                self.state = 2515
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txntype_Unknown_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXNTYPE(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXNTYPE_UNKNOWN(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE_UNKNOWN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txntype_Unknown_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txntype_Unknown_expr" ):
                listener.enterPyteal_txntype_Unknown_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txntype_Unknown_expr" ):
                listener.exitPyteal_txntype_Unknown_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txntype_Unknown_expr" ):
                return visitor.visitPyteal_txntype_Unknown_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txntype_Unknown_expr(self):

        localctx = PyTealParser.Pyteal_txntype_Unknown_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_pyteal_txntype_Unknown_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2516
            self.match(PyTealParser.PYTEAL_TXNTYPE)
            self.state = 2517
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2518
            self.match(PyTealParser.PYTEAL_TXNTYPE_UNKNOWN)
            self.state = 2522
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2519
                    self.trailer() 
                self.state = 2524
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txntype_Payment_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXNTYPE(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXNTYPE_PAYMENT(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE_PAYMENT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txntype_Payment_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txntype_Payment_expr" ):
                listener.enterPyteal_txntype_Payment_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txntype_Payment_expr" ):
                listener.exitPyteal_txntype_Payment_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txntype_Payment_expr" ):
                return visitor.visitPyteal_txntype_Payment_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txntype_Payment_expr(self):

        localctx = PyTealParser.Pyteal_txntype_Payment_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_pyteal_txntype_Payment_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2525
            self.match(PyTealParser.PYTEAL_TXNTYPE)
            self.state = 2526
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2527
            self.match(PyTealParser.PYTEAL_TXNTYPE_PAYMENT)
            self.state = 2531
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2528
                    self.trailer() 
                self.state = 2533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txntype_KeyRegistration_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXNTYPE(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXNTYPE_KEYREGISTRATION(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE_KEYREGISTRATION, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txntype_KeyRegistration_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txntype_KeyRegistration_expr" ):
                listener.enterPyteal_txntype_KeyRegistration_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txntype_KeyRegistration_expr" ):
                listener.exitPyteal_txntype_KeyRegistration_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txntype_KeyRegistration_expr" ):
                return visitor.visitPyteal_txntype_KeyRegistration_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txntype_KeyRegistration_expr(self):

        localctx = PyTealParser.Pyteal_txntype_KeyRegistration_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_pyteal_txntype_KeyRegistration_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2534
            self.match(PyTealParser.PYTEAL_TXNTYPE)
            self.state = 2535
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2536
            self.match(PyTealParser.PYTEAL_TXNTYPE_KEYREGISTRATION)
            self.state = 2540
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2537
                    self.trailer() 
                self.state = 2542
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txntype_AssetConfig_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXNTYPE(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXNTYPE_ASSETCONFIG(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE_ASSETCONFIG, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txntype_AssetConfig_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txntype_AssetConfig_expr" ):
                listener.enterPyteal_txntype_AssetConfig_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txntype_AssetConfig_expr" ):
                listener.exitPyteal_txntype_AssetConfig_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txntype_AssetConfig_expr" ):
                return visitor.visitPyteal_txntype_AssetConfig_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txntype_AssetConfig_expr(self):

        localctx = PyTealParser.Pyteal_txntype_AssetConfig_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_pyteal_txntype_AssetConfig_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2543
            self.match(PyTealParser.PYTEAL_TXNTYPE)
            self.state = 2544
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2545
            self.match(PyTealParser.PYTEAL_TXNTYPE_ASSETCONFIG)
            self.state = 2549
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2546
                    self.trailer() 
                self.state = 2551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txntype_AssetTransfer_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXNTYPE(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXNTYPE_ASSETTRANSFER(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE_ASSETTRANSFER, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txntype_AssetTransfer_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txntype_AssetTransfer_expr" ):
                listener.enterPyteal_txntype_AssetTransfer_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txntype_AssetTransfer_expr" ):
                listener.exitPyteal_txntype_AssetTransfer_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txntype_AssetTransfer_expr" ):
                return visitor.visitPyteal_txntype_AssetTransfer_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txntype_AssetTransfer_expr(self):

        localctx = PyTealParser.Pyteal_txntype_AssetTransfer_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_pyteal_txntype_AssetTransfer_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2552
            self.match(PyTealParser.PYTEAL_TXNTYPE)
            self.state = 2553
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2554
            self.match(PyTealParser.PYTEAL_TXNTYPE_ASSETTRANSFER)
            self.state = 2558
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2555
                    self.trailer() 
                self.state = 2560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txntype_AssetFreeze_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXNTYPE(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXNTYPE_ASSETFREEZE(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE_ASSETFREEZE, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txntype_AssetFreeze_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txntype_AssetFreeze_expr" ):
                listener.enterPyteal_txntype_AssetFreeze_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txntype_AssetFreeze_expr" ):
                listener.exitPyteal_txntype_AssetFreeze_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txntype_AssetFreeze_expr" ):
                return visitor.visitPyteal_txntype_AssetFreeze_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txntype_AssetFreeze_expr(self):

        localctx = PyTealParser.Pyteal_txntype_AssetFreeze_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_pyteal_txntype_AssetFreeze_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2561
            self.match(PyTealParser.PYTEAL_TXNTYPE)
            self.state = 2562
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2563
            self.match(PyTealParser.PYTEAL_TXNTYPE_ASSETFREEZE)
            self.state = 2567
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2564
                    self.trailer() 
                self.state = 2569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_txntype_ApplicationCall_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_TXNTYPE(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_TXNTYPE_APPLICATIONCALL(self):
            return self.getToken(PyTealParser.PYTEAL_TXNTYPE_APPLICATIONCALL, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_txntype_ApplicationCall_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_txntype_ApplicationCall_expr" ):
                listener.enterPyteal_txntype_ApplicationCall_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_txntype_ApplicationCall_expr" ):
                listener.exitPyteal_txntype_ApplicationCall_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_txntype_ApplicationCall_expr" ):
                return visitor.visitPyteal_txntype_ApplicationCall_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_txntype_ApplicationCall_expr(self):

        localctx = PyTealParser.Pyteal_txntype_ApplicationCall_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_pyteal_txntype_ApplicationCall_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2570
            self.match(PyTealParser.PYTEAL_TXNTYPE)
            self.state = 2571
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2572
            self.match(PyTealParser.PYTEAL_TXNTYPE_APPLICATIONCALL)
            self.state = 2576
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2573
                    self.trailer() 
                self.state = 2578
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_min_txn_fee_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_MIN_TXN_FEE(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_MIN_TXN_FEE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_min_txn_fee_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_min_txn_fee_expr" ):
                listener.enterPyteal_global_min_txn_fee_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_min_txn_fee_expr" ):
                listener.exitPyteal_global_min_txn_fee_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_min_txn_fee_expr" ):
                return visitor.visitPyteal_global_min_txn_fee_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_min_txn_fee_expr(self):

        localctx = PyTealParser.Pyteal_global_min_txn_fee_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_pyteal_global_min_txn_fee_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2579
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2580
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2581
            self.match(PyTealParser.PYTEAL_GLOBAL_MIN_TXN_FEE)
            self.state = 2582
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2583
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2587
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,260,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2584
                    self.trailer() 
                self.state = 2589
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,260,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_min_balance_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_MIN_BALANCE(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_MIN_BALANCE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_min_balance_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_min_balance_expr" ):
                listener.enterPyteal_global_min_balance_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_min_balance_expr" ):
                listener.exitPyteal_global_min_balance_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_min_balance_expr" ):
                return visitor.visitPyteal_global_min_balance_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_min_balance_expr(self):

        localctx = PyTealParser.Pyteal_global_min_balance_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_pyteal_global_min_balance_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2591
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2592
            self.match(PyTealParser.PYTEAL_GLOBAL_MIN_BALANCE)
            self.state = 2593
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2594
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2598
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,261,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2595
                    self.trailer() 
                self.state = 2600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_max_txn_life_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_MAX_TXN_LIFE(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_MAX_TXN_LIFE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_max_txn_life_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_max_txn_life_expr" ):
                listener.enterPyteal_global_max_txn_life_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_max_txn_life_expr" ):
                listener.exitPyteal_global_max_txn_life_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_max_txn_life_expr" ):
                return visitor.visitPyteal_global_max_txn_life_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_max_txn_life_expr(self):

        localctx = PyTealParser.Pyteal_global_max_txn_life_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_pyteal_global_max_txn_life_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2601
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2602
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2603
            self.match(PyTealParser.PYTEAL_GLOBAL_MAX_TXN_LIFE)
            self.state = 2604
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2605
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2609
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2606
                    self.trailer() 
                self.state = 2611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_zero_address_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_ZERO_ADDRESS(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_ZERO_ADDRESS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_zero_address_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_zero_address_expr" ):
                listener.enterPyteal_global_zero_address_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_zero_address_expr" ):
                listener.exitPyteal_global_zero_address_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_zero_address_expr" ):
                return visitor.visitPyteal_global_zero_address_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_zero_address_expr(self):

        localctx = PyTealParser.Pyteal_global_zero_address_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_pyteal_global_zero_address_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2612
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2613
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2614
            self.match(PyTealParser.PYTEAL_GLOBAL_ZERO_ADDRESS)
            self.state = 2615
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2616
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2620
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,263,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2617
                    self.trailer() 
                self.state = 2622
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,263,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_group_size_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_GROUP_SIZE(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_GROUP_SIZE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_group_size_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_group_size_expr" ):
                listener.enterPyteal_global_group_size_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_group_size_expr" ):
                listener.exitPyteal_global_group_size_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_group_size_expr" ):
                return visitor.visitPyteal_global_group_size_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_group_size_expr(self):

        localctx = PyTealParser.Pyteal_global_group_size_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_pyteal_global_group_size_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2623
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2624
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2625
            self.match(PyTealParser.PYTEAL_GLOBAL_GROUP_SIZE)
            self.state = 2626
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2627
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2631
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2628
                    self.trailer() 
                self.state = 2633
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_logic_sig_version_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_LOGIC_SIG_VERSION(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_LOGIC_SIG_VERSION, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_logic_sig_version_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_logic_sig_version_expr" ):
                listener.enterPyteal_global_logic_sig_version_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_logic_sig_version_expr" ):
                listener.exitPyteal_global_logic_sig_version_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_logic_sig_version_expr" ):
                return visitor.visitPyteal_global_logic_sig_version_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_logic_sig_version_expr(self):

        localctx = PyTealParser.Pyteal_global_logic_sig_version_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_pyteal_global_logic_sig_version_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2634
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2635
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2636
            self.match(PyTealParser.PYTEAL_GLOBAL_LOGIC_SIG_VERSION)
            self.state = 2637
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2638
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2642
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2639
                    self.trailer() 
                self.state = 2644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_round_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_ROUND(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_ROUND, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_round_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_round_expr" ):
                listener.enterPyteal_global_round_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_round_expr" ):
                listener.exitPyteal_global_round_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_round_expr" ):
                return visitor.visitPyteal_global_round_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_round_expr(self):

        localctx = PyTealParser.Pyteal_global_round_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_pyteal_global_round_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2645
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2646
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2647
            self.match(PyTealParser.PYTEAL_GLOBAL_ROUND)
            self.state = 2648
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2649
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2653
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,266,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2650
                    self.trailer() 
                self.state = 2655
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_latest_timestamp_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_LATEST_TIMESTAMP(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_LATEST_TIMESTAMP, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_latest_timestamp_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_latest_timestamp_expr" ):
                listener.enterPyteal_global_latest_timestamp_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_latest_timestamp_expr" ):
                listener.exitPyteal_global_latest_timestamp_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_latest_timestamp_expr" ):
                return visitor.visitPyteal_global_latest_timestamp_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_latest_timestamp_expr(self):

        localctx = PyTealParser.Pyteal_global_latest_timestamp_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_pyteal_global_latest_timestamp_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2656
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2657
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2658
            self.match(PyTealParser.PYTEAL_GLOBAL_LATEST_TIMESTAMP)
            self.state = 2659
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2660
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2664
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2661
                    self.trailer() 
                self.state = 2666
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_current_application_id_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_CURRENT_APPLICATION_ID(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_CURRENT_APPLICATION_ID, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_current_application_id_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_current_application_id_expr" ):
                listener.enterPyteal_global_current_application_id_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_current_application_id_expr" ):
                listener.exitPyteal_global_current_application_id_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_current_application_id_expr" ):
                return visitor.visitPyteal_global_current_application_id_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_current_application_id_expr(self):

        localctx = PyTealParser.Pyteal_global_current_application_id_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_pyteal_global_current_application_id_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2667
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2668
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2669
            self.match(PyTealParser.PYTEAL_GLOBAL_CURRENT_APPLICATION_ID)
            self.state = 2670
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2671
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2675
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,268,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2672
                    self.trailer() 
                self.state = 2677
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_creator_address_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_CREATOR_ADDRESS(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_CREATOR_ADDRESS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_creator_address_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_creator_address_expr" ):
                listener.enterPyteal_global_creator_address_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_creator_address_expr" ):
                listener.exitPyteal_global_creator_address_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_creator_address_expr" ):
                return visitor.visitPyteal_global_creator_address_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_creator_address_expr(self):

        localctx = PyTealParser.Pyteal_global_creator_address_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_pyteal_global_creator_address_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2678
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2679
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2680
            self.match(PyTealParser.PYTEAL_GLOBAL_CREATOR_ADDRESS)
            self.state = 2681
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2682
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2686
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2683
                    self.trailer() 
                self.state = 2688
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_current_application_address_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_CURRENT_APPLICATION_ADDRESS(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_CURRENT_APPLICATION_ADDRESS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_current_application_address_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_current_application_address_expr" ):
                listener.enterPyteal_global_current_application_address_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_current_application_address_expr" ):
                listener.exitPyteal_global_current_application_address_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_current_application_address_expr" ):
                return visitor.visitPyteal_global_current_application_address_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_current_application_address_expr(self):

        localctx = PyTealParser.Pyteal_global_current_application_address_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_pyteal_global_current_application_address_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2689
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2690
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2691
            self.match(PyTealParser.PYTEAL_GLOBAL_CURRENT_APPLICATION_ADDRESS)
            self.state = 2692
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2693
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2697
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2694
                    self.trailer() 
                self.state = 2699
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pyteal_global_group_id_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTEAL_GLOBAL(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL, 0)

        def PYTEAL_DOT(self):
            return self.getToken(PyTealParser.PYTEAL_DOT, 0)

        def PYTEAL_GLOBAL_GROUP_ID(self):
            return self.getToken(PyTealParser.PYTEAL_GLOBAL_GROUP_ID, 0)

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def getRuleIndex(self):
            return PyTealParser.RULE_pyteal_global_group_id_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyteal_global_group_id_expr" ):
                listener.enterPyteal_global_group_id_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyteal_global_group_id_expr" ):
                listener.exitPyteal_global_group_id_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyteal_global_group_id_expr" ):
                return visitor.visitPyteal_global_group_id_expr(self)
            else:
                return visitor.visitChildren(self)




    def pyteal_global_group_id_expr(self):

        localctx = PyTealParser.Pyteal_global_group_id_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_pyteal_global_group_id_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2700
            self.match(PyTealParser.PYTEAL_GLOBAL)
            self.state = 2701
            self.match(PyTealParser.PYTEAL_DOT)
            self.state = 2702
            self.match(PyTealParser.PYTEAL_GLOBAL_GROUP_ID)
            self.state = 2703
            self.match(PyTealParser.OPEN_PAREN)
            self.state = 2704
            self.match(PyTealParser.CLOSE_PAREN)
            self.state = 2708
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2705
                    self.trailer() 
                self.state = 2710
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PyTealParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(PyTealParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TrailerContext,i)


        def pyteal_txn_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_txn_exprContext,0)


        def pyteal_data_expr(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_data_exprContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_expr" ):
                return visitor.visitAtom_expr(self)
            else:
                return visitor.visitChildren(self)




    def atom_expr(self):

        localctx = PyTealParser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.state = 2723
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 63, 73, 74, 81, 83, 88, 90, 97, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 2711
                    self.match(PyTealParser.AWAIT)


                self.state = 2714
                self.atom()
                self.state = 2718
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,273,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2715
                        self.trailer() 
                    self.state = 2720
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,273,self._ctx)

                pass
            elif token in [45, 47, 48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2721
                self.pyteal_txn_expr()
                pass
            elif token in [3, 4, 8, 9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2722
                self.pyteal_data_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(PyTealParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(PyTealParser.Testlist_compContext,0)


        def OPEN_BRACK(self):
            return self.getToken(PyTealParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(PyTealParser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(PyTealParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(PyTealParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(PyTealParser.DictorsetmakerContext,0)


        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def NUMBER(self):
            return self.getToken(PyTealParser.NUMBER, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.STRING)
            else:
                return self.getToken(PyTealParser.STRING, i)

        def ELLIPSIS(self):
            return self.getToken(PyTealParser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(PyTealParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PyTealParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PyTealParser.FALSE, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PyTealParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 2752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2725
                self.match(PyTealParser.OPEN_PAREN)
                self.state = 2728
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [86]:
                    self.state = 2726
                    self.yield_expr()
                    pass
                elif token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 89, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                    self.state = 2727
                    self.testlist_comp()
                    pass
                elif token in [91]:
                    pass
                else:
                    pass
                self.state = 2730
                self.match(PyTealParser.CLOSE_PAREN)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2731
                self.match(PyTealParser.OPEN_BRACK)
                self.state = 2733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593191609833) != 0) or _la==138:
                    self.state = 2732
                    self.testlist_comp()


                self.state = 2735
                self.match(PyTealParser.CLOSE_BRACK)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2736
                self.match(PyTealParser.OPEN_BRACE)
                self.state = 2738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593183221225) != 0) or _la==138:
                    self.state = 2737
                    self.dictorsetmaker()


                self.state = 2740
                self.match(PyTealParser.CLOSE_BRACE)
                pass
            elif token in [73, 83, 138]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2741
                self.name()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2742
                self.match(PyTealParser.NUMBER)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2744 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2743
                        self.match(PyTealParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2746 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,278,self._ctx)

                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2748
                self.match(PyTealParser.ELLIPSIS)
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2749
                self.match(PyTealParser.NONE)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2750
                self.match(PyTealParser.TRUE)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2751
                self.match(PyTealParser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PyTealParser.NAME, 0)

        def UNDERSCORE(self):
            return self.getToken(PyTealParser.UNDERSCORE, 0)

        def MATCH(self):
            return self.getToken(PyTealParser.MATCH, 0)

        def getRuleIndex(self):
            return PyTealParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = PyTealParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            _la = self._input.LA(1)
            if not(_la==73 or _la==83 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PyTealParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = PyTealParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.state = 2756
                self.test()
                pass
            elif token in [89]:
                self.state = 2757
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52, 65]:
                self.state = 2760
                self.comp_for()
                pass
            elif token in [91, 92, 98]:
                self.state = 2768
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2761
                        self.match(PyTealParser.COMMA)
                        self.state = 2764
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                            self.state = 2762
                            self.test()
                            pass
                        elif token in [89]:
                            self.state = 2763
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 2770
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

                self.state = 2772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2771
                    self.match(PyTealParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(PyTealParser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(PyTealParser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(PyTealParser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(PyTealParser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(PyTealParser.DOT, 0)

        def pyteal_arithmetic_operations(self):
            return self.getTypedRuleContext(PyTealParser.Pyteal_arithmetic_operationsContext,0)


        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = PyTealParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 2790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2776
                self.match(PyTealParser.OPEN_PAREN)
                self.state = 2778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593183221225) != 0) or _la==138:
                    self.state = 2777
                    self.arglist()


                self.state = 2780
                self.match(PyTealParser.CLOSE_PAREN)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2781
                self.match(PyTealParser.OPEN_BRACK)
                self.state = 2782
                self.subscriptlist()
                self.state = 2783
                self.match(PyTealParser.CLOSE_BRACK)
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2785
                self.match(PyTealParser.DOT)
                self.state = 2788
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]:
                    self.state = 2786
                    self.pyteal_arithmetic_operations()
                    pass
                elif token in [73, 83, 138]:
                    self.state = 2787
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Subscript_Context)
            else:
                return self.getTypedRuleContext(PyTealParser.Subscript_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = PyTealParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2792
            self.subscript_()
            self.state = 2797
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,288,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2793
                    self.match(PyTealParser.COMMA)
                    self.state = 2794
                    self.subscript_() 
                self.state = 2799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

            self.state = 2801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 2800
                self.match(PyTealParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(PyTealParser.SliceopContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_subscript_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_" ):
                listener.enterSubscript_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_" ):
                listener.exitSubscript_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_" ):
                return visitor.visitSubscript_(self)
            else:
                return visitor.visitChildren(self)




    def subscript_(self):

        localctx = PyTealParser.Subscript_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_subscript_)
        self._la = 0 # Token type
        try:
            self.state = 2814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2803
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593191740905) != 0) or _la==138:
                    self.state = 2804
                    self.test()


                self.state = 2807
                self.match(PyTealParser.COLON)
                self.state = 2809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593191740905) != 0) or _la==138:
                    self.state = 2808
                    self.test()


                self.state = 2812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 2811
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = PyTealParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2816
            self.match(PyTealParser.COLON)
            self.state = 2818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593191740905) != 0) or _la==138:
                self.state = 2817
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.ExprContext)
            else:
                return self.getTypedRuleContext(PyTealParser.ExprContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = PyTealParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 9, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 33, 34, 35, 36, 37, 43, 44, 45, 47, 48, 53, 63, 73, 74, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.state = 2820
                self.expr(0)
                pass
            elif token in [89]:
                self.state = 2821
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2831
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2824
                    self.match(PyTealParser.COMMA)
                    self.state = 2827
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 4, 8, 9, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 33, 34, 35, 36, 37, 43, 44, 45, 47, 48, 53, 63, 73, 74, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                        self.state = 2825
                        self.expr(0)
                        pass
                    elif token in [89]:
                        self.state = 2826
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2833
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

            self.state = 2835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 2834
                self.match(PyTealParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = PyTealParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2837
            self.test()
            self.state = 2842
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,299,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2838
                    self.match(PyTealParser.COMMA)
                    self.state = 2839
                    self.test() 
                self.state = 2844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,299,self._ctx)

            self.state = 2846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 2845
                self.match(PyTealParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COLON)
            else:
                return self.getToken(PyTealParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.POWER)
            else:
                return self.getToken(PyTealParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.ExprContext)
            else:
                return self.getTypedRuleContext(PyTealParser.ExprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PyTealParser.Comp_forContext,0)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PyTealParser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = PyTealParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 2854
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                    self.state = 2848
                    self.test()
                    self.state = 2849
                    self.match(PyTealParser.COLON)
                    self.state = 2850
                    self.test()
                    pass
                elif token in [95]:
                    self.state = 2852
                    self.match(PyTealParser.POWER)
                    self.state = 2853
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2874
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [52, 65]:
                    self.state = 2856
                    self.comp_for()
                    pass
                elif token in [92, 111]:
                    self.state = 2868
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2857
                            self.match(PyTealParser.COMMA)
                            self.state = 2864
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                                self.state = 2858
                                self.test()
                                self.state = 2859
                                self.match(PyTealParser.COLON)
                                self.state = 2860
                                self.test()
                                pass
                            elif token in [95]:
                                self.state = 2862
                                self.match(PyTealParser.POWER)
                                self.state = 2863
                                self.expr(0)
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 2870
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

                    self.state = 2872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==92:
                        self.state = 2871
                        self.match(PyTealParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 2878
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                    self.state = 2876
                    self.test()
                    pass
                elif token in [89]:
                    self.state = 2877
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2894
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [52, 65]:
                    self.state = 2880
                    self.comp_for()
                    pass
                elif token in [92, 111]:
                    self.state = 2888
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2881
                            self.match(PyTealParser.COMMA)
                            self.state = 2884
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                                self.state = 2882
                                self.test()
                                pass
                            elif token in [89]:
                                self.state = 2883
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 2890
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

                    self.state = 2892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==92:
                        self.state = 2891
                        self.match(PyTealParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PyTealParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def COLON(self):
            return self.getToken(PyTealParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PyTealParser.BlockContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PyTealParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PyTealParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(PyTealParser.ArglistContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = PyTealParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2898
            self.match(PyTealParser.CLASS)
            self.state = 2899
            self.name()
            self.state = 2905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 2900
                self.match(PyTealParser.OPEN_PAREN)
                self.state = 2902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & -4611685593183221225) != 0) or _la==138:
                    self.state = 2901
                    self.arglist()


                self.state = 2904
                self.match(PyTealParser.CLOSE_PAREN)


            self.state = 2907
            self.match(PyTealParser.COLON)
            self.state = 2908
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PyTealParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.COMMA)
            else:
                return self.getToken(PyTealParser.COMMA, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = PyTealParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2910
            self.argument()
            self.state = 2915
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2911
                    self.match(PyTealParser.COMMA)
                    self.state = 2912
                    self.argument() 
                self.state = 2917
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

            self.state = 2919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 2918
                self.match(PyTealParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PyTealParser.TestContext)
            else:
                return self.getTypedRuleContext(PyTealParser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(PyTealParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(PyTealParser.POWER, 0)

        def STAR(self):
            return self.getToken(PyTealParser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(PyTealParser.Comp_forContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = PyTealParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.state = 2921
                self.test()
                self.state = 2923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52 or _la==65:
                    self.state = 2922
                    self.comp_for()


                pass

            elif la_ == 2:
                self.state = 2925
                self.test()
                self.state = 2926
                self.match(PyTealParser.ASSIGN)
                self.state = 2927
                self.test()
                pass

            elif la_ == 3:
                self.state = 2929
                self.match(PyTealParser.POWER)
                self.state = 2930
                self.test()
                pass

            elif la_ == 4:
                self.state = 2931
                self.match(PyTealParser.STAR)
                self.state = 2932
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(PyTealParser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(PyTealParser.Comp_ifContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = PyTealParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_comp_iter)
        try:
            self.state = 2937
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52, 65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2935
                self.comp_for()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2936
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PyTealParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PyTealParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PyTealParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(PyTealParser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(PyTealParser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(PyTealParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = PyTealParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 2939
                self.match(PyTealParser.ASYNC)


            self.state = 2942
            self.match(PyTealParser.FOR)
            self.state = 2943
            self.exprlist()
            self.state = 2944
            self.match(PyTealParser.IN)
            self.state = 2945
            self.or_test()
            self.state = 2947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & 73729) != 0):
                self.state = 2946
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PyTealParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(PyTealParser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PyTealParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = PyTealParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2949
            self.match(PyTealParser.IF)
            self.state = 2950
            self.test_nocond()
            self.state = 2952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & 73729) != 0):
                self.state = 2951
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encoding_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PyTealParser.NameContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_encoding_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_decl" ):
                listener.enterEncoding_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_decl" ):
                listener.exitEncoding_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncoding_decl" ):
                return visitor.visitEncoding_decl(self)
            else:
                return visitor.visitChildren(self)




    def encoding_decl(self):

        localctx = PyTealParser.Encoding_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_encoding_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2954
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PyTealParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(PyTealParser.Yield_argContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = PyTealParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2956
            self.match(PyTealParser.YIELD)
            self.state = 2958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9213872256390791400) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 27215081407937) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 19) != 0):
                self.state = 2957
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PyTealParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(PyTealParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(PyTealParser.TestlistContext,0)


        def getRuleIndex(self):
            return PyTealParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = PyTealParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_yield_arg)
        try:
            self.state = 2963
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2960
                self.match(PyTealParser.FROM)
                self.state = 2961
                self.test()
                pass
            elif token in [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 63, 72, 73, 74, 76, 81, 83, 88, 90, 97, 104, 105, 109, 110, 134, 135, 138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2962
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PyTealParser.STRING)
            else:
                return self.getToken(PyTealParser.STRING, i)

        def getRuleIndex(self):
            return PyTealParser.RULE_strings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrings" ):
                listener.enterStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrings" ):
                listener.exitStrings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrings" ):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)




    def strings(self):

        localctx = PyTealParser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_strings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2966 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2965
                self.match(PyTealParser.STRING)
                self.state = 2968 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==134):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[60] = self.literal_pattern_sempred
        self._predicates[61] = self.literal_expr_sempred
        self._predicates[68] = self.pattern_capture_target_sempred
        self._predicates[70] = self.value_pattern_sempred
        self._predicates[97] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def literal_pattern_sempred(self, localctx:Literal_patternContext, predIndex:int):
            if predIndex == 0:
                return  self.CannotBePlusMinus() 
         

    def literal_expr_sempred(self, localctx:Literal_exprContext, predIndex:int):
            if predIndex == 1:
                return  self.CannotBePlusMinus() 
         

    def pattern_capture_target_sempred(self, localctx:Pattern_capture_targetContext, predIndex:int):
            if predIndex == 2:
                return  self.CannotBeDotLpEq() 
         

    def value_pattern_sempred(self, localctx:Value_patternContext, predIndex:int):
            if predIndex == 3:
                return  self.CannotBeDotLpEq() 
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         




